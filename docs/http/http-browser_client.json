{"name":"http-browser_client","qualifiedName":"http/http-browser_client","comment":"","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"BrowserClient","qualifiedName":"http/http-browser_client.BrowserClient","preview":"<p>A <code>dart:html</code>-based HTTP client that runs in the browser and is backed by\nXMLHttpRequests.</p>"}],"typedef":{},"error":[]},"packageName":"http","packageIntro":"<h1>http</h1>\n<p>A composable, Future-based library for making HTTP requests.</p>\n<p>This package contains a set of high-level functions and classes that make it\neasy to consume HTTP resources. It's platform-independent, and can be used on\nboth the command-line and the browser. Currently the global utility functions\nare unsupported on the browser; see \"Using on the Browser\" below.</p>\n<h2>Using</h2>\n<p>The easiest way to use this library is via the top-level functions, although\nthey currently only work on platforms where <code>dart:io</code> is available. They allow\nyou to make individual HTTP requests with minimal hassle:</p>\n<pre class=\"dart\"><code>import 'package:http/http.dart' as http;\n\nvar url = \"http://example.com/whatsit/create\";\nhttp.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n\nhttp.read(\"http://example.com/foobar.txt\").then(print);\n</code></pre>\n<p>If you're making multiple requests to the same server, you can keep open a\npersistent connection by using a <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> rather than making one-off requests.\nIf you do this, make sure to close the client when you're done:</p>\n<pre class=\"dart\"><code>var client = new http.Client();\nclient.post(\n    \"http://example.com/whatsit/create\",\n    body: {\"name\": \"doodle\", \"color\": \"blue\"})\n  .then((response) =&gt; client.get(response.bodyFields['uri']))\n  .then((response) =&gt; print(response.body))\n  .whenComplete(client.close);\n</code></pre>\n<p>You can also exert more fine-grained control over your requests and responses by\ncreating <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Request\">Request</a> or <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.StreamedRequest\">StreamedRequest</a> objects yourself and passing them to\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client#id_send\">Client.send</a>.</p>\n<p>This package is designed to be composable. This makes it easy for external\nlibraries to work with one another to add behavior to it. Libraries wishing to\nadd behavior should create a subclass of <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.BaseClient\">BaseClient</a> that wraps another\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> and adds the desired behavior:</p>\n<pre class=\"dart\"><code>class UserAgentClient extends http.BaseClient {\n  final String userAgent;\n  final http.Client _inner;\n\n  UserAgentClient(this.userAgent, this._inner);\n\n  Future&lt;StreamedResponse&gt; send(BaseRequest request) {\n    request.headers['user-agent'] = userAgent;\n    return _inner.send(request);\n  }\n}\n</code></pre>\n<h2>Using on the Browser</h2>\n<p>The HTTP library can be used on the browser via the [BrowserClient][] class in\n<code>package:http/browser_client.dart</code>. This client translates requests into\nXMLHttpRequests. For example:</p>\n<pre class=\"dart\"><code>import 'package:http/browser_client.dart';\nimport 'package:http/http.dart' as http;\n\nvar client = new BrowserClient();\nvar url = \"/whatsit/create\";\nclient.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n</code></pre>\n<h2>Filing issues</h2>\n<p>Please file issues for the http package at <a href=\"http://dartbug.com/new\">http://dartbug.com/new</a>.</p>"}