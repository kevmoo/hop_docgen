{"name":"StringScanner","qualifiedName":"string_scanner/string_scanner.StringScanner","comment":"<p>A class that scans through a string using <a>string_scanner/dart-core.Pattern</a>s.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"string":{"name":"string","qualifiedName":"string_scanner/string_scanner.StringScanner.string","comment":"<p>The string being scanned through.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{"position=":{"name":"position=","qualifiedName":"string_scanner/string_scanner.StringScanner.position=","comment":"","commentFrom":"string_scanner.StringScanner.position=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"position":{"name":"position","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"getters":{"isDone":{"name":"isDone","qualifiedName":"string_scanner/string_scanner.StringScanner.isDone","comment":"<p>Whether the scanner has completely consumed <a>string_scanner/string_scanner.StringScanner.string</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"lastMatch":{"name":"lastMatch","qualifiedName":"string_scanner/string_scanner.StringScanner.lastMatch","comment":"<p>The data about the previous match made by the scanner.</p>\n<p>If the last match failed, this will be <code>null</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Match","inner":[]}],"parameters":{},"annotations":[]},"position":{"name":"position","qualifiedName":"string_scanner/string_scanner.StringScanner.position","comment":"<p>The current position of the scanner in the string, in characters.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"rest":{"name":"rest","qualifiedName":"string_scanner/string_scanner.StringScanner.rest","comment":"<p>The portion of the string that hasn't yet been scanned.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"string_scanner/string_scanner.StringScanner.StringScanner-","comment":"<p>Creates a new <a>string_scanner/string_scanner.StringScanner</a> that starts scanning from <a>string_scanner/string_scanner.StringScanner.StringScanner-.position</a>.</p>\n<p><a>string_scanner/string_scanner.StringScanner.StringScanner-.position</a> defaults to 0, the beginning of the string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"string":{"name":"string","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"position":{"name":"position","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"error":{"name":"error","qualifiedName":"string_scanner/string_scanner.StringScanner.error","comment":"<p>Throws a <a>dart-core.FormatException</a> with <a>string_scanner/string_scanner.StringScanner.error.message</a> as well as a detailed\ndescription of the location of the error in the string.</p>\n<p><a>string_scanner/string_scanner.StringScanner.error.match</a> is the match information for the span of the string with which the\nerror is associated. This should be a match returned by this scanner's\n<a>string_scanner/string_scanner.StringScanner.lastMatch</a> property. By default, the error is associated with the last\nmatch.</p>\n<p>If <a>string_scanner/string_scanner.StringScanner.error.position</a> and/or <a>string_scanner/string_scanner.StringScanner.error.length</a> are passed, they are used as the error span\ninstead. If only <a>string_scanner/string_scanner.StringScanner.error.length</a> is passed, <a>string_scanner/string_scanner.StringScanner.error.position</a> defaults to the current\nposition; if only <a>string_scanner/string_scanner.StringScanner.error.position</a> is passed, <a>string_scanner/string_scanner.StringScanner.error.length</a> defaults to 1.</p>\n<p>It's an error to pass <a>string_scanner/string_scanner.StringScanner.error.match</a> at the same time as <a>string_scanner/string_scanner.StringScanner.error.position</a> or <a>string_scanner/string_scanner.StringScanner.error.length</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"message":{"name":"message","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"match":{"name":"match","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Match","inner":[]}],"value":null,"annotations":[]},"position":{"name":"position","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"length":{"name":"length","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"expect":{"name":"expect","qualifiedName":"string_scanner/string_scanner.StringScanner.expect","comment":"<p>If <a>string_scanner/string_scanner.StringScanner.expect.pattern</a> matches at the current position of the string, scans forward\nuntil the end of the match.</p>\n<p>If <a>string_scanner/string_scanner.StringScanner.expect.pattern</a> did not match, throws a <a>dart-core.FormatException</a> describing the\nposition of the failure. <a>string_scanner/string_scanner.StringScanner.expect.name</a> is used in this error as the expected name\nof the pattern being matched; if it's <code>null</code>, the pattern itself is used\ninstead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"pattern":{"name":"pattern","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Pattern","inner":[]}],"value":null,"annotations":[]},"name":{"name":"name","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"expectDone":{"name":"expectDone","qualifiedName":"string_scanner/string_scanner.StringScanner.expectDone","comment":"<p>If the string has not been fully consumed, this throws a\n<a>dart-core.FormatException</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"matches":{"name":"matches","qualifiedName":"string_scanner/string_scanner.StringScanner.matches","comment":"<p>Returns whether or not <a>string_scanner/string_scanner.StringScanner.matches.pattern</a> matches at the current position of the\nstring.</p>\n<p>This doesn't move the scan pointer forward.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"pattern":{"name":"pattern","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Pattern","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"scan":{"name":"scan","qualifiedName":"string_scanner/string_scanner.StringScanner.scan","comment":"<p>If <a>string_scanner/string_scanner.StringScanner.scan.pattern</a> matches at the current position of the string, scans forward\nuntil the end of the match.</p>\n<p>Returns whether or not <a>string_scanner/string_scanner.StringScanner.scan.pattern</a> matched.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"pattern":{"name":"pattern","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Pattern","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"string_scanner/string_scanner.StringScanner.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>string_scanner/string_scanner.StringScanner.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"string_scanner/string_scanner.StringScanner.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"string_scanner/string_scanner.StringScanner.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>string_scanner/string_scanner.StringScanner.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>string_scanner/string_scanner.StringScanner.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"string_scanner/string_scanner.StringScanner.noSuchMethod","comment":"<p><a>string_scanner/string_scanner.StringScanner.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>string_scanner/string_scanner.StringScanner.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>string_scanner/string_scanner.StringScanner.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>string_scanner/string_scanner.StringScanner.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"string_scanner/string_scanner.StringScanner.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}