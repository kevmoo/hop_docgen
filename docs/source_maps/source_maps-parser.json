{"name":"source_maps-parser","qualifiedName":"source_maps/source_maps-parser","comment":"<p>Contains the top-level function to parse source maps version 3.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"parseJson":{"name":"parseJson","qualifiedName":"source_maps/source_maps-parser.parseJson","comment":"<p>Parses a source map directly from a json map object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"source_maps/source_maps-parser.Mapping","inner":[]}],"parameters":{"map":{"name":"map","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]},"otherMaps":{"name":"otherMaps","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Map","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"parse":{"name":"parse","qualifiedName":"source_maps/source_maps-parser.parse","comment":"<p>Parses a source map directly from a json string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"source_maps/source_maps-parser.Mapping","inner":[]}],"parameters":{"jsonMap":{"name":"jsonMap","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"otherMaps":{"name":"otherMaps","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Map","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"TargetEntry","qualifiedName":"source_maps/source_maps-parser.TargetEntry","preview":"<p>A target segment entry read from a source map</p>"},{"name":"TargetLineEntry","qualifiedName":"source_maps/source_maps-parser.TargetLineEntry","preview":"<p>A line entry read from a source map.</p>"},{"name":"SingleMapping","qualifiedName":"source_maps/source_maps-parser.SingleMapping","preview":"<p>A map containing direct source mappings.</p>"},{"name":"MultiSectionMapping","qualifiedName":"source_maps/source_maps-parser.MultiSectionMapping","preview":"<p>A meta-level map containing sections.</p>"},{"name":"Mapping","qualifiedName":"source_maps/source_maps-parser.Mapping","preview":"<p>A mapping parsed our of a source map.</p>"}],"typedef":{},"error":[]},"packageName":"source_maps","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"}