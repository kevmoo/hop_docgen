{"name":"source_maps","qualifiedName":"source_maps/source_maps","comment":"<p>Library to create and parse source maps.</p>\n<p>Create a source map using SourceMapBuilder. For example:</p>\n<pre><code>var json = (new SourceMapBuilder()\n    ..add(inputSpan1, outputSpan1)\n    ..add(inputSpan2, outputSpan2)\n    ..add(inputSpan3, outputSpan3)\n    .toJson(outputFile);\n</code></pre>\n<p>Use the Span and SourceFile classes to specify span locations.</p>\n<p>Parse a source map using parse, and call <code>spanFor</code> on the returned mapping\nobject. For example:</p>\n<pre><code>var mapping = parse(json);\nmapping.spanFor(outputSpan1.line, outputSpan1.column)\n</code></pre>\n<h2>Getting the code</h2>\n<p>This library is distributed as a <a href=\"http://pub.dartlang.org\">pub</a> package. To install this package,\nadd the following to your <code>pubspec.yaml</code> file:</p>\n<pre><code>dependencies:\n  source_maps: any\n</code></pre>\n<p>After you run <code>pub install</code>, you should be able to access this library by\nimporting <code>package:source_maps/source_maps.dart</code>.</p>\n<p>For more information, see the\n<a href=\"http://pub.dartlang.org/packages/source_maps\">source_maps package on pub.dartlang.org</a>.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"parseJson":{"name":"parseJson","qualifiedName":"source_maps/source_maps.parseJson","comment":"<p>Parses a source map directly from a json map object.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"source_maps/source_maps.Mapping","inner":[]}],"parameters":{"map":{"name":"map","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"null","annotations":[]},"otherMaps":{"name":"otherMaps","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Map","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"parse":{"name":"parse","qualifiedName":"source_maps/source_maps.parse","comment":"<p>Parses a source map directly from a json string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"source_maps/source_maps.Mapping","inner":[]}],"parameters":{"jsonMap":{"name":"jsonMap","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"otherMaps":{"name":"otherMaps","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Map","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"guessIndent":{"name":"guessIndent","qualifiedName":"source_maps/source_maps.guessIndent","comment":"<p>Returns all whitespace characters at the start of <a>source_maps/source_maps.guessIndent.charOffset</a>'s line.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"code":{"name":"code","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"charOffset":{"name":"charOffset","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Entry","qualifiedName":"source_maps/source_maps.Entry","preview":"<p>An entry in the source map builder.</p>"},{"name":"SourceMapBuilder","qualifiedName":"source_maps/source_maps.SourceMapBuilder","preview":"<p>Builds a source map given a set of mappings.</p>"},{"name":"TargetEntry","qualifiedName":"source_maps/source_maps.TargetEntry","preview":"<p>A target segment entry read from a source map</p>"},{"name":"TargetLineEntry","qualifiedName":"source_maps/source_maps.TargetLineEntry","preview":"<p>A line entry read from a source map.</p>"},{"name":"SingleMapping","qualifiedName":"source_maps/source_maps.SingleMapping","preview":"<p>A map containing direct source mappings.</p>"},{"name":"MultiSectionMapping","qualifiedName":"source_maps/source_maps.MultiSectionMapping","preview":"<p>A meta-level map containing sections.</p>"},{"name":"Mapping","qualifiedName":"source_maps/source_maps.Mapping","preview":"<p>A mapping parsed our of a source map.</p>"},{"name":"NestedItem","qualifiedName":"source_maps/source_maps.NestedItem","preview":"<p>An item added to a <a>source_maps/source_maps.NestedPrinter</a>.</p>"},{"name":"NestedPrinter","qualifiedName":"source_maps/source_maps.NestedPrinter","preview":"<p>A more advanced printer that keeps track of offset locations to record\nsource maps, but additionally allows nesting of different kind of items,\nincluding <a>source_maps/source_maps.NestedPrinter</a>s, and it let's you automatically indent text.</p>"},{"name":"Printer","qualifiedName":"source_maps/source_maps.Printer","preview":"<p>A simple printer that keeps track of offset locations and records source\nmaps locations.</p>"},{"name":"TextEditTransaction","qualifiedName":"source_maps/source_maps.TextEditTransaction","preview":"<p>Editable text transaction.</p>"},{"name":"SourceFileSegment","qualifiedName":"source_maps/source_maps.SourceFileSegment","preview":"<p>A convenience type to treat a code segment as if it were a separate\n<a>source_maps/source_maps.SourceFile</a>. A <a>source_maps/source_maps.SourceFileSegment</a> shifts all locations by an offset, which\nallows you to set source-map locations based on the locations relative to\nthe start of the segment, but that get translated to absolute locations in\nthe original source file.</p>"},{"name":"SourceFile","qualifiedName":"source_maps/source_maps.SourceFile","preview":"<p>Stores information about a source file, to permit computation of the line\nand column. Also contains a nice default error message highlighting the code\nlocation.</p>"},{"name":"FileSpan","qualifiedName":"source_maps/source_maps.FileSpan","preview":"<p><a>source_maps/source_maps.Span</a> where values are computed from an underling <a>source_maps/source_maps.SourceFile</a>.</p>"},{"name":"FileLocation","qualifiedName":"source_maps/source_maps.FileLocation","preview":"<p><a>source_maps/source_maps.Location</a> with values computed from an underling <a>source_maps/source_maps.SourceFile</a>.</p>"},{"name":"FixedSpan","qualifiedName":"source_maps/source_maps.FixedSpan","preview":"<p>Implementation of <a>source_maps/source_maps.Span</a> where all the values are given at allocation time.</p>"},{"name":"FixedLocation","qualifiedName":"source_maps/source_maps.FixedLocation","preview":"<p>Implementation of <a>source_maps/source_maps.Location</a> with fixed values given at allocation time.</p>"},{"name":"Location","qualifiedName":"source_maps/source_maps.Location","preview":"<p>A location in the source text</p>"},{"name":"Span","qualifiedName":"source_maps/source_maps.Span","preview":"<p>A simple class that describe a segment of source text.</p>"}],"typedef":{},"error":[]},"packageName":"source_maps","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"}