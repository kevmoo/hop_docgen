{"name":"Entry","qualifiedName":"source_maps/source_maps.Entry","comment":"<p>An entry in the source map builder.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["dart-core.Comparable"],"subclass":[],"variables":{"source":{"name":"source","qualifiedName":"source_maps/source_maps-builder.Entry.source","comment":"<p>Span denoting the original location in the input source file</p>","final":true,"static":false,"constant":false,"type":[{"outer":"source_maps/source_maps-span.Location","inner":[]}],"annotations":[]},"target":{"name":"target","qualifiedName":"source_maps/source_maps-builder.Entry.target","comment":"<p>Span indicating the corresponding location in the target file.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"source_maps/source_maps-span.Location","inner":[]}],"annotations":[]},"identifierName":{"name":"identifierName","qualifiedName":"source_maps/source_maps-builder.Entry.identifierName","comment":"<p>An identifier name, when this location is the start of an identifier.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"source_maps/source_maps.Entry.Entry-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"source":{"name":"source","optional":false,"named":false,"default":false,"type":[{"outer":"source_maps/source_maps.Location","inner":[]}],"value":"null","annotations":[]},"target":{"name":"target","optional":false,"named":false,"default":false,"type":[{"outer":"source_maps/source_maps.Location","inner":[]}],"value":"null","annotations":[]},"identifierName":{"name":"identifierName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"compareTo":{"name":"compareTo","qualifiedName":"source_maps/source_maps.Entry.compareTo","comment":"<p>Implements <a>dart-core.Comparable</a> to ensure that entries are ordered by their\nlocation in the target file. We sort primarily by the target offset\nbecause source map files are encoded by printing each mapping in order as\nthey appear in the target file.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"source_maps/source_maps.Entry","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"source_maps/source_maps.Entry.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>source_maps/source_maps.Entry.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"source_maps/source_maps.Entry.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"source_maps/source_maps.Entry.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>source_maps/source_maps.Entry.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>source_maps/source_maps.Entry.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"source_maps/source_maps.Entry.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"source_maps/source_maps.Entry.noSuchMethod","comment":"<p><a>source_maps/source_maps.Entry.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>source_maps/source_maps.Entry.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>source_maps/source_maps.Entry.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>source_maps/source_maps.Entry.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"compareTo":{"name":"compareTo","qualifiedName":"source_maps/source_maps.Entry.compareTo","comment":"<p>Compares this object to another <a>dart-core.Comparable</a></p>\n<p>Returns a value like a <a>dart-core.Comparator</a> when comparing <code>this</code> to <a>source_maps/source_maps.Entry.compareTo.other</a>.\nThat is, it returns a negative integer if <code>this</code> is ordered before <a>source_maps/source_maps.Entry.compareTo.other</a>,\na positive integer if <code>this</code> is ordered after <a>source_maps/source_maps.Entry.compareTo.other</a>,\nand zero if <code>this</code> and <a>source_maps/source_maps.Entry.compareTo.other</a> are ordered together.</p>\n<p>The <a>source_maps/source_maps.Entry.compareTo.other</a> argument must be a value that is comparable to this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Comparable.compareTo","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Comparable.T","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}