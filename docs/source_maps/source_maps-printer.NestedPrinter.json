{"name":"NestedPrinter","qualifiedName":"source_maps/source_maps-printer.NestedPrinter","comment":"<p>A more advanced printer that keeps track of offset locations to record\nsource maps, but additionally allows nesting of different kind of items,\nincluding <a>source_maps/source_maps-printer.NestedPrinter</a>s, and it let's you automatically indent text.</p>\n<p>This class is especially useful when doing code generation, where different\npeices of the code are generated independently on separate printers, and are\nfinally put together in the end.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":["source_maps/source_maps-printer.NestedItem"],"subclass":[],"variables":{"indent":{"name":"indent","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.indent","comment":"<p>Current indentation, which can be updated from outside this class.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"printer":{"name":"printer","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.printer","comment":"<p><a>source_maps/source_maps-printer.Printer</a> used during the last call to <a>source_maps/source_maps-printer.NestedPrinter.build</a>, if any.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"source_maps/source_maps-printer.Printer","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"text":{"name":"text","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.text","comment":"<p>Returns the text produced after calling <a>source_maps/source_maps-printer.NestedPrinter.build</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"map":{"name":"map","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.map","comment":"<p>Returns the source-map information produced after calling <a>source_maps/source_maps-printer.NestedPrinter.build</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.NestedPrinter-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"indent":{"name":"indent","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"add":{"name":"add","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.add","comment":"<p>Adds <a>source_maps/source_maps-printer.NestedPrinter.add.object</a> to this printer. <a>source_maps/source_maps-printer.NestedPrinter.add.object</a> can be a <a>dart-core.String</a>,\n<a>source_maps/source_maps-printer.NestedPrinter</a>, or anything implementing <a>source_maps/source_maps-printer.NestedItem</a>. If <a>source_maps/source_maps-printer.NestedPrinter.add.object</a> is a\n<a>dart-core.String</a>, the value is appended directly, without doing any formatting\nchanges. If you wish to add a line of code with automatic indentation, use\n<a>source_maps/source_maps-printer.NestedPrinter.addLine</a> instead.  <a>source_maps/source_maps-printer.NestedPrinter</a>s and <a>source_maps/source_maps-printer.NestedItem</a>s are not processed\nuntil <a>source_maps/source_maps-printer.NestedPrinter.build</a> gets called later on. We ensure that <a>source_maps/source_maps-printer.NestedPrinter.build</a> emits every\nobject in the order that they were added to this printer.</p>\n<p>The <a>source_maps/source_maps-printer.NestedPrinter.add.location</a> and <a>source_maps/source_maps-printer.NestedPrinter.add.span</a> parameters indicate the corresponding source map\nlocation of <a>source_maps/source_maps-printer.NestedPrinter.add.object</a> in the original input. Only one, <a>source_maps/source_maps-printer.NestedPrinter.add.location</a> or\n<a>source_maps/source_maps-printer.NestedPrinter.add.span</a>, should be provided at a time.</p>\n<p>Indicate <a>source_maps/source_maps-printer.NestedPrinter.add.isOriginal</a> when <a>source_maps/source_maps-printer.NestedPrinter.add.object</a> is copied directly from the user code.\nSetting <a>source_maps/source_maps-printer.NestedPrinter.add.isOriginal</a> will make this printer propagate source map locations\non every line-break.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"object":{"name":"object","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"location":{"name":"location","optional":true,"named":true,"default":false,"type":[{"outer":"source_maps/source_maps-span.Location","inner":[]}],"value":"null","annotations":[]},"span":{"name":"span","optional":true,"named":true,"default":false,"type":[{"outer":"source_maps/source_maps-span.Span","inner":[]}],"value":"null","annotations":[]},"isOriginal":{"name":"isOriginal","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"insertIndent":{"name":"insertIndent","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.insertIndent","comment":"<p>Append <code>2 * indent</code> spaces to this printer.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"addLine":{"name":"addLine","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.addLine","comment":"<p>Add a <a>source_maps/source_maps-printer.NestedPrinter.addLine.line</a>, autoindenting to the current value of <a>source_maps/source_maps-printer.NestedPrinter.indent</a>. Note,\nindentation is not inferred from the contents added to this printer. If a\nline starts or ends an indentation block, you need to also update <a>source_maps/source_maps-printer.NestedPrinter.indent</a>\naccordingly. Also, indentation is not adapted for nested printers. If\nyou add a <a>source_maps/source_maps-printer.NestedPrinter</a> to this printer, its indentation is set\nseparately and will not include any the indentation set here.</p>\n<p>The <a>source_maps/source_maps-printer.NestedPrinter.addLine.location</a> and <a>source_maps/source_maps-printer.NestedPrinter.addLine.span</a> parameters indicate the corresponding source map\nlocation of object in the original input. Only one, <a>source_maps/source_maps-printer.NestedPrinter.addLine.location</a> or\n<a>source_maps/source_maps-printer.NestedPrinter.addLine.span</a>, should be provided at a time.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"line":{"name":"line","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"location":{"name":"location","optional":true,"named":true,"default":false,"type":[{"outer":"source_maps/source_maps-span.Location","inner":[]}],"value":"null","annotations":[]},"span":{"name":"span","optional":true,"named":true,"default":false,"type":[{"outer":"source_maps/source_maps-span.Span","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.toString","comment":"<p>Returns a string representation of all the contents appended to this\nprinter, including source map location tokens.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"build":{"name":"build","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.build","comment":"<p>Builds the output of this printer and source map information. After\ncalling this function, you can use <a>source_maps/source_maps-printer.NestedPrinter.text</a> and <a>source_maps/source_maps-printer.NestedPrinter.map</a> to retrieve the\ngeenrated code and source map information, respectively.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"filename":{"name":"filename","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"writeTo":{"name":"writeTo","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.writeTo","comment":"<p>Implements the <a>source_maps/source_maps-printer.NestedItem</a> interface.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"printer":{"name":"printer","optional":false,"named":false,"default":false,"type":[{"outer":"source_maps/source_maps-printer.Printer","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>source_maps/source_maps-printer.NestedPrinter.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>source_maps/source_maps-printer.NestedPrinter.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>source_maps/source_maps-printer.NestedPrinter.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.noSuchMethod","comment":"<p><a>source_maps/source_maps-printer.NestedPrinter.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>source_maps/source_maps-printer.NestedPrinter.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>source_maps/source_maps-printer.NestedPrinter.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>source_maps/source_maps-printer.NestedPrinter.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"writeTo":{"name":"writeTo","qualifiedName":"source_maps/source_maps-printer.NestedPrinter.writeTo","comment":"<p>Write the contents of this item into <a>source_maps/source_maps-printer.NestedPrinter.writeTo.printer</a>.</p>","commentFrom":"","inheritedFrom":"source_maps-printer.NestedItem.writeTo","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"printer":{"name":"printer","optional":false,"named":false,"default":false,"type":[{"outer":"source_maps/source_maps-printer.Printer","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}