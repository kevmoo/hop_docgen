{"name":"source_maps-span","qualifiedName":"source_maps/source_maps-span","comment":"<p>Dart classes representing the souce spans and source files.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"SourceFileSegment","qualifiedName":"source_maps/source_maps-span.SourceFileSegment","preview":"<p>A convenience type to treat a code segment as if it were a separate\n<a>source_maps/source_maps-span.SourceFile</a>. A <a>source_maps/source_maps-span.SourceFileSegment</a> shifts all locations by an offset, which\nallows you to set source-map locations based on the locations relative to\nthe start of the segment, but that get translated to absolute locations in\nthe original source file.</p>"},{"name":"SourceFile","qualifiedName":"source_maps/source_maps-span.SourceFile","preview":"<p>Stores information about a source file, to permit computation of the line\nand column. Also contains a nice default error message highlighting the code\nlocation.</p>"},{"name":"FileSpan","qualifiedName":"source_maps/source_maps-span.FileSpan","preview":"<p><a>source_maps/source_maps-span.Span</a> where values are computed from an underling <a>source_maps/source_maps-span.SourceFile</a>.</p>"},{"name":"FileLocation","qualifiedName":"source_maps/source_maps-span.FileLocation","preview":"<p><a>source_maps/source_maps-span.Location</a> with values computed from an underling <a>source_maps/source_maps-span.SourceFile</a>.</p>"},{"name":"FixedSpan","qualifiedName":"source_maps/source_maps-span.FixedSpan","preview":"<p>Implementation of <a>source_maps/source_maps-span.Span</a> where all the values are given at allocation time.</p>"},{"name":"FixedLocation","qualifiedName":"source_maps/source_maps-span.FixedLocation","preview":"<p>Implementation of <a>source_maps/source_maps-span.Location</a> with fixed values given at allocation time.</p>"},{"name":"Location","qualifiedName":"source_maps/source_maps-span.Location","preview":"<p>A location in the source text</p>"},{"name":"Span","qualifiedName":"source_maps/source_maps-span.Span","preview":"<p>A simple class that describe a segment of source text.</p>"}],"typedef":{},"error":[]},"packageName":"source_maps","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"}