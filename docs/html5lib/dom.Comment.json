{"name":"Comment","qualifiedName":"html5lib/dom.Comment","comment":"","isAbstract":false,"superclass":"html5lib/dom.Node","implements":[],"subclass":[],"variables":{"data":{"name":"data","qualifiedName":"html5lib/dom.Comment.data","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{"tagName":{"name":"tagName","qualifiedName":"html5lib/dom.Node.tagName","comment":"<p>The tag name associated with the node.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"parent":{"name":"parent","qualifiedName":"html5lib/dom.Node.parent","comment":"<p>The parent of the current node (or null for the document node).</p>","final":false,"static":false,"constant":false,"type":[{"outer":"html5lib/dom.Node","inner":[]}],"annotations":[]},"attributes":{"name":"attributes","qualifiedName":"html5lib/dom.Node.attributes","comment":"<p>A map holding name, value pairs for attributes of the node.</p>\n<p>Note that attribute order needs to be stable for serialization, so we use a\nLinkedHashMap. Each key is a <a>dart-core.String</a> or <a>html5lib/dom.AttributeName</a>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-collection.LinkedHashMap","inner":[{"outer":"dynamic","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"nodes":{"name":"nodes","qualifiedName":"html5lib/dom.Node.nodes","comment":"<p>A list of child nodes of the current node. This must\ninclude all elements but not necessarily other node types.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"html5lib/dom.NodeList","inner":[]}],"annotations":[]},"sourceSpan":{"name":"sourceSpan","qualifiedName":"html5lib/dom.Node.sourceSpan","comment":"<p>The source span of this node, if it was created by the <a>html5lib/parser.HtmlParser</a>.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"source_maps-span.FileSpan","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"nodeType":{"name":"nodeType","qualifiedName":"html5lib/dom.Comment.nodeType","comment":"","commentFrom":"dom.Node.nodeType","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"html5lib/dom.Comment.Comment-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"data":{"name":"data","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"toString":{"name":"toString","qualifiedName":"html5lib/dom.Comment.toString","comment":"","commentFrom":"dom.Node.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"clone":{"name":"clone","qualifiedName":"html5lib/dom.Comment.clone","comment":"<p>Return a shallow copy of the current node i.e. a node with the same\nname and attributes but with no parent or child nodes.</p>","commentFrom":"dom.Node.clone","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"html5lib/dom.Comment","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{"innerHtml=":{"name":"innerHtml=","qualifiedName":"html5lib/dom.Comment.innerHtml=","comment":"","commentFrom":"","inheritedFrom":"dom.Node.innerHtml=","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"html5lib/dom.Comment.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>html5lib/dom.Comment.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"html5lib/dom.Comment.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"attributeSpans":{"name":"attributeSpans","qualifiedName":"html5lib/dom.Comment.attributeSpans","comment":"<p>If <a>html5lib/dom.Node.sourceSpan</a> is available, this contains the spans of each attribute.\nThe span of an attribute is the entire attribute, including the name and\nquotes (if any). For example, the span of \"attr\" in <code>&lt;a attr=\"value\"&gt;</code>\nwould be the text <code>attr=\"value\"</code>.</p>","commentFrom":"","inheritedFrom":"dom.Node.attributeSpans","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.LinkedHashMap","inner":[{"outer":"dynamic","inner":[]},{"outer":"source_maps-span.FileSpan","inner":[]}]}],"parameters":{},"annotations":[]},"attributeValueSpans":{"name":"attributeValueSpans","qualifiedName":"html5lib/dom.Comment.attributeValueSpans","comment":"<p>If <a>html5lib/dom.Node.sourceSpan</a> is available, this contains the spans of each attribute's\nvalue. Unlike <a>html5lib/dom.Comment.attributeSpans</a>, this span will inlcude only the value.\nFor example, the value span of \"attr\" in <code>&lt;a attr=\"value\"&gt;</code> would be the\ntext <code>value</code>.</p>","commentFrom":"","inheritedFrom":"dom.Node.attributeValueSpans","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-collection.LinkedHashMap","inner":[{"outer":"dynamic","inner":[]},{"outer":"source_maps-span.FileSpan","inner":[]}]}],"parameters":{},"annotations":[]},"children":{"name":"children","qualifiedName":"html5lib/dom.Comment.children","comment":"","commentFrom":"","inheritedFrom":"dom.Node.children","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"html5lib/dom.Element","inner":[]}]}],"parameters":{},"annotations":[]},"namespace":{"name":"namespace","qualifiedName":"html5lib/dom.Comment.namespace","comment":"","commentFrom":"","inheritedFrom":"dom.Node.namespace","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"value":{"name":"value","qualifiedName":"html5lib/dom.Comment.value","comment":"<p>The value of the current node (applies to text nodes and comments).</p>","commentFrom":"","inheritedFrom":"dom.Node.value","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"$dom_nodeType":{"name":"$dom_nodeType","qualifiedName":"html5lib/dom.Comment.$dom_nodeType","comment":"","commentFrom":"","inheritedFrom":"dom.Node.$dom_nodeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"nodeType":{"name":"nodeType","qualifiedName":"html5lib/dom.Comment.nodeType","comment":"","commentFrom":"","inheritedFrom":"dom.Node.nodeType","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"outerHtml":{"name":"outerHtml","qualifiedName":"html5lib/dom.Comment.outerHtml","comment":"","commentFrom":"","inheritedFrom":"dom.Node.outerHtml","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"innerHtml":{"name":"innerHtml","qualifiedName":"html5lib/dom.Comment.innerHtml","comment":"","commentFrom":"","inheritedFrom":"dom.Node.innerHtml","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"firstChild":{"name":"firstChild","qualifiedName":"html5lib/dom.Comment.firstChild","comment":"","commentFrom":"","inheritedFrom":"dom.Node.firstChild","static":false,"abstract":false,"constant":false,"return":[{"outer":"html5lib/dom.Node","inner":[]}],"parameters":{},"annotations":[]},"nameTuple":{"name":"nameTuple","qualifiedName":"html5lib/dom.Comment.nameTuple","comment":"","commentFrom":"","inheritedFrom":"dom.Node.nameTuple","static":false,"abstract":false,"constant":false,"return":[{"outer":"html5lib/utils.Pair","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"html5lib/dom.Comment.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>html5lib/dom.Comment.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>html5lib/dom.Comment.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"html5lib/dom.Comment.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"dom.Node.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"html5lib/dom.Comment.noSuchMethod","comment":"<p><a>html5lib/dom.Comment.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>html5lib/dom.Comment.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>html5lib/dom.Comment.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>html5lib/dom.Comment.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"clone":{"name":"clone","qualifiedName":"html5lib/dom.Comment.clone","comment":"<p>Return a shallow copy of the current node i.e. a node with the same\nname and attributes but with no parent or child nodes.</p>","commentFrom":"","inheritedFrom":"dom.Node.clone","static":false,"abstract":true,"constant":false,"return":[{"outer":"html5lib/dom.Node","inner":[]}],"parameters":{},"annotations":[]},"remove":{"name":"remove","qualifiedName":"html5lib/dom.Comment.remove","comment":"","commentFrom":"","inheritedFrom":"dom.Node.remove","static":false,"abstract":false,"constant":false,"return":[{"outer":"html5lib/dom.Node","inner":[]}],"parameters":{},"annotations":[]},"insertBefore":{"name":"insertBefore","qualifiedName":"html5lib/dom.Comment.insertBefore","comment":"<p>Insert <a>html5lib/dom.Comment.insertBefore.node</a> as a child of the current node, before <a>html5lib/dom.Comment.insertBefore.refNode</a> in the\nlist of child nodes. Raises UnsupportedOperationException if <a>html5lib/dom.Comment.insertBefore.refNode</a>\nis not a child of the current node. If refNode is null, this adds to the\nend of the list.</p>","commentFrom":"","inheritedFrom":"dom.Node.insertBefore","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/dom.Node","inner":[]}],"value":"null","annotations":[]},"refNode":{"name":"refNode","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/dom.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"replaceWith":{"name":"replaceWith","qualifiedName":"html5lib/dom.Comment.replaceWith","comment":"<p>Replaces this node with another node.</p>","commentFrom":"","inheritedFrom":"dom.Node.replaceWith","static":false,"abstract":false,"constant":false,"return":[{"outer":"html5lib/dom.Node","inner":[]}],"parameters":{"otherNode":{"name":"otherNode","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/dom.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"hasContent":{"name":"hasContent","qualifiedName":"html5lib/dom.Comment.hasContent","comment":"<p>Return true if the node has children or text.</p>","commentFrom":"","inheritedFrom":"dom.Node.hasContent","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"reparentChildren":{"name":"reparentChildren","qualifiedName":"html5lib/dom.Comment.reparentChildren","comment":"<p>Move all the children of the current node to <a>html5lib/dom.Comment.reparentChildren.newParent</a>.\nThis is needed so that trees that don't store text as nodes move the\ntext in the correct way.</p>","commentFrom":"","inheritedFrom":"dom.Node.reparentChildren","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"newParent":{"name":"newParent","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/dom.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"query":{"name":"query","qualifiedName":"html5lib/dom.Comment.query","comment":"<p>Seaches for the first descendant node matching the given selectors, using a\npreorder traversal. NOTE: right now, this supports only a single type\nselectors, e.g. <code>node.query('div')</code>.</p>","commentFrom":"","inheritedFrom":"dom.Node.query","static":false,"abstract":false,"constant":false,"return":[{"outer":"html5lib/dom.Element","inner":[]}],"parameters":{"selectors":{"name":"selectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"queryAll":{"name":"queryAll","qualifiedName":"html5lib/dom.Comment.queryAll","comment":"<p>Returns all descendant nodes matching the given selectors, using a\npreorder traversal. NOTE: right now, this supports only a single type\nselectors, e.g. <code>node.queryAll('div')</code>.</p>","commentFrom":"","inheritedFrom":"dom.Node.queryAll","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"html5lib/dom.Element","inner":[]}]}],"parameters":{"selectors":{"name":"selectors","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"hasChildNodes":{"name":"hasChildNodes","qualifiedName":"html5lib/dom.Comment.hasChildNodes","comment":"","commentFrom":"","inheritedFrom":"dom.Node.hasChildNodes","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"contains":{"name":"contains","qualifiedName":"html5lib/dom.Comment.contains","comment":"","commentFrom":"","inheritedFrom":"dom.Node.contains","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/dom.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}