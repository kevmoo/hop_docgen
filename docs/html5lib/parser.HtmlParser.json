{"name":"HtmlParser","qualifiedName":"html5lib/parser.HtmlParser","comment":"<p>Parser for HTML, which generates a tree structure from a stream of\n(possibly malformed) characters.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"strict":{"name":"strict","qualifiedName":"html5lib/parser.HtmlParser.strict","comment":"<p>Raise an exception on the first error encountered.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"generateSpans":{"name":"generateSpans","qualifiedName":"html5lib/parser.HtmlParser.generateSpans","comment":"<p>True to generate <a>source_maps/source_maps.Span</a>s for the <a>html5lib/dom.Node.sourceSpan</a> property.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"tokenizer":{"name":"tokenizer","qualifiedName":"html5lib/parser.HtmlParser.tokenizer","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"html5lib/tokenizer.HtmlTokenizer","inner":[]}],"annotations":[]},"tree":{"name":"tree","qualifiedName":"html5lib/parser.HtmlParser.tree","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"html5lib/treebuilder.TreeBuilder","inner":[]}],"annotations":[]},"errors":{"name":"errors","qualifiedName":"html5lib/parser.HtmlParser.errors","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"html5lib/parser.ParseError","inner":[]}]}],"annotations":[]},"container":{"name":"container","qualifiedName":"html5lib/parser.HtmlParser.container","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"firstStartTag":{"name":"firstStartTag","qualifiedName":"html5lib/parser.HtmlParser.firstStartTag","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]},"compatMode":{"name":"compatMode","qualifiedName":"html5lib/parser.HtmlParser.compatMode","comment":"<p>\"quirks\" / \"limited quirks\" / \"no quirks\"</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"innerHTML":{"name":"innerHTML","qualifiedName":"html5lib/parser.HtmlParser.innerHTML","comment":"<p>innerHTML container when parsing document fragment.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"phase":{"name":"phase","qualifiedName":"html5lib/parser.HtmlParser.phase","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"html5lib/parser.Phase","inner":[]}],"annotations":[]},"lastPhase":{"name":"lastPhase","qualifiedName":"html5lib/parser.HtmlParser.lastPhase","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"html5lib/parser.Phase","inner":[]}],"annotations":[]},"originalPhase":{"name":"originalPhase","qualifiedName":"html5lib/parser.HtmlParser.originalPhase","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"html5lib/parser.Phase","inner":[]}],"annotations":[]},"beforeRCDataPhase":{"name":"beforeRCDataPhase","qualifiedName":"html5lib/parser.HtmlParser.beforeRCDataPhase","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"html5lib/parser.Phase","inner":[]}],"annotations":[]},"framesetOK":{"name":"framesetOK","qualifiedName":"html5lib/parser.HtmlParser.framesetOK","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart-core.bool","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"innerHTMLMode":{"name":"innerHTMLMode","qualifiedName":"html5lib/parser.HtmlParser.innerHTMLMode","comment":"","commentFrom":"parser.HtmlParser.innerHTMLMode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"html5lib/parser.HtmlParser.HtmlParser-","comment":"<p>Create a new HtmlParser and configure the <a>html5lib/parser.HtmlParser.HtmlParser-.tree</a> builder and <a>html5lib/parser.HtmlParser.HtmlParser-.strict</a> mode.\nThe <a>html5lib/parser.HtmlParser.HtmlParser-.input</a> can be a <a>dart-core.String</a>, <a>dart-core</a>&lt;<a>dart-core</a>> of bytes or an <a>html5lib/tokenizer.HtmlTokenizer</a>.</p>\n<p>If <a>html5lib/parser.HtmlParser.HtmlParser-.input</a> is not a <a>html5lib/tokenizer.HtmlTokenizer</a>, you can specify a few more arguments.</p>\n<p>The <a>html5lib/parser.HtmlParser.HtmlParser-.encoding</a> must be a string that indicates the encoding. If specified,\nthat encoding will be used, regardless of any BOM or later declaration\n(such as in a meta element).</p>\n<p>Set <a>html5lib/parser.HtmlParser.HtmlParser-.parseMeta</a> to false if you want to disable parsing the meta element.</p>\n<p>Set <a>html5lib/parser.HtmlParser.HtmlParser-.lowercaseElementName</a> or <a>html5lib/parser.HtmlParser.HtmlParser-.lowercaseAttrName</a> to false to disable the\nautomatic conversion of element and attribute names to lower case. Note\nthat standard way to parse HTML is to lowercase, which is what the browser\nDOM will do if you request Node.outerHTML, for example.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"input":{"name":"input","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"parseMeta":{"name":"parseMeta","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"lowercaseElementName":{"name":"lowercaseElementName","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"lowercaseAttrName":{"name":"lowercaseAttrName","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"strict":{"name":"strict","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"generateSpans":{"name":"generateSpans","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]},"sourceUrl":{"name":"sourceUrl","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"tree":{"name":"tree","optional":true,"named":true,"default":false,"type":[{"outer":"html5lib/treebuilder.TreeBuilder","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"parse":{"name":"parse","qualifiedName":"html5lib/parser.HtmlParser.parse","comment":"<p>Parse an html5 document into a tree.\nAfter parsing, <a>html5lib/parser.HtmlParser.errors</a> will be populated with parse errors, if any.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"html5lib/dom.Document","inner":[]}],"parameters":{},"annotations":[]},"parseFragment":{"name":"parseFragment","qualifiedName":"html5lib/parser.HtmlParser.parseFragment","comment":"<p>Parse an html5 document fragment into a tree.\nPass a <a>html5lib/parser.HtmlParser.parseFragment.container</a> to change the type of the containing element.\nAfter parsing, <a>html5lib/parser.HtmlParser.errors</a> will be populated with parse errors, if any.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"html5lib/dom.DocumentFragment","inner":[]}],"parameters":{"container":{"name":"container","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"div\")","annotations":[]}},"annotations":[]},"reset":{"name":"reset","qualifiedName":"html5lib/parser.HtmlParser.reset","comment":"","commentFrom":"parser.HtmlParser.reset","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"isHTMLIntegrationPoint":{"name":"isHTMLIntegrationPoint","qualifiedName":"html5lib/parser.HtmlParser.isHTMLIntegrationPoint","comment":"","commentFrom":"parser.HtmlParser.isHTMLIntegrationPoint","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/dom.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"isMathMLTextIntegrationPoint":{"name":"isMathMLTextIntegrationPoint","qualifiedName":"html5lib/parser.HtmlParser.isMathMLTextIntegrationPoint","comment":"","commentFrom":"parser.HtmlParser.isMathMLTextIntegrationPoint","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"element":{"name":"element","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/dom.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"inForeignContent":{"name":"inForeignContent","qualifiedName":"html5lib/parser.HtmlParser.inForeignContent","comment":"","commentFrom":"parser.HtmlParser.inForeignContent","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"token":{"name":"token","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/token.Token","inner":[]}],"value":"null","annotations":[]},"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"mainLoop":{"name":"mainLoop","qualifiedName":"html5lib/parser.HtmlParser.mainLoop","comment":"","commentFrom":"parser.HtmlParser.mainLoop","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"parseError":{"name":"parseError","qualifiedName":"html5lib/parser.HtmlParser.parseError","comment":"","commentFrom":"parser.HtmlParser.parseError","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"span":{"name":"span","optional":false,"named":false,"default":false,"type":[{"outer":"source_maps-span.Span","inner":[]}],"value":"null","annotations":[]},"errorcode":{"name":"errorcode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"datavars":{"name":"datavars","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.Map","inner":[]}],"value":"MapConstant({})","annotations":[]}},"annotations":[]},"adjustMathMLAttributes":{"name":"adjustMathMLAttributes","qualifiedName":"html5lib/parser.HtmlParser.adjustMathMLAttributes","comment":"","commentFrom":"parser.HtmlParser.adjustMathMLAttributes","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"token":{"name":"token","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/token.StartTagToken","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"adjustSVGAttributes":{"name":"adjustSVGAttributes","qualifiedName":"html5lib/parser.HtmlParser.adjustSVGAttributes","comment":"","commentFrom":"parser.HtmlParser.adjustSVGAttributes","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"token":{"name":"token","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/token.StartTagToken","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"adjustForeignAttributes":{"name":"adjustForeignAttributes","qualifiedName":"html5lib/parser.HtmlParser.adjustForeignAttributes","comment":"","commentFrom":"parser.HtmlParser.adjustForeignAttributes","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"token":{"name":"token","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/token.StartTagToken","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"resetInsertionMode":{"name":"resetInsertionMode","qualifiedName":"html5lib/parser.HtmlParser.resetInsertionMode","comment":"","commentFrom":"parser.HtmlParser.resetInsertionMode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"parseRCDataRawtext":{"name":"parseRCDataRawtext","qualifiedName":"html5lib/parser.HtmlParser.parseRCDataRawtext","comment":"<p>Generic RCDATA/RAWTEXT Parsing algorithm\n<a>html5lib/parser.HtmlParser.parseRCDataRawtext.contentType</a> - RCDATA or RAWTEXT</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"token":{"name":"token","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/token.Token","inner":[]}],"value":"null","annotations":[]},"contentType":{"name":"contentType","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"html5lib/parser.HtmlParser.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>html5lib/parser.HtmlParser.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"html5lib/parser.HtmlParser.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"html5lib/parser.HtmlParser.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>html5lib/parser.HtmlParser.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>html5lib/parser.HtmlParser.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"html5lib/parser.HtmlParser.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"html5lib/parser.HtmlParser.noSuchMethod","comment":"<p><a>html5lib/parser.HtmlParser.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>html5lib/parser.HtmlParser.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>html5lib/parser.HtmlParser.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>html5lib/parser.HtmlParser.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}