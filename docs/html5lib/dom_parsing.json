{"name":"dom_parsing","qualifiedName":"html5lib/dom_parsing","comment":"<p>This library contains extra APIs that aren't in the DOM, but are useful\nwhen interacting with the parse tree.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"isVoidElement":{"name":"isVoidElement","qualifiedName":"html5lib/dom_parsing.isVoidElement","comment":"<p>Returns true if this tag name is a void element.\nThis method is useful to a pretty printer, because void elements must not\nhave an end tag.\nSee <a href=\"http://dev.w3.org/html5/markup/syntax.html#void-elements\">http://dev.w3.org/html5/markup/syntax.html#void-elements</a> for more info.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"tagName":{"name":"tagName","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"htmlSerializeEscape":{"name":"htmlSerializeEscape","qualifiedName":"html5lib/dom_parsing.htmlSerializeEscape","comment":"<p>Escapes <a>html5lib/dom_parsing.htmlSerializeEscape.text</a> for use in the\n<a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#serializing-html-fragments\">HTML fragment serialization algorithm</a>. In particular, as described\nin the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#escapingString\">specification</a>:</p><ul><li>Replace any occurrence of the <code>&amp;</code> character by the string <code>&amp;amp;</code>.</li><li>\n<p>Replace any occurrences of the U+00A0 NO-BREAK SPACE character by the\n  string <code>&amp;nbsp;</code>.</p></li><li>\n<p>If the algorithm was invoked in <a>html5lib/dom_parsing.htmlSerializeEscape.attributeMode</a>, replace any occurrences of\n  the <code>\"</code> character by the string <code>&amp;quot;</code>.</p></li><li>\n<p>If the algorithm was not invoked in <a>html5lib/dom_parsing.htmlSerializeEscape.attributeMode</a>, replace any\n  occurrences of the <code>&lt;</code> character by the string <code>&amp;lt;</code>, and any occurrences\n  of the <code>&gt;</code> character by the string <code>&amp;gt;</code>.</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"text":{"name":"text","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"attributeMode":{"name":"attributeMode","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"htmlToCodeMarkup":{"name":"htmlToCodeMarkup","qualifiedName":"html5lib/dom_parsing.htmlToCodeMarkup","comment":"<p>Converts the DOM tree into an HTML string with code markup suitable for\ndisplaying the HTML's source code with CSS colors for different parts of the\nmarkup. See also <a>html5lib/dom_parsing.CodeMarkupVisitor</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"node":{"name":"node","optional":false,"named":false,"default":false,"type":[{"outer":"html5lib/dom.Node","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"CodeMarkupVisitor","qualifiedName":"html5lib/dom_parsing.CodeMarkupVisitor","preview":"<p>Converts the DOM tree into an HTML string with code markup suitable for\ndisplaying the HTML's source code with CSS colors for different parts of the\nmarkup. See also <a>html5lib/dom_parsing.htmlToCodeMarkup</a>.</p>"},{"name":"TreeVisitor","qualifiedName":"html5lib/dom_parsing.TreeVisitor","preview":"<p>A simple tree visitor for the DOM nodes.</p>"}],"typedef":{},"error":[]},"packageName":"html5lib","packageIntro":"<h1>html5lib in Pure Dart</h1>\n<p>This is a pure <a href=\"http://www.dartlang.org/\">Dart</a> <a href=\"http://dev.w3.org/html5/spec/parsing.html\">html5 parser</a>. It's a port of\n<a href=\"http://code.google.com/p/html5lib/\">html5lib</a> from Python. Since it's 100%\nDart you can use it safely from a script or server side app.</p>\n<p>Eventually the parse tree API will be compatible with <a href=\"http://api.dartlang.org/docs/continuous/dart_html.html\">dart:html</a>, so\nthe same code will work on the client and the server.</p>\n<h2>Installation</h2>\n<p>Add this to your <code>pubspec.yaml</code> (or create it):</p>\n<pre><code>dependencies:\n  html5lib: any\n</code></pre>\n<p>Then run the <a href=\"http://www.dartlang.org/docs/pub-package-manager/\">Pub Package Manager</a> (comes with the Dart SDK):</p>\n<pre><code>pub install\n</code></pre>\n<h2>Usage</h2>\n<p>Parsing HTML is easy!</p>\n<pre><code>import 'package:html5lib/parser.dart' show parse;\nimport 'package:html5lib/dom.dart';\n\nmain() {\n  var document = parse(\n      '&lt;body&gt;Hello world! &lt;a href=\"www.html5rocks.com\"&gt;HTML5 rocks!');\n  print(document.outerHtml);\n}\n</code></pre>\n<p>You can pass a String or list of bytes to <code>parse</code>.\nThere's also <code>parseFragment</code> for parsing a document fragment, and <code>HtmlParser</code>\nif you want more low level control.</p>\n<h2>Running Tests</h2>\n<pre><code># From Dart SVN checkout\n./tools/build.py -m release\n./tools/test.py -m release html5lib\n./tools/test.py -m release -r drt html5lib\n</code></pre>"}