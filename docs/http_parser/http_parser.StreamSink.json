{"name":"StreamSink","qualifiedName":"http_parser/http_parser.StreamSink","comment":"<p>A <a>http_parser/http_parser.StreamSink</a> unifies the asynchronous methods from <a>http_parser/http_parser.StreamConsumer</a> and\nthe synchronous methods from <a>http_parser/http_parser.EventSink</a>.</p>\n<p>The <a>http_parser/http_parser.EventSink</a> methods can't be used while the addStream is called.\nAs soon as the addStream's <a>http_parser/dart-async.Future</a> completes with a value, the\n<a>http_parser/http_parser.EventSink</a> methods can be used again.</p>\n<p>If addStream is called after any of the <a>http_parser/http_parser.EventSink</a> methods, it'll\nbe delayed until the underlying system has consumed the data added by the\n<a>http_parser/http_parser.EventSink</a> methods.</p>\n<p>When <a>http_parser/http_parser.EventSink</a> methods are used, the [done] [Future] can be used to\ncatch any errors.</p>\n<p>When <a>http_parser/http_parser.StreamSink.close</a> is called, it will return the [done] [Future].</p>","isAbstract":true,"superclass":"dart-core.Object","implements":["http_parser/http_parser.EventSink","http_parser/http_parser.StreamConsumer"],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"done":{"name":"done","qualifiedName":"http_parser/http_parser.StreamSink.done","comment":"<p>The <a>http_parser/http_parser.StreamSink.done</a> Future completes with the same values as <a>http_parser/http_parser.StreamSink.close</a>, except\nfor the following case:</p><ul><li>\n<p>The synchronous methods of <a>http_parser/http_parser.EventSink</a> were called, resulting in an\n  error. If there is no active future (like from an addStream call), the\n  <a>http_parser/http_parser.StreamSink.done</a> future will complete with that error</p></li></ul>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"close":{"name":"close","qualifiedName":"http_parser/http_parser.StreamSink.close","comment":"<p>Close the <a>http_parser/http_parser.StreamSink</a>. It'll return the <a>http_parser/http_parser.StreamSink.done</a> Future.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"http_parser/http_parser.StreamSink.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>http_parser/http_parser.StreamSink.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"http_parser/http_parser.StreamSink.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"http_parser/http_parser.StreamSink.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>http_parser/http_parser.StreamSink.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>http_parser/http_parser.StreamSink.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"add":{"name":"add","qualifiedName":"http_parser/http_parser.StreamSink.add","comment":"<p>Create a data event</p>","commentFrom":"","inheritedFrom":"http_parser.EventSink.add","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"event":{"name":"event","optional":false,"named":false,"default":false,"type":[{"outer":"http_parser.EventSink.T","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addError":{"name":"addError","qualifiedName":"http_parser/http_parser.StreamSink.addError","comment":"<p>Create an async error.</p>","commentFrom":"","inheritedFrom":"http_parser.EventSink.addError","static":false,"abstract":true,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"errorEvent":{"name":"errorEvent","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"addStream":{"name":"addStream","qualifiedName":"http_parser/http_parser.StreamSink.addStream","comment":"<p>Consumes the elements of <a>http_parser/http_parser.StreamSink.addStream.stream</a>.</p>\n<p>Listens on <a>http_parser/http_parser.StreamSink.addStream.stream</a> and does something for each event.</p>\n<p>The consumer may stop listening after an error, or it may consume\nall the errors and only stop at a done event.</p>","commentFrom":"","inheritedFrom":"http_parser.StreamConsumer.addStream","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"stream":{"name":"stream","optional":false,"named":false,"default":false,"type":[{"outer":"http_parser/http_parser.Stream","inner":[{"outer":"http_parser.StreamConsumer.S","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"close":{"name":"close","qualifiedName":"http_parser/http_parser.StreamSink.close","comment":"","commentFrom":"","inheritedFrom":"http_parser.StreamConsumer.close","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"http_parser/http_parser.StreamSink.noSuchMethod","comment":"<p><a>http_parser/http_parser.StreamSink.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>http_parser/http_parser.StreamSink.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>http_parser/http_parser.StreamSink.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>http_parser/http_parser.StreamSink.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"http_parser/http_parser.StreamSink.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{"S":{"name":"S","type":"dart.core.Object"}}}