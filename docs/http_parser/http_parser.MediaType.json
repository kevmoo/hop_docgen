{"name":"MediaType","qualifiedName":"http_parser/http_parser.MediaType","comment":"<p>A class representing an HTTP media type, as used in Accept and Content-Type\nheaders.</p>\n<p>This is immutable; new instances can be created based on an old instance by\ncalling <a>http_parser/http_parser.MediaType.change</a>.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"parameters":{"name":"parameters","qualifiedName":"http_parser/http_parser.MediaType.parameters","comment":"<p>The parameters to the media type.</p>\n<p>This map is immutable.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"annotations":[]},"subtype":{"name":"subtype","qualifiedName":"http_parser/http_parser.MediaType.subtype","comment":"<p>The secondary identifier of the MIME type.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]},"type":{"name":"type","qualifiedName":"http_parser/http_parser.MediaType.type","comment":"<p>The primary identifier of the MIME type.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"mimeType":{"name":"mimeType","qualifiedName":"http_parser/http_parser.MediaType.mimeType","comment":"<p>The media type's MIME type.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"http_parser/http_parser.MediaType.MediaType-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"subtype":{"name":"subtype","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"parameters":{"name":"parameters","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"parse":{"name":"parse","qualifiedName":"http_parser/http_parser.MediaType.MediaType-parse","comment":"<p>Parses a media type.</p>\n<p>This will throw a FormatError if the media type is invalid.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_parser/http_parser.MediaType","inner":[]}],"parameters":{"mediaType":{"name":"mediaType","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"change":{"name":"change","qualifiedName":"http_parser/http_parser.MediaType.change","comment":"<p>Returns a copy of this <a>http_parser/http_parser.MediaType</a> with some fields altered.</p>\n<p><a>http_parser/http_parser.MediaType.change.type</a> and <a>http_parser/http_parser.MediaType.change.subtype</a> alter the corresponding fields. <a>http_parser/http_parser.MediaType.change.mimeType</a> is parsed\nand alters both the <a>http_parser/http_parser.MediaType.change.type</a> and <a>http_parser/http_parser.MediaType.change.subtype</a> fields; it cannot be passed along\nwith <a>http_parser/http_parser.MediaType.change.type</a> or <a>http_parser/http_parser.MediaType.change.subtype</a>.</p>\n<p><a>http_parser/http_parser.MediaType.change.parameters</a> overwrites and adds to the corresponding field. If\n<a>http_parser/http_parser.MediaType.change.clearParameters</a> is passed, it replaces the corresponding field entirely\ninstead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"http_parser/http_parser.MediaType","inner":[]}],"parameters":{"type":{"name":"type","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"subtype":{"name":"subtype","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"mimeType":{"name":"mimeType","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"parameters":{"name":"parameters","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"clearParameters":{"name":"clearParameters","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"http_parser/http_parser.MediaType.toString","comment":"<p>Converts the media type to a string.</p>\n<p>This will produce a valid HTTP media type.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"http_parser/http_parser.MediaType.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>http_parser/http_parser.MediaType.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"http_parser/http_parser.MediaType.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"http_parser/http_parser.MediaType.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>http_parser/http_parser.MediaType.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>http_parser/http_parser.MediaType.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"http_parser/http_parser.MediaType.noSuchMethod","comment":"<p><a>http_parser/http_parser.MediaType.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>http_parser/http_parser.MediaType.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>http_parser/http_parser.MediaType.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>http_parser/http_parser.MediaType.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"http_parser/http_parser.MediaType.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}