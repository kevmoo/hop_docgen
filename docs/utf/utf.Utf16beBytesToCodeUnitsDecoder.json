{"name":"Utf16beBytesToCodeUnitsDecoder","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder","comment":"<p>Convert UTF-16BE encoded bytes to utf16 code units by grouping 1-2 bytes\nto produce the code unit (0-(2^16)-1).</p>","isAbstract":false,"superclass":"utf/utf.Utf16BytesToCodeUnitsDecoder","implements":[],"subclass":[],"variables":{},"inheritedVariables":{"utf16EncodedBytesIterator":{"name":"utf16EncodedBytesIterator","qualifiedName":"utf/utf.Utf16BytesToCodeUnitsDecoder.utf16EncodedBytesIterator","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"utf/utf._ListRangeIterator","inner":[]}],"annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","qualifiedName":"utf/utf.Utf16BytesToCodeUnitsDecoder.replacementCodepoint","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.Utf16beBytesToCodeUnitsDecoder-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"utf16EncodedBytes":{"name":"utf16EncodedBytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"stripBom":{"name":"stripBom","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"decode":{"name":"decode","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.decode","comment":"","commentFrom":"utf.Utf16BytesToCodeUnitsDecoder.decode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>utf/utf.Utf16beBytesToCodeUnitsDecoder.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"current":{"name":"current","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.current","comment":"","commentFrom":"","inheritedFrom":"utf.Utf16BytesToCodeUnitsDecoder.current","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"position":{"name":"position","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.position","comment":"","commentFrom":"","inheritedFrom":"utf.Utf16BytesToCodeUnitsDecoder.position","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"remaining":{"name":"remaining","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.remaining","comment":"","commentFrom":"","inheritedFrom":"utf.Utf16BytesToCodeUnitsDecoder.remaining","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>utf/utf.Utf16beBytesToCodeUnitsDecoder.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>utf/utf.Utf16beBytesToCodeUnitsDecoder.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.noSuchMethod","comment":"<p><a>utf/utf.Utf16beBytesToCodeUnitsDecoder.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>utf/utf.Utf16beBytesToCodeUnitsDecoder.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>utf/utf.Utf16beBytesToCodeUnitsDecoder.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>utf/utf.Utf16beBytesToCodeUnitsDecoder.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"moveNext":{"name":"moveNext","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.moveNext","comment":"","commentFrom":"","inheritedFrom":"utf.Utf16BytesToCodeUnitsDecoder.moveNext","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"backup":{"name":"backup","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.backup","comment":"","commentFrom":"","inheritedFrom":"utf.Utf16BytesToCodeUnitsDecoder.backup","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"by":{"name":"by","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"skip":{"name":"skip","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.skip","comment":"","commentFrom":"","inheritedFrom":"utf.Utf16BytesToCodeUnitsDecoder.skip","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"count":{"name":"count","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"1","annotations":[]}},"annotations":[]},"decodeRest":{"name":"decodeRest","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.decodeRest","comment":"<p>Provides a fast way to decode the rest of the source bytes in a single\ncall. This method trades memory for improved speed in that it potentially\nover-allocates the List containing results.</p>","commentFrom":"","inheritedFrom":"utf.Utf16BytesToCodeUnitsDecoder.decodeRest","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"decode":{"name":"decode","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder.decode","comment":"","commentFrom":"","inheritedFrom":"utf.Utf16BytesToCodeUnitsDecoder.decode","static":false,"abstract":true,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}