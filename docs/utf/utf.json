{"name":"utf","qualifiedName":"utf/utf","comment":"<p>Support for encoding and decoding Unicode characters in UTF-8, UTF-16, and\nUTF-32.</p>","variables":{"UNICODE_UTF16_LO_MASK":{"name":"UNICODE_UTF16_LO_MASK","qualifiedName":"utf/utf.UNICODE_UTF16_LO_MASK","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_UTF16_HI_MASK":{"name":"UNICODE_UTF16_HI_MASK","qualifiedName":"utf/utf.UNICODE_UTF16_HI_MASK","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_UTF16_SURROGATE_UNIT_1_BASE":{"name":"UNICODE_UTF16_SURROGATE_UNIT_1_BASE","qualifiedName":"utf/utf.UNICODE_UTF16_SURROGATE_UNIT_1_BASE","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_UTF16_SURROGATE_UNIT_0_BASE":{"name":"UNICODE_UTF16_SURROGATE_UNIT_0_BASE","qualifiedName":"utf/utf.UNICODE_UTF16_SURROGATE_UNIT_0_BASE","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_UTF16_OFFSET":{"name":"UNICODE_UTF16_OFFSET","qualifiedName":"utf/utf.UNICODE_UTF16_OFFSET","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_UTF16_RESERVED_HI":{"name":"UNICODE_UTF16_RESERVED_HI","qualifiedName":"utf/utf.UNICODE_UTF16_RESERVED_HI","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_UTF16_RESERVED_LO":{"name":"UNICODE_UTF16_RESERVED_LO","qualifiedName":"utf/utf.UNICODE_UTF16_RESERVED_LO","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_PLANE_ONE_MAX":{"name":"UNICODE_PLANE_ONE_MAX","qualifiedName":"utf/utf.UNICODE_PLANE_ONE_MAX","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_VALID_RANGE_MAX":{"name":"UNICODE_VALID_RANGE_MAX","qualifiedName":"utf/utf.UNICODE_VALID_RANGE_MAX","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_BYTE_ONE_MASK":{"name":"UNICODE_BYTE_ONE_MASK","qualifiedName":"utf/utf.UNICODE_BYTE_ONE_MASK","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_BYTE_ZERO_MASK":{"name":"UNICODE_BYTE_ZERO_MASK","qualifiedName":"utf/utf.UNICODE_BYTE_ZERO_MASK","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_UTF_BOM_HI":{"name":"UNICODE_UTF_BOM_HI","qualifiedName":"utf/utf.UNICODE_UTF_BOM_HI","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_UTF_BOM_LO":{"name":"UNICODE_UTF_BOM_LO","qualifiedName":"utf/utf.UNICODE_UTF_BOM_LO","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_BOM":{"name":"UNICODE_BOM","qualifiedName":"utf/utf.UNICODE_BOM","comment":"","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]},"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT":{"name":"UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","qualifiedName":"utf/utf.UNICODE_REPLACEMENT_CHARACTER_CODEPOINT","comment":"<p>Invalid codepoints or encodings may be substituted with the value U+fffd.</p>","final":false,"static":false,"constant":true,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{"hasUtf32leBom":{"name":"hasUtf32leBom","qualifiedName":"utf/utf.hasUtf32leBom","comment":"<p>Identifies whether a List of bytes starts (based on offset) with a\nlittle-endian byte-order marker (BOM).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"utf32EncodedBytes":{"name":"utf32EncodedBytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"hasUtf32beBom":{"name":"hasUtf32beBom","qualifiedName":"utf/utf.hasUtf32beBom","comment":"<p>Identifies whether a List of bytes starts (based on offset) with a\nbig-endian byte-order marker (BOM).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"utf32EncodedBytes":{"name":"utf32EncodedBytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"hasUtf32Bom":{"name":"hasUtf32Bom","qualifiedName":"utf/utf.hasUtf32Bom","comment":"<p>Identifies whether a List of bytes starts (based on offset) with a\nbyte-order marker (BOM).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"utf32EncodedBytes":{"name":"utf32EncodedBytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"encodeUtf32le":{"name":"encodeUtf32le","qualifiedName":"utf/utf.encodeUtf32le","comment":"<p>Produce a list of UTF-32LE encoded bytes. By default, this method produces\nUTF-32BE bytes with no BOM.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"writeBOM":{"name":"writeBOM","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"encodeUtf32be":{"name":"encodeUtf32be","qualifiedName":"utf/utf.encodeUtf32be","comment":"<p>Produce a list of UTF-32BE encoded bytes. By default, this method produces\nUTF-32BE bytes with no BOM.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"writeBOM":{"name":"writeBOM","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"encodeUtf32":{"name":"encodeUtf32","qualifiedName":"utf/utf.encodeUtf32","comment":"<p>Produce a list of UTF-32 encoded bytes. This method prefixes the resulting\nbytes with a big-endian byte-order-marker.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"decodeUtf32le":{"name":"decodeUtf32le","qualifiedName":"utf/utf.decodeUtf32le","comment":"<p>Produce a String from a sequence of UTF-32LE encoded bytes. The parameters\nallow an offset into a list of bytes (as int), limiting the length of the\nvalues be decoded and the ability of override the default Unicode\nreplacement character. Set the replacementCharacter to null to throw an\nArgumentError rather than replace the bad value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"stripBom":{"name":"stripBom","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"decodeUtf32be":{"name":"decodeUtf32be","qualifiedName":"utf/utf.decodeUtf32be","comment":"<p>Produce a String from a sequence of UTF-32BE encoded bytes. The parameters\nallow an offset into a list of bytes (as int), limiting the length of the\nvalues be decoded and the ability of override the default Unicode\nreplacement character. Set the replacementCharacter to null to throw an\nArgumentError rather than replace the bad value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"stripBom":{"name":"stripBom","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"decodeUtf32":{"name":"decodeUtf32","qualifiedName":"utf/utf.decodeUtf32","comment":"<p>Produce a String from a sequence of UTF-32 encoded bytes. The parameters\nallow an offset into a list of bytes (as int), limiting the length of the\nvalues be decoded and the ability of override the default Unicode\nreplacement character. Set the replacementCharacter to null to throw an\nArgumentError rather than replace the bad value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"decodeUtf32leAsIterable":{"name":"decodeUtf32leAsIterable","qualifiedName":"utf/utf.decodeUtf32leAsIterable","comment":"<p>Decodes the UTF-32LE bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. This method strips a leading BOM by default,\nbut can be overridden by setting the optional parameter <a>utf/utf.decodeUtf32leAsIterable.stripBom</a> to false.\nSet the replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"utf/utf.IterableUtf32Decoder","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"stripBom":{"name":"stripBom","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"decodeUtf32beAsIterable":{"name":"decodeUtf32beAsIterable","qualifiedName":"utf/utf.decodeUtf32beAsIterable","comment":"<p>Decodes the UTF-32BE bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. This method strips a leading BOM by default,\nbut can be overridden by setting the optional parameter <a>utf/utf.decodeUtf32beAsIterable.stripBom</a> to false.\nSet the replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"utf/utf.IterableUtf32Decoder","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"stripBom":{"name":"stripBom","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"decodeUtf32AsIterable":{"name":"decodeUtf32AsIterable","qualifiedName":"utf/utf.decodeUtf32AsIterable","comment":"<p>Decodes the UTF-32 bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. Determines the byte order from the BOM,\nor uses big-endian as a default. This method always strips a leading BOM.\nSet the replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"utf/utf.IterableUtf32Decoder","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"hasUtf16leBom":{"name":"hasUtf16leBom","qualifiedName":"utf/utf.hasUtf16leBom","comment":"<p>Identifies whether a List of bytes starts (based on offset) with a\nlittle-endian byte-order marker (BOM).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"utf16EncodedBytes":{"name":"utf16EncodedBytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"hasUtf16beBom":{"name":"hasUtf16beBom","qualifiedName":"utf/utf.hasUtf16beBom","comment":"<p>Identifies whether a List of bytes starts (based on offset) with a\nbig-endian byte-order marker (BOM).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"utf16EncodedBytes":{"name":"utf16EncodedBytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"hasUtf16Bom":{"name":"hasUtf16Bom","qualifiedName":"utf/utf.hasUtf16Bom","comment":"<p>Identifies whether a List of bytes starts (based on offset) with a\nbyte-order marker (BOM).</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"utf32EncodedBytes":{"name":"utf32EncodedBytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"encodeUtf16le":{"name":"encodeUtf16le","qualifiedName":"utf/utf.encodeUtf16le","comment":"<p>Produce a list of UTF-16LE encoded bytes. By default, this method produces\nUTF-16LE bytes with no BOM.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"writeBOM":{"name":"writeBOM","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"encodeUtf16be":{"name":"encodeUtf16be","qualifiedName":"utf/utf.encodeUtf16be","comment":"<p>Produce a list of UTF-16BE encoded bytes. By default, this method produces\nUTF-16BE bytes with no BOM.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"writeBOM":{"name":"writeBOM","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"false","annotations":[]}},"annotations":[]},"encodeUtf16":{"name":"encodeUtf16","qualifiedName":"utf/utf.encodeUtf16","comment":"<p>Produce a list of UTF-16 encoded bytes. This method prefixes the resulting\nbytes with a big-endian byte-order-marker.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"decodeUtf16le":{"name":"decodeUtf16le","qualifiedName":"utf/utf.decodeUtf16le","comment":"<p>Produce a String from a sequence of UTF-16LE encoded bytes. This method\nstrips a leading BOM by default, but can be overridden by setting the\noptional parameter <a>utf/utf.decodeUtf16le.stripBom</a> to false. Set the <a>utf/utf.decodeUtf16le.replacementCodepoint</a> to\nnull to throw an ArgumentError rather than replace the bad value.\nThe default value for the <a>utf/utf.decodeUtf16le.replacementCodepoint</a> is U+FFFD.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"stripBom":{"name":"stripBom","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"decodeUtf16be":{"name":"decodeUtf16be","qualifiedName":"utf/utf.decodeUtf16be","comment":"<p>Produce a String from a sequence of UTF-16BE encoded bytes. This method\nstrips a leading BOM by default, but can be overridden by setting the\noptional parameter <a>utf/utf.decodeUtf16be.stripBom</a> to false. Set the <a>utf/utf.decodeUtf16be.replacementCodepoint</a> to\nnull to throw an ArgumentError rather than replace the bad value.\nThe default value for the <a>utf/utf.decodeUtf16be.replacementCodepoint</a> is U+FFFD.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"stripBom":{"name":"stripBom","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"decodeUtf16":{"name":"decodeUtf16","qualifiedName":"utf/utf.decodeUtf16","comment":"<p>Produce a String from a sequence of UTF-16 encoded bytes. This method always\nstrips a leading BOM. Set the <a>utf/utf.decodeUtf16.replacementCodepoint</a> to null to throw  an\nArgumentError rather than replace the bad value. The default\nvalue for the <a>utf/utf.decodeUtf16.replacementCodepoint</a> is U+FFFD.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"decodeUtf16leAsIterable":{"name":"decodeUtf16leAsIterable","qualifiedName":"utf/utf.decodeUtf16leAsIterable","comment":"<p>Decodes the UTF-16LE bytes as an iterable. Thus, the consumer can only\nconvert as much of the input as needed. This method strips a leading BOM by\ndefault, but can be overridden by setting the optional parameter <a>utf/utf.decodeUtf16leAsIterable.stripBom</a>\nto false. Set the <a>utf/utf.decodeUtf16leAsIterable.replacementCodepoint</a> to null to throw an\nArgumentError rather than replace the bad value. The default\nvalue for the <a>utf/utf.decodeUtf16leAsIterable.replacementCodepoint</a> is U+FFFD.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"utf/utf.IterableUtf16Decoder","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"stripBom":{"name":"stripBom","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"decodeUtf16beAsIterable":{"name":"decodeUtf16beAsIterable","qualifiedName":"utf/utf.decodeUtf16beAsIterable","comment":"<p>Decodes the UTF-16BE bytes as an iterable. Thus, the consumer can only\nconvert as much of the input as needed. This method strips a leading BOM by\ndefault, but can be overridden by setting the optional parameter <a>utf/utf.decodeUtf16beAsIterable.stripBom</a>\nto false. Set the <a>utf/utf.decodeUtf16beAsIterable.replacementCodepoint</a> to null to throw an\nArgumentError rather than replace the bad value. The default\nvalue for the <a>utf/utf.decodeUtf16beAsIterable.replacementCodepoint</a> is U+FFFD.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"utf/utf.IterableUtf16Decoder","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"stripBom":{"name":"stripBom","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.bool","inner":[]}],"value":"true","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"decodeUtf16AsIterable":{"name":"decodeUtf16AsIterable","qualifiedName":"utf/utf.decodeUtf16AsIterable","comment":"<p>Decodes the UTF-16 bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. Determines the byte order from the BOM,\nor uses big-endian as a default. This method always strips a leading BOM.\nSet the <a>utf/utf.decodeUtf16AsIterable.replacementCodepoint</a> to null to throw an ArgumentError\nrather than replace the bad value. The default value for\n<a>utf/utf.decodeUtf16AsIterable.replacementCodepoint</a> is U+FFFD.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"utf/utf.IterableUtf16Decoder","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"utf8ToCodepoints":{"name":"utf8ToCodepoints","qualifiedName":"utf/utf.utf8ToCodepoints","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"utf8EncodedBytes":{"name":"utf8EncodedBytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"codepointsToUtf8":{"name":"codepointsToUtf8","qualifiedName":"utf/utf.codepointsToUtf8","comment":"<p>Encode code points as UTF-8 code units.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"codepoints":{"name":"codepoints","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"encodeUtf8":{"name":"encodeUtf8","qualifiedName":"utf/utf.encodeUtf8","comment":"<p>Produce a sequence of UTF-8 encoded bytes from the provided string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"decodeUtf8":{"name":"decodeUtf8","qualifiedName":"utf/utf.decodeUtf8","comment":"<p>Produce a String from a List of UTF-8 encoded bytes. The parameters\ncan set an offset into a list of bytes (as int), limit the length of the\nvalues to be decoded, and override the default Unicode replacement character.\nSet the replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"decodeUtf8AsIterable":{"name":"decodeUtf8AsIterable","qualifiedName":"utf/utf.decodeUtf8AsIterable","comment":"<p>Decodes the UTF-8 bytes as an iterable. Thus, the consumer can only convert\nas much of the input as needed. Set the replacementCharacter to null to\nthrow an ArgumentError rather than replace the bad value.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"utf/utf.IterableUtf8Decoder","inner":[]}],"parameters":{"bytes":{"name":"bytes","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]},"offset":{"name":"offset","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"0","annotations":[]},"length":{"name":"length","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":"null","annotations":[]},"replacementCodepoint":{"name":"replacementCodepoint","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.int","inner":[]}],"value":"65533","annotations":[]}},"annotations":[]},"codepointsToString":{"name":"codepointsToString","qualifiedName":"utf/utf.codepointsToString","comment":"<p>Generate a string from the provided Unicode codepoints.</p>\n<p><em>Deprecated</em> Use <a>utf/dart-core.String.String-fromCharCodes</a> instead.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{"codepoints":{"name":"codepoints","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"stringToCodepoints":{"name":"stringToCodepoints","qualifiedName":"utf/utf.stringToCodepoints","comment":"<p>Provide a list of Unicode codepoints for a given string.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{"str":{"name":"str","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"Utf32leBytesDecoder","qualifiedName":"utf/utf.Utf32leBytesDecoder","preview":"<p>Convert UTF-32BE encoded bytes to codepoints by grouping 4 bytes\nto produce the unicode codepoint.</p>"},{"name":"Utf32beBytesDecoder","qualifiedName":"utf/utf.Utf32beBytesDecoder","preview":"<p>Convert UTF-32BE encoded bytes to codepoints by grouping 4 bytes\nto produce the unicode codepoint.</p>"},{"name":"Utf32BytesDecoder","qualifiedName":"utf/utf.Utf32BytesDecoder","preview":"<p>Abstrace parent class converts encoded bytes to codepoints.</p>"},{"name":"IterableUtf32Decoder","qualifiedName":"utf/utf.IterableUtf32Decoder","preview":"<p>Return type of <a>utf/utf.decodeUtf32AsIterable</a> and variants. The Iterable type\nprovides an iterator on demand and the iterator will only translate bytes\nas requested by the user of the iterator. (Note: results are not cached.)</p>"},{"name":"Utf16leBytesToCodeUnitsDecoder","qualifiedName":"utf/utf.Utf16leBytesToCodeUnitsDecoder","preview":"<p>Convert UTF-16LE encoded bytes to utf16 code units by grouping 1-2 bytes\nto produce the code unit (0-(2^16)-1).</p>"},{"name":"Utf16beBytesToCodeUnitsDecoder","qualifiedName":"utf/utf.Utf16beBytesToCodeUnitsDecoder","preview":"<p>Convert UTF-16BE encoded bytes to utf16 code units by grouping 1-2 bytes\nto produce the code unit (0-(2^16)-1).</p>"},{"name":"Utf16BytesToCodeUnitsDecoder","qualifiedName":"utf/utf.Utf16BytesToCodeUnitsDecoder","preview":"<p>Convert UTF-16 encoded bytes to UTF-16 code units by grouping 1-2 bytes\nto produce the code unit (0-(2^16)-1). Relies on BOM to determine\nendian-ness, and defaults to BE.</p>"},{"name":"IterableUtf16Decoder","qualifiedName":"utf/utf.IterableUtf16Decoder","preview":"<p>Return type of <a>utf/utf.decodeUtf16AsIterable</a> and variants. The Iterable type\nprovides an iterator on demand and the iterator will only translate bytes\nas requested by the user of the iterator. (Note: results are not cached.)</p>"},{"name":"Utf8Decoder","qualifiedName":"utf/utf.Utf8Decoder","preview":"<p>Provides an iterator of Unicode codepoints from UTF-8 encoded bytes. The\nparameters can set an offset into a list of bytes (as int), limit the length\nof the values to be decoded, and override the default Unicode replacement\ncharacter. Set the replacementCharacter to null to throw an\nArgumentError rather than replace the bad value. The return value\nfrom this method can be used as an Iterable (e.g. in a for-loop).</p>"},{"name":"IterableUtf8Decoder","qualifiedName":"utf/utf.IterableUtf8Decoder","preview":"<p>Return type of <a>utf/utf.decodeUtf8AsIterable</a> and variants. The Iterable type\nprovides an iterator on demand and the iterator will only translate bytes\nas requested by the user of the iterator. (Note: results are not cached.)</p>"},{"name":"Utf8EncoderTransformer","qualifiedName":"utf/utf.Utf8EncoderTransformer","preview":"<p>StringTransformer that UTF-8 encodes a stream of strings.</p>"},{"name":"Utf8DecoderTransformer","qualifiedName":"utf/utf.Utf8DecoderTransformer","preview":"<p>StringTransformer that decodes a stream of UTF-8 encoded bytes.</p>"},{"name":"Utf16CodeUnitDecoder","qualifiedName":"utf/utf.Utf16CodeUnitDecoder","preview":"<p>An Iterator&lt;int> of codepoints built on an Iterator of UTF-16 code units.\nThe parameters can override the default Unicode replacement character. Set\nthe replacementCharacter to null to throw an ArgumentError\nrather than replace the bad value.</p>"}],"typedef":{"Utf32BytesDecoderProvider":{"name":"Utf32BytesDecoderProvider","qualifiedName":"utf/utf.Utf32BytesDecoderProvider","comment":"","return":"utf.Utf32BytesDecoder","parameters":{},"annotations":[],"generics":{}}},"error":[]},"packageName":"utf","packageIntro":"<p>A Unicode manipulation library for Dart.</p>\n<p>The utf package provides common operations for manipulating Unicode sequences.\nIn its initial form it is a copy of the <code>dart:utf</code> library before that was\ndeprecated.</p>"}