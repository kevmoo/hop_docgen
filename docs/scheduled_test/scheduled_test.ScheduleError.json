{"name":"ScheduleError","qualifiedName":"scheduled_test/scheduled_test.ScheduleError","comment":"<p>A wrapper for errors that occur during a scheduled test.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"error":{"name":"error","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.error","comment":"<p>The wrapped error.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dynamic","inner":[]}],"annotations":[]},"stackTrace":{"name":"stackTrace","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.stackTrace","comment":"<p>The stack trace that was attached to the error. Can be <code>null</code>.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"annotations":[]},"schedule":{"name":"schedule","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.schedule","comment":"<p>The schedule during which this error occurred.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"scheduled_test/scheduled_test.Schedule","inner":[]}],"annotations":[]},"task":{"name":"task","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.task","comment":"<p>The task that was running when this error occurred. This may be <code>null</code> if\nthere was no such task.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"scheduled_test/scheduled_test.Task","inner":[]}],"annotations":[]},"queue":{"name":"queue","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.queue","comment":"<p>The task queue that was running when this error occured. This may be\n<code>null</code> if there was no such queue.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"scheduled_test/scheduled_test.TaskQueue","inner":[]}],"annotations":[]},"pendingCallbacks":{"name":"pendingCallbacks","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.pendingCallbacks","comment":"<p>The descriptions of out-of-band callbacks that were pending when this\nerror occurred.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"scheduled_test/scheduled_test.PendingCallback","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>scheduled_test/scheduled_test.ScheduleError.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"from":{"name":"from","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.ScheduleError-from","comment":"<p>Creates a new <a>scheduled_test/scheduled_test.ScheduleError</a> wrapping <a>scheduled_test/scheduled_test.ScheduleError.ScheduleError-from.error</a>. The metadata in\n<a>scheduled_test/scheduled_test.ScheduleError</a>s will be preserved.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test.ScheduleError","inner":[]}],"parameters":{"schedule":{"name":"schedule","optional":false,"named":false,"default":false,"type":[{"outer":"scheduled_test/scheduled_test.Schedule","inner":[]}],"value":"null","annotations":[]},"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"":{"name":"","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.ScheduleError-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"schedule":{"name":"schedule","optional":false,"named":false,"default":false,"type":[{"outer":"scheduled_test/scheduled_test.Schedule","inner":[]}],"value":"null","annotations":[]},"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"stackTrace":{"name":"stackTrace","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.StackTrace","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{"==":{"name":"==","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>scheduled_test/scheduled_test.ScheduleError.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>scheduled_test/scheduled_test.ScheduleError.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>scheduled_test/scheduled_test.ScheduleError.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>scheduled_test/scheduled_test.ScheduleError.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>scheduled_test/scheduled_test.ScheduleError.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"scheduled_test/scheduled_test.ScheduleError.noSuchMethod","comment":"<p><a>scheduled_test/scheduled_test.ScheduleError.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>scheduled_test/scheduled_test.ScheduleError.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>scheduled_test/scheduled_test.ScheduleError.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>scheduled_test/scheduled_test.ScheduleError.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}