{"name":"ScheduledStream","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream","comment":"<p>A wrapper for streams that supports a pull-based model of retrieving values\nas well as a set of <a>scheduled_test/scheduled_test-scheduled_stream.StreamMatcher</a>s for testing the values emitted by the\nstream.</p>\n<p>The only method on <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream</a> that's actually scheduled is <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.expect</a>,\nwhich is the method that users testing streaming code are most likely to\nwant to use.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"emittedValues":{"name":"emittedValues","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.emittedValues","comment":"<p>All values emitted by this stream so far.</p>\n<p>This does not include values emitted by the underlying stream but not yet\nemitted through <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.next</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.T","inner":[]}]}],"parameters":{},"annotations":[]},"allValues":{"name":"allValues","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.allValues","comment":"<p>All values emitted by the underlying stream.</p>\n<p>This is intended primarily for providing debugging information.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.T","inner":[]}]}],"parameters":{},"annotations":[]},"hasNext":{"name":"hasNext","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.hasNext","comment":"<p>Returns a Future that completes to a boolean indicating whether the stream\nhas additional values or not.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.bool","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.ScheduledStream-","comment":"<p>Creates a new scheduled stream wrapping stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_stream":{"name":"_stream","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"operators":{},"methods":{"expect":{"name":"expect","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.expect","comment":"<p>Enqueue an expectation that <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.expect.streamMatcher</a> will match the value(s)\nemitted by the stream at this point in the schedule.</p>\n<p>If <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.expect.streamMatcher</a> is a <a>scheduled_test/scheduled_test-scheduled_stream.StreamMatcher</a>, it will match the stream as a\nwhole. If it's a <a>scheduled_test/unittest-matcher.Matcher</a> or another object, it will match the next value\nemitted by the stream (as though it were a <a>scheduled_test/scheduled_test-scheduled_stream.nextValue</a> matcher).</p>\n<p>This call is scheduled; the expectation won't be added until the schedule\nreaches this point, and the schedule won't continue until the matcher has\nmatched the stream.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"streamMatcher":{"name":"streamMatcher","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"next":{"name":"next","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.next","comment":"<p>Returns a Future that completes to the next value emitted by this stream.</p>\n<p>It's a <a>dart-core.StateError</a> to call <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.next</a> when another call's Future has not yet\ncompleted, or when the stream has no more values. The latter can be\nchecked using <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.hasNext</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.T","inner":[]}]}],"parameters":{},"annotations":[]},"fork":{"name":"fork","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.fork","comment":"<p>Returns a fork of this stream.</p>\n<p>The fork begins at the same point this is at. Values can be read from it\nwithout consuming values in this. If this is closed, the fork will be\nclosed at whatever point it's currently at.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream","inner":[{"outer":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.T","inner":[]}]}],"parameters":{},"annotations":[]},"close":{"name":"close","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.close","comment":"<p>Closes this stream.</p>\n<p>This cancels the subscription to the underlying stream and acts as though\nthis was closed immediately after the current position, regardless of\nwhether the underlying stream has emitted additional events.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.noSuchMethod","comment":"<p><a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>scheduled_test/scheduled_test-scheduled_stream.ScheduledStream.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.Object"}}}