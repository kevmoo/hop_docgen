{"name":"ScheduledServer","qualifiedName":"scheduled_test/scheduled_test-scheduled_server.ScheduledServer","comment":"<p>A class representing an HTTP server that's scheduled to run in the course of\nthe test. This class allows the server's request handling to be scheduled\nsynchronously.</p>\n<p>The server expects requests to be received in the order <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.handle</a> is called,\nand expects that no additional requests will be received.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{"description":{"name":"description","qualifiedName":"scheduled_test/scheduled_test-scheduled_server.ScheduledServer.description","comment":"<p>The description of the server.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.String","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"port":{"name":"port","qualifiedName":"scheduled_test/scheduled_test-scheduled_server.ScheduledServer.port","comment":"<p>The port on which the server is listening.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.int","inner":[]}]}],"parameters":{},"annotations":[]},"url":{"name":"url","qualifiedName":"scheduled_test/scheduled_test-scheduled_server.ScheduledServer.url","comment":"<p>The base URL of the server, including its port.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.Uri","inner":[]}]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"scheduled_test/scheduled_test-scheduled_server.ScheduledServer.ScheduledServer-","comment":"<p>Creates a new server listening on an automatically-allocated port on\n127.0.0.1. <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.ScheduledServer-.description</a> is used to refer to the server in debugging\nmessages.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test-scheduled_server.ScheduledServer","inner":[]}],"parameters":{"description":{"name":"description","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"handle":{"name":"handle","qualifiedName":"scheduled_test/scheduled_test-scheduled_server.ScheduledServer.handle","comment":"<p>Schedules handler to handle a request to the server with <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.handle.method</a> and\n<a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.handle.path</a>. The schedule will wait until an HTTP request is received. If that\nrequest doesn't have the expected <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.handle.method</a> and <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.handle.path</a>, it will fail.\nOtherwise, it will run <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.handle.fn</a>. If <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.handle.fn</a> returns a <a>scheduled_test/dart-async.Future</a>, the schedule will\nwait until that <a>scheduled_test/dart-async.Future</a> completes.</p>\n<p>The request must be received at the point in the schedule at which\n<a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.handle</a> was called, or in the task immediately prior (to allow for\nnon-deterministic asynchronicity). Otherwise, an error will be thrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"method":{"name":"method","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"path":{"name":"path","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":null,"annotations":[]},"fn":{"name":"fn","optional":false,"named":false,"default":false,"type":[{"outer":"shelf-typedef.Handler","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"scheduled_test/scheduled_test-scheduled_server.ScheduledServer.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"scheduled_test/scheduled_test-scheduled_server.ScheduledServer.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"scheduled_test/scheduled_test-scheduled_server.ScheduledServer.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"scheduled_test/scheduled_test-scheduled_server.ScheduledServer.noSuchMethod","comment":"<p><a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>scheduled_test/scheduled_test-scheduled_server.ScheduledServer.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"scheduled_test/scheduled_test-scheduled_server.ScheduledServer.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}