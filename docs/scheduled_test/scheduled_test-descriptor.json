{"name":"scheduled_test-descriptor","qualifiedName":"scheduled_test/scheduled_test-descriptor","comment":"<p>A library for declaratively describing a filesystem structure, usually for\nthe purpose of creating or validating it as part of a scheduled test.</p>\n<p>You can use <a>scheduled_test/scheduled_test-descriptor.dir</a> and <a>scheduled_test/scheduled_test-descriptor.file</a> to define a filesystem structure. Then, you can\ncall <a>scheduled_test/scheduled_test-descriptor.Descriptor.create</a> to schedule a task that will create that structure\non the physical filesystem, or <a>scheduled_test/scheduled_test-descriptor.Descriptor.validate</a> to schedule an\nassertion that that structure exists. For example:</p>\n<pre><code>import 'dart:io';\n\nimport 'package:scheduled_test/descriptor.dart' as d;\nimport 'package:scheduled_test/scheduled_test.dart';\n\nvoid main() {\n  test('Directory.rename', () {\n    d.dir('parent', [\n      d.file('sibling', 'sibling-contents'),\n      d.dir('old-name', [\n        d.file('child', 'child-contents')\n      ])\n    ]).create();\n\n    schedule(() =&gt;\n        new Directory('parent/old-name').rename('parent/new-name'));\n\n    d.dir('parent', [\n      d.file('sibling', 'sibling-contents'),\n      d.dir('new-name', [\n        d.file('child', 'child-contents')\n      ])\n    ]).validate();\n  });\n}\n</code></pre>\n<p>Usually you don't want your tests cluttering up your working directory with\nfake filesystem entities. You can set <a>scheduled_test/scheduled_test-descriptor.defaultRoot</a> to configure where\nfilesystem descriptors are rooted on the physical filesystem. For example,\nto create a temporary directory for each test:</p>\n<pre><code>import 'package:scheduled_test/descriptor.dart' as d;\nimport 'package:scheduled_test/scheduled_test.dart';\n\nvoid main() {\n  setUp(() {\n    var tempDir;\n    schedule(() {\n      return Directory.systemTemp\n                      .createTemp('my_temp_dir_')\n                      .then((dir) {\n        tempDir = dir;\n        d.defaultRoot = tempDir.path;\n      });\n    });\n\n    currentSchedule.onComplete.schedule(() {\n      d.defaultRoot = null;\n      return tempDir.delete(recursive: true);\n    });\n  });\n\n  // ...\n}\n</code></pre>","variables":{},"functions":{"setters":{"defaultRoot=":{"name":"defaultRoot=","qualifiedName":"scheduled_test/scheduled_test-descriptor.defaultRoot=","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"value":{"name":"value","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"defaultRoot":{"name":"defaultRoot","qualifiedName":"scheduled_test/scheduled_test-descriptor.defaultRoot","comment":"<p>The root path for descriptors. Top-level descriptors will be created and\nvalidated at this path. Defaults to the current working directory.</p>\n<p>If this is set to <code>null</code>, it will reset itself to the current working\ndirectory.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"dirPattern":{"name":"dirPattern","qualifiedName":"scheduled_test/scheduled_test-descriptor.dirPattern","comment":"<p>A convenience method for creating a <a>scheduled_test/scheduled_test-descriptor.PatternDescriptor</a> descriptor that\nconstructs a <a>scheduled_test/scheduled_test-descriptor.DirectoryDescriptor</a> descriptor.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test-descriptor.PatternDescriptor","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Pattern","inner":[]}],"value":"null","annotations":[]},"contents":{"name":"contents","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"scheduled_test/scheduled_test-descriptor.Descriptor","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"filePattern":{"name":"filePattern","qualifiedName":"scheduled_test/scheduled_test-descriptor.filePattern","comment":"<p>A convenience method for creating a <a>scheduled_test/scheduled_test-descriptor.PatternDescriptor</a> descriptor that\nconstructs a <a>scheduled_test/scheduled_test-descriptor.FileDescriptor</a> descriptor.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test-descriptor.PatternDescriptor","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Pattern","inner":[]}],"value":"null","annotations":[]},"contents":{"name":"contents","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"\")","annotations":[]}},"annotations":[]},"pattern":{"name":"pattern","qualifiedName":"scheduled_test/scheduled_test-descriptor.pattern","comment":"<p>Creates a new <a>scheduled_test/scheduled_test-descriptor.PatternDescriptor</a> descriptor that asserts than an entry with\na name matching <a>scheduled_test/scheduled_test-descriptor.pattern</a> exists, and matches the <a>scheduled_test/scheduled_test-descriptor.Descriptor</a> returned\nby <a>scheduled_test/scheduled_test-descriptor.pattern.fn</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test-descriptor.PatternDescriptor","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Pattern","inner":[]}],"value":"null","annotations":[]},"fn":{"name":"fn","optional":false,"named":false,"default":false,"type":[{"outer":"scheduled_test/scheduled_test-descriptor.EntryCreator","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"nothing":{"name":"nothing","qualifiedName":"scheduled_test/scheduled_test-descriptor.nothing","comment":"<p>Creates a new <a>scheduled_test/scheduled_test-descriptor.NothingDescriptor</a> descriptor that asserts that no entry\nnamed <a>scheduled_test/scheduled_test-descriptor.nothing.name</a> exists.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test-descriptor.NothingDescriptor","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"async":{"name":"async","qualifiedName":"scheduled_test/scheduled_test-descriptor.async","comment":"<p>Creates a new descriptor wrapping a <a>scheduled_test/dart-async.Future</a>. This descriptor forwards all\nasynchronous operations to the result of <a>scheduled_test/scheduled_test-descriptor.async.future</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test-descriptor.AsyncDescriptor","inner":[]}],"parameters":{"future":{"name":"future","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Future","inner":[{"outer":"scheduled_test/scheduled_test-descriptor.Descriptor","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"dir":{"name":"dir","qualifiedName":"scheduled_test/scheduled_test-descriptor.dir","comment":"<p>Creates a new <a>scheduled_test/scheduled_test-descriptor.DirectoryDescriptor</a> descriptor with <a>scheduled_test/scheduled_test-descriptor.dir.name</a> and <a>scheduled_test/scheduled_test-descriptor.dir.contents</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test-descriptor.DirectoryDescriptor","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"contents":{"name":"contents","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"scheduled_test/scheduled_test-descriptor.Descriptor","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"binaryMatcherFile":{"name":"binaryMatcherFile","qualifiedName":"scheduled_test/scheduled_test-descriptor.binaryMatcherFile","comment":"<p>Creates a new binary <a>scheduled_test/scheduled_test-descriptor.FileDescriptor</a> with <a>scheduled_test/scheduled_test-descriptor.binaryMatcherFile.name</a> that matches its binary\ncontents against <a>scheduled_test/scheduled_test-descriptor.binaryMatcherFile.matcher</a>. If the file is created, it's considered to be\nempty.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test-descriptor.FileDescriptor","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"matcher":{"name":"matcher","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"matcherFile":{"name":"matcherFile","qualifiedName":"scheduled_test/scheduled_test-descriptor.matcherFile","comment":"<p>Creates a new text <a>scheduled_test/scheduled_test-descriptor.FileDescriptor</a> with <a>scheduled_test/scheduled_test-descriptor.matcherFile.name</a> that matches its String\ncontents against <a>scheduled_test/scheduled_test-descriptor.matcherFile.matcher</a>. If the file is created, it's considered to be\nempty.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test-descriptor.FileDescriptor","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"matcher":{"name":"matcher","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"binaryFile":{"name":"binaryFile","qualifiedName":"scheduled_test/scheduled_test-descriptor.binaryFile","comment":"<p>Creates a new binary <a>scheduled_test/scheduled_test-descriptor.FileDescriptor</a> descriptor with <a>scheduled_test/scheduled_test-descriptor.binaryFile.name</a> and <a>scheduled_test/scheduled_test-descriptor.binaryFile.contents</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test-descriptor.FileDescriptor","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"contents":{"name":"contents","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"file":{"name":"file","qualifiedName":"scheduled_test/scheduled_test-descriptor.file","comment":"<p>Creates a new text <a>scheduled_test/scheduled_test-descriptor.FileDescriptor</a> with <a>scheduled_test/scheduled_test-descriptor.file.name</a> and <a>scheduled_test/scheduled_test-descriptor.file.contents</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test-descriptor.FileDescriptor","inner":[]}],"parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]},"contents":{"name":"contents","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.String","inner":[]}],"value":"StringConstant(\"\")","annotations":[]}},"annotations":[]}}},"classes":{"class":[{"name":"AsyncDescriptor","qualifiedName":"scheduled_test/scheduled_test-descriptor.AsyncDescriptor","preview":"<p>A descriptor that wraps a Future&lt;Descriptor> and forwards all asynchronous\noperations to the result of the future. It's designed for use when the full\nfilesystem description isn't known when initializing the schedule.</p>"},{"name":"ReadableDescriptor","qualifiedName":"scheduled_test/scheduled_test-descriptor.ReadableDescriptor","preview":"<p>An interface for descriptors whose contents can be read.</p>"},{"name":"LoadableDescriptor","qualifiedName":"scheduled_test/scheduled_test-descriptor.LoadableDescriptor","preview":"<p>An interface for descriptors that can load the contents of sub-descriptors.</p>"},{"name":"Descriptor","qualifiedName":"scheduled_test/scheduled_test-descriptor.Descriptor","preview":"<p>The base class for various declarative descriptions of filesystem entries.\nAll asynchronous operations on descriptors are <a>scheduled_test/scheduled_test.schedule</a>d unless otherwise\nnoted.</p>"},{"name":"DirectoryDescriptor","qualifiedName":"scheduled_test/scheduled_test-descriptor.DirectoryDescriptor","preview":"<p>A descriptor describing a directory containing multiple files.</p>"},{"name":"FileDescriptor","qualifiedName":"scheduled_test/scheduled_test-descriptor.FileDescriptor","preview":"<p>A descriptor describing a single file.</p>"},{"name":"NothingDescriptor","qualifiedName":"scheduled_test/scheduled_test-descriptor.NothingDescriptor","preview":"<p>A descriptor that validates that no file exists with the given name.\nCreating this descriptor is a no-op and loading from it is invalid.</p>"},{"name":"PatternDescriptor","qualifiedName":"scheduled_test/scheduled_test-descriptor.PatternDescriptor","preview":"<p>A descriptor that matches filesystem entities by <a>scheduled_test/dart-core.Pattern</a> rather than\nby <a>scheduled_test/dart-core.String</a>. It's used only for validation.</p>"}],"typedef":{"EntryCreator":{"name":"EntryCreator","qualifiedName":"scheduled_test/scheduled_test-descriptor.EntryCreator","comment":"<p>A function that takes a name for a [Descriptor] and returns a [Descriptor].\nThis is used for [PatternDescriptor]s, where the name isn't known\nahead-of-time.</p>","return":"scheduled_test-descriptor.Descriptor","parameters":{"name":{"name":"name","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[],"generics":{},"preview":"<p>A function that takes a name for a [Descriptor] and returns a [Descriptor].\nThis is used for [PatternDescriptor]s, where the name isn't known\nahead-of-time.</p>"}},"error":[]},"packageName":"scheduled_test","packageIntro":""}