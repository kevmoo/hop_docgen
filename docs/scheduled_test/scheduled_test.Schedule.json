{"name":"Schedule","qualifiedName":"scheduled_test/scheduled_test.Schedule","comment":"<p>The schedule of tasks to run for a single test. This has three separate task\nqueues: <a>scheduled_test/scheduled_test.Schedule.tasks</a>, <a>scheduled_test/scheduled_test.Schedule.onComplete</a>, and <a>scheduled_test/scheduled_test.Schedule.onException</a>. It also provides\nvisibility into the current state of the schedule.</p>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{"timeout=":{"name":"timeout=","qualifiedName":"scheduled_test/scheduled_test.Schedule.timeout=","comment":"","commentFrom":"scheduled_test.Schedule.timeout=","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"duration":{"name":"duration","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Duration","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"getters":{"tasks":{"name":"tasks","qualifiedName":"scheduled_test/scheduled_test.Schedule.tasks","comment":"<p>The main task queue for the schedule. These tasks are run before the other\nqueues and generally constitute the main test body.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test.TaskQueue","inner":[]}],"parameters":{},"annotations":[]},"onException":{"name":"onException","qualifiedName":"scheduled_test/scheduled_test.Schedule.onException","comment":"<p>The queue of tasks to run if an error is caught while running <a>scheduled_test/scheduled_test.Schedule.tasks</a>. The\nerror will be available in <a>scheduled_test/scheduled_test.Schedule.errors</a>. These tasks won't be run if no error\noccurs. Note that expectation failures count as errors.</p>\n<p>This queue runs before <a>scheduled_test/scheduled_test.Schedule.onComplete</a>, and errors in <a>scheduled_test/scheduled_test.Schedule.onComplete</a> will not\ncause this queue to be run.</p>\n<p>If an error occurs in a task in this queue, all further tasks will be\nskipped.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test.TaskQueue","inner":[]}],"parameters":{},"annotations":[]},"onComplete":{"name":"onComplete","qualifiedName":"scheduled_test/scheduled_test.Schedule.onComplete","comment":"<p>The queue of tasks to run after <a>scheduled_test/scheduled_test.Schedule.tasks</a> and possibly <a>scheduled_test/scheduled_test.Schedule.onException</a> have\nrun. This queue will run whether or not an error occurred. If one did, it\nwill be available in <a>scheduled_test/scheduled_test.Schedule.errors</a>. Note that expectation failures count as\nerrors.</p>\n<p>This queue runs after <a>scheduled_test/scheduled_test.Schedule.onException</a>. If an error occurs while running\n<a>scheduled_test/scheduled_test.Schedule.onException</a>, that error will be available in <a>scheduled_test/scheduled_test.Schedule.errors</a> after the original\nerror.</p>\n<p>If an error occurs in a task in this queue, all further tasks will be\nskipped.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test.TaskQueue","inner":[]}],"parameters":{},"annotations":[]},"currentTask":{"name":"currentTask","qualifiedName":"scheduled_test/scheduled_test.Schedule.currentTask","comment":"<p>Returns the <a>scheduled_test/scheduled_test.Task</a> that's currently executing, or <code>null</code> if there is no\nsuch task. This will be <code>null</code> both before the schedule starts running and\nafter it's finished.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test.Task","inner":[]}],"parameters":{},"annotations":[]},"state":{"name":"state","qualifiedName":"scheduled_test/scheduled_test.Schedule.state","comment":"<p>The current state of the schedule.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test.ScheduleState","inner":[]}],"parameters":{},"annotations":[]},"errors":{"name":"errors","qualifiedName":"scheduled_test/scheduled_test.Schedule.errors","comment":"<p>Errors thrown by the task queues.</p>\n<p>When running tasks in <a>scheduled_test/scheduled_test.Schedule.tasks</a>, this will always be empty. If an error\noccurs in <a>scheduled_test/scheduled_test.Schedule.tasks</a>, it will be added to this list and then <a>scheduled_test/scheduled_test.Schedule.onException</a>\nwill be run. If an error occurs there as well, it will be added to this\nlist and <a>scheduled_test/scheduled_test.Schedule.onComplete</a> will be run. Errors thrown during <a>scheduled_test/scheduled_test.Schedule.onComplete</a> will\nalso be added to this list, although no scheduled tasks will be run\nafterwards.</p>\n<p>Any out-of-band callbacks that throw errors will also have those errors\nadded to this list.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"scheduled_test/scheduled_test.ScheduleError","inner":[]}]}],"parameters":{},"annotations":[]},"debugInfo":{"name":"debugInfo","qualifiedName":"scheduled_test/scheduled_test.Schedule.debugInfo","comment":"<p>Additional debugging info registered via <a>scheduled_test/scheduled_test.Schedule.addDebugInfo</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{},"annotations":[]},"currentQueue":{"name":"currentQueue","qualifiedName":"scheduled_test/scheduled_test.Schedule.currentQueue","comment":"<p>The task queue that's currently being run. One of <a>scheduled_test/scheduled_test.Schedule.tasks</a>, <a>scheduled_test/scheduled_test.Schedule.onException</a>,\nor <a>scheduled_test/scheduled_test.Schedule.onComplete</a>. This starts as <a>scheduled_test/scheduled_test.Schedule.tasks</a>, and can only be <code>null</code> after the\nschedule is done.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"scheduled_test/scheduled_test.TaskQueue","inner":[]}],"parameters":{},"annotations":[]},"timeout":{"name":"timeout","qualifiedName":"scheduled_test/scheduled_test.Schedule.timeout","comment":"<p>The time to wait before terminating a task queue for inactivity. Defaults\nto 5 seconds. This can be set to <code>null</code> to disable timeouts entirely. Note\nthat the timeout is the maximum time a task is allowed between\ninteractions with the schedule, <em>not</em> the maximum time an entire test is\nallowed. See also <a>scheduled_test/scheduled_test.Schedule.heartbeat</a>.</p>\n<p>If a task queue times out, an error will be raised that can be handled as\nusual in the <a>scheduled_test/scheduled_test.Schedule.onException</a> and <a>scheduled_test/scheduled_test.Schedule.onComplete</a> queues. If <a>scheduled_test/scheduled_test.Schedule.onException</a> times\nout, that can only be handled in <a>scheduled_test/scheduled_test.Schedule.onComplete</a>; if <a>scheduled_test/scheduled_test.Schedule.onComplete</a> times out,\nthat cannot be handled.</p>\n<p>If a task times out and then later completes with an error, that error\ncannot be handled. The user will still be notified of it.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Duration","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"scheduled_test/scheduled_test.Schedule.Schedule-","comment":"<p>Creates a new schedule with empty task queues.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[]}},"operators":{},"methods":{"run":{"name":"run","qualifiedName":"scheduled_test/scheduled_test.Schedule.run","comment":"<p>Sets up this schedule by running <a>scheduled_test/scheduled_test.Schedule.run.setUp</a>, then runs all the task queues in\norder. Any errors in <a>scheduled_test/scheduled_test.Schedule.run.setUp</a> will cause <a>scheduled_test/scheduled_test.Schedule.onException</a> to run.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"setUp":{"name":"setUp","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"abort":{"name":"abort","qualifiedName":"scheduled_test/scheduled_test.Schedule.abort","comment":"<p>Stop the current <a>scheduled_test/scheduled_test.TaskQueue</a> after the current task and any out-of-band\ntasks stop executing. If this is called before this has started running,\nno tasks in the <a>scheduled_test/scheduled_test.Schedule.tasks</a> queue will be run.</p>\n<p>This won't cause an error, but any errors that are otherwise signaled will\nstill cause the test to fail.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]},"signalError":{"name":"signalError","qualifiedName":"scheduled_test/scheduled_test.Schedule.signalError","comment":"<p>Signals that an out-of-band error has occurred. Using <a>scheduled_test/scheduled_test.Schedule.wrapAsync</a> along\nwith <code>throw</code> is usually preferable to calling this directly.</p>\n<p>The metadata in <a>scheduled_test/scheduled_test.ScheduleError</a>s will be preserved.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"error":{"name":"error","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]},"stackTrace":{"name":"stackTrace","optional":true,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"addDebugInfo":{"name":"addDebugInfo","qualifiedName":"scheduled_test/scheduled_test.Schedule.addDebugInfo","comment":"<p>Adds <a>scheduled_test/scheduled_test.Schedule.addDebugInfo.info</a> to the debugging output that will be printed if the test\nfails. Unlike <a>scheduled_test/scheduled_test.Schedule.signalError</a>, this won't cause the test to fail, nor will\nit short-circuit the current <a>scheduled_test/scheduled_test.TaskQueue</a>; it's just useful for providing\nadditional information that may not fit cleanly into an existing error.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"info":{"name":"info","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"wrapAsync":{"name":"wrapAsync","qualifiedName":"scheduled_test/scheduled_test.Schedule.wrapAsync","comment":"<p>Returns a function wrapping <a>scheduled_test/scheduled_test.Schedule.wrapAsync.fn</a> that pipes any errors into the schedule\nchain. This will also block the current task queue from completing until\nthe returned function has been called. It's used to ensure that\nout-of-band callbacks are properly handled by the scheduled test.</p>\n<p><a>scheduled_test/scheduled_test.Schedule.wrapAsync.description</a> provides an optional description of the callback, which is\nused when generating error messages.</p>\n<p>The top-level <code>wrapAsync</code> function should usually be used in preference to\nthis in test code.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Function","inner":[]}],"parameters":{"fn":{"name":"fn","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":"null","annotations":[]},"description":{"name":"description","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"wrapFuture":{"name":"wrapFuture","qualifiedName":"scheduled_test/scheduled_test.Schedule.wrapFuture","comment":"<p>Like <a>scheduled_test/scheduled_test.Schedule.wrapAsync</a>, this ensures that the current task queue waits for\nout-of-band asynchronous code, and that errors raised in that code are\nhandled correctly. However, <a>scheduled_test/scheduled_test.Schedule.wrapFuture</a> wraps a <a>scheduled_test/dart-async.Future</a> chain rather\nthan a single callback.</p>\n<p>The returned <a>scheduled_test/dart-async.Future</a> completes to the same value or error as <a>scheduled_test/scheduled_test.Schedule.wrapFuture.future</a>.</p>\n<p><a>scheduled_test/scheduled_test.Schedule.wrapFuture.description</a> provides an optional description of the future, which is\nused when generating error messages.</p>\n<p>The top-level <code>wrapFuture</code> function should usually be used in preference\nto this in test code.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[]}],"parameters":{"future":{"name":"future","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Future","inner":[]}],"value":"null","annotations":[]},"description":{"name":"description","optional":true,"named":false,"default":false,"type":[{"outer":"dart-core.String","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"errorString":{"name":"errorString","qualifiedName":"scheduled_test/scheduled_test.Schedule.errorString","comment":"<p>Returns a string representation of all errors registered on this schedule.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"heartbeat":{"name":"heartbeat","qualifiedName":"scheduled_test/scheduled_test.Schedule.heartbeat","comment":"<p>Notifies the schedule that progress is being made on an asynchronous task.\nThis resets the timeout timer, and can be used in long-running tasks to\nkeep them from timing out.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"scheduled_test/scheduled_test.Schedule.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>scheduled_test/scheduled_test.Schedule.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"scheduled_test/scheduled_test.Schedule.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"scheduled_test/scheduled_test.Schedule.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>scheduled_test/scheduled_test.Schedule.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>scheduled_test/scheduled_test.Schedule.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"scheduled_test/scheduled_test.Schedule.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"scheduled_test/scheduled_test.Schedule.noSuchMethod","comment":"<p><a>scheduled_test/scheduled_test.Schedule.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>scheduled_test/scheduled_test.Schedule.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>scheduled_test/scheduled_test.Schedule.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>scheduled_test/scheduled_test.Schedule.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}