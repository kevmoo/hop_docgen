{"name":"Vector","qualifiedName":"bot/bot.Vector","comment":"<p>Class reperesenting a 2d vector.</p>","isAbstract":false,"superclass":"bot/bot.Coordinate","implements":[],"subclass":[],"variables":{},"inheritedVariables":{"x":{"name":"x","qualifiedName":"bot/bot.Point.x","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"bot/bot.Vector.T","inner":[]}],"annotations":[]},"y":{"name":"y","qualifiedName":"bot/bot.Point.y","comment":"","final":true,"static":false,"constant":false,"type":[{"outer":"bot/bot.Vector.T","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{"normal":{"name":"normal","qualifiedName":"bot/bot.Vector.normal","comment":"","commentFrom":"bot.Vector.normal","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Vector","inner":[]}],"parameters":{},"annotations":[]},"angle":{"name":"angle","qualifiedName":"bot/bot.Vector.angle","comment":"<p>Returns the angle between the positive x-axis and the <a>bot/bot.Vector</a>.\nAngle zero points in the +X direction, 90 degrees points in the +Y\ndirection (down) and from there we grow clockwise.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"bot/bot.Vector.Vector-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":true,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"x":{"name":"x","optional":true,"named":false,"default":true,"type":[{"outer":"bot/bot.Vector.T","inner":[]}],"value":"0","annotations":[]},"y":{"name":"y","optional":true,"named":false,"default":true,"type":[{"outer":"bot/bot.Vector.T","inner":[]}],"value":"0","annotations":[]}},"annotations":[]}},"operators":{"+":{"name":"+","qualifiedName":"bot/bot.Vector.+","comment":"<p>Adds a <a>bot/bot.Coordinate</a> and returns the result as new <a>bot/bot.Vector</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Vector","inner":[{"outer":"bot/bot.Vector.T","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"bot/bot.Point","inner":[{"outer":"bot/bot.Vector.T","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"*":{"name":"*","qualifiedName":"bot/bot.Vector.*","comment":"<p>Multiplies each dimensions by the provided magnitude and returns a new <a>bot/bot.Vector</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Vector","inner":[{"outer":"bot/bot.Vector.T","inner":[]}]}],"parameters":{"magnitude":{"name":"magnitude","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]}},"methods":{"scale":{"name":"scale","qualifiedName":"bot/bot.Vector.scale","comment":"<p>Multiplies each dimensions by the provided magnitude and returns a new <a>bot/bot.Vector</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Vector","inner":[{"outer":"bot/bot.Vector.T","inner":[]}]}],"parameters":{"magnitude":{"name":"magnitude","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"dot":{"name":"dot","qualifiedName":"bot/bot.Vector.dot","comment":"<p>Computes the dot product with the given <a>bot/bot.Vector</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"bot/bot.Vector","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"cross":{"name":"cross","qualifiedName":"bot/bot.Vector.cross","comment":"<p>Computes the cross product with the given <a>bot/bot.Vector</a>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"bot/bot.Vector","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"getAngle":{"name":"getAngle","qualifiedName":"bot/bot.Vector.getAngle","comment":"<p>Computes the angle between this and another <a>bot/bot.Vector</a>.\nAngle zero points in the +X direction, 90 degrees points in the +Y\ndirection (down) and from there we grow clockwise.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"bot/bot.Vector","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"rotate":{"name":"rotate","qualifiedName":"bot/bot.Vector.rotate","comment":"","commentFrom":"bot.Vector.rotate","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Vector","inner":[]}],"parameters":{"angle":{"name":"angle","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"rotateAroundPoint":{"name":"rotateAroundPoint","qualifiedName":"bot/bot.Vector.rotateAroundPoint","comment":"","commentFrom":"bot.Vector.rotateAroundPoint","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Vector","inner":[]}],"parameters":{"axisPoint":{"name":"axisPoint","optional":false,"named":false,"default":false,"type":[{"outer":"bot/bot.Coordinate","inner":[]}],"value":"null","annotations":[]},"angle":{"name":"angle","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"bot/bot.Vector.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>bot/bot.Vector.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"bot.Point.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"bot/bot.Vector.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]},"magnitude":{"name":"magnitude","qualifiedName":"bot/bot.Vector.magnitude","comment":"<p>Get the straight line (Euclidean) distance between the origin (0, 0) and\nthis point.</p>","commentFrom":"","inheritedFrom":"bot.Point.magnitude","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{},"annotations":[]},"isValid":{"name":"isValid","qualifiedName":"bot/bot.Vector.isValid","comment":"","commentFrom":"","inheritedFrom":"bot.Coordinate.isValid","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"bot/bot.Vector.==","comment":"<p>A <code>Point</code> is only equal to another <code>Point</code> with the same coordinates.</p>\n<p>This point is equal to <code>other</code> if, and only if,\n<code>other</code> is a <code>Point</code> with\n<a>bot/dart-math.Point.x</a> equal to <code>other.x</code> and <a>bot/dart-math.Point.y</a> equal to <code>other.y</code>.</p>","commentFrom":"","inheritedFrom":"bot.Point.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"+":{"name":"+","qualifiedName":"bot/bot.Vector.+","comment":"<p>Add <a>bot/bot.Vector.+.other</a> to <code>this</code>, as if both points were vectors.</p>\n<p>Returns the resulting \"vector\" as a Point.</p>","commentFrom":"bot.Point.+","inheritedFrom":"bot.Coordinate.+","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Coordinate","inner":[{"outer":"bot/bot.Vector.T","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"bot/bot.Point","inner":[{"outer":"bot/bot.Coordinate.T","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"-":{"name":"-","qualifiedName":"bot/bot.Vector.-","comment":"<p>Subtract a <a>bot/bot.Coordinate</a> and returns the result as new <a>bot/bot.Vector</a>.</p>","commentFrom":"","inheritedFrom":"bot.Coordinate.-","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Vector","inner":[{"outer":"bot/bot.Vector.T","inner":[]}]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"bot/bot.Point","inner":[{"outer":"bot/bot.Coordinate.T","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[{"name":"dart-core._Override","parameters":[]}]},"*":{"name":"*","qualifiedName":"bot/bot.Vector.*","comment":"<p>Scale this point by <a>bot/bot.Vector.*.factor</a> as if it were a vector.</p>\n<p><em>Important</em> <em>Note</em>: This function accepts a <code>num</code> as its argument only so\nthat you can scale Point&lt;double> objects by an <code>int</code> factor. Because the\nstar operator always returns the same type of Point that originally called\nit, passing in a double <a>bot/bot.Vector.*.factor</a> on a <code>Point&lt;int&gt;</code> <em>causes</em> <em>a</em>\n<em>runtime</em> <em>error</em> in checked mode.</p>","commentFrom":"","inheritedFrom":"bot.Point.*","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Point","inner":[{"outer":"bot/bot.Vector.T","inner":[]}]}],"parameters":{"factor":{"name":"factor","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}},"methods":{"toString":{"name":"toString","qualifiedName":"bot/bot.Vector.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"bot.Point.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"bot/bot.Vector.noSuchMethod","comment":"<p><a>bot/bot.Vector.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>bot/bot.Vector.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>bot/bot.Vector.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>bot/bot.Vector.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":"null","annotations":[]}},"annotations":[]},"distanceTo":{"name":"distanceTo","qualifiedName":"bot/bot.Vector.distanceTo","comment":"<p>Returns the distance between <code>this</code> and <a>bot/bot.Vector.distanceTo.other</a>.</p>","commentFrom":"","inheritedFrom":"bot.Point.distanceTo","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.double","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"bot/bot.Point","inner":[{"outer":"bot.Point.T","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"squaredDistanceTo":{"name":"squaredDistanceTo","qualifiedName":"bot/bot.Vector.squaredDistanceTo","comment":"<p>Returns the squared distance between <code>this</code> and <a>bot/bot.Vector.squaredDistanceTo.other</a>.</p>\n<p>Squared distances can be used for comparisons when the actual value is not\nrequired.</p>","commentFrom":"","inheritedFrom":"bot.Point.squaredDistanceTo","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Vector.T","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"bot/bot.Point","inner":[{"outer":"bot.Point.T","inner":[]}]}],"value":"null","annotations":[]}},"annotations":[]},"toVector":{"name":"toVector","qualifiedName":"bot/bot.Vector.toVector","comment":"","commentFrom":"","inheritedFrom":"bot.Coordinate.toVector","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Vector","inner":[]}],"parameters":{},"annotations":[]},"toSize":{"name":"toSize","qualifiedName":"bot/bot.Vector.toSize","comment":"","commentFrom":"","inheritedFrom":"bot.Coordinate.toSize","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Size","inner":[]}],"parameters":{},"annotations":[]},"toJson":{"name":"toJson","qualifiedName":"bot/bot.Vector.toJson","comment":"","commentFrom":"","inheritedFrom":"bot.Coordinate.toJson","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{},"annotations":[{"name":"dart-core.Deprecated","parameters":["next release"]}]}}},"annotations":[],"generics":{"T":{"name":"T","type":"dart.core.num"}}}