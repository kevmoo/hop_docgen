{"name":"AffineTransform","qualifiedName":"bot/bot.AffineTransform","comment":"","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"determinant":{"name":"determinant","qualifiedName":"bot/bot.AffineTransform.determinant","comment":"","commentFrom":"bot.AffineTransform.determinant","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"bot/bot.AffineTransform.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>bot/bot.AffineTransform.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"dart-core.Object.hashCode","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"isIdentity":{"name":"isIdentity","qualifiedName":"bot/bot.AffineTransform.isIdentity","comment":"","commentFrom":"bot.AffineTransform.isIdentity","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{},"annotations":[]},"scaleX":{"name":"scaleX","qualifiedName":"bot/bot.AffineTransform.scaleX","comment":"","commentFrom":"bot.AffineTransform.scaleX","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"scaleY":{"name":"scaleY","qualifiedName":"bot/bot.AffineTransform.scaleY","comment":"","commentFrom":"bot.AffineTransform.scaleY","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"shearX":{"name":"shearX","qualifiedName":"bot/bot.AffineTransform.shearX","comment":"","commentFrom":"bot.AffineTransform.shearX","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"shearY":{"name":"shearY","qualifiedName":"bot/bot.AffineTransform.shearY","comment":"","commentFrom":"bot.AffineTransform.shearY","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"translateVector":{"name":"translateVector","qualifiedName":"bot/bot.AffineTransform.translateVector","comment":"","commentFrom":"bot.AffineTransform.translateVector","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Vector","inner":[]}],"parameters":{},"annotations":[]},"translateX":{"name":"translateX","qualifiedName":"bot/bot.AffineTransform.translateX","comment":"","commentFrom":"bot.AffineTransform.translateX","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]},"translateY":{"name":"translateY","qualifiedName":"bot/bot.AffineTransform.translateY","comment":"","commentFrom":"bot.AffineTransform.translateY","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.num","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"bot/bot.AffineTransform.AffineTransform-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"scaleX":{"name":"scaleX","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"1","annotations":[]},"shearY":{"name":"shearY","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"0","annotations":[]},"shearX":{"name":"shearX","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"0","annotations":[]},"scaleY":{"name":"scaleY","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"1","annotations":[]},"translateX":{"name":"translateX","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"0","annotations":[]},"translateY":{"name":"translateY","optional":true,"named":false,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"0","annotations":[]}},"annotations":[]},"fromRotate":{"name":"fromRotate","qualifiedName":"bot/bot.AffineTransform.AffineTransform-fromRotate","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"theta":{"name":"theta","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromScale":{"name":"fromScale","qualifiedName":"bot/bot.AffineTransform.AffineTransform-fromScale","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"sx":{"name":"sx","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"sy":{"name":"sy","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"fromTranslat":{"name":"fromTranslat","qualifiedName":"bot/bot.AffineTransform.AffineTransform-fromTranslat","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{"==":{"name":"==","qualifiedName":"bot/bot.AffineTransform.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>bot/bot.AffineTransform.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>bot/bot.AffineTransform.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"dart-core.Object.==","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"bot/bot.AffineTransform","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"clone":{"name":"clone","qualifiedName":"bot/bot.AffineTransform.clone","comment":"","commentFrom":"bot.AffineTransform.clone","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{},"annotations":[]},"concatenate":{"name":"concatenate","qualifiedName":"bot/bot.AffineTransform.concatenate","comment":"","commentFrom":"bot.AffineTransform.concatenate","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"tx":{"name":"tx","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"createInverse":{"name":"createInverse","qualifiedName":"bot/bot.AffineTransform.createInverse","comment":"","commentFrom":"bot.AffineTransform.createInverse","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{},"annotations":[]},"lerpTx":{"name":"lerpTx","qualifiedName":"bot/bot.AffineTransform.lerpTx","comment":"","commentFrom":"bot.AffineTransform.lerpTx","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"bot/bot.AffineTransform","inner":[]}],"value":null,"annotations":[]},"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"rotate":{"name":"rotate","qualifiedName":"bot/bot.AffineTransform.rotate","comment":"","commentFrom":"bot.AffineTransform.rotate","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"theta":{"name":"theta","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"scale":{"name":"scale","qualifiedName":"bot/bot.AffineTransform.scale","comment":"","commentFrom":"bot.AffineTransform.scale","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"sx":{"name":"sx","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"sy":{"name":"sy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setFromTransfrom":{"name":"setFromTransfrom","qualifiedName":"bot/bot.AffineTransform.setFromTransfrom","comment":"","commentFrom":"bot.AffineTransform.setFromTransfrom","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"tx":{"name":"tx","optional":false,"named":false,"default":false,"type":[{"outer":"bot/bot.AffineTransform","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setToRotation":{"name":"setToRotation","qualifiedName":"bot/bot.AffineTransform.setToRotation","comment":"","commentFrom":"bot.AffineTransform.setToRotation","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"theta":{"name":"theta","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"x":{"name":"x","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"y":{"name":"y","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setToScale":{"name":"setToScale","qualifiedName":"bot/bot.AffineTransform.setToScale","comment":"","commentFrom":"bot.AffineTransform.setToScale","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"sx":{"name":"sx","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"sy":{"name":"sy","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setToTranslation":{"name":"setToTranslation","qualifiedName":"bot/bot.AffineTransform.setToTranslation","comment":"","commentFrom":"bot.AffineTransform.setToTranslation","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"dx":{"name":"dx","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"dy":{"name":"dy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"setTransform":{"name":"setTransform","qualifiedName":"bot/bot.AffineTransform.setTransform","comment":"","commentFrom":"bot.AffineTransform.setTransform","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"m00":{"name":"m00","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"m10":{"name":"m10","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"m01":{"name":"m01","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"m11":{"name":"m11","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"m02":{"name":"m02","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"m12":{"name":"m12","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"bot/bot.AffineTransform.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"dart-core.Object.toString","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"transformCoordinate":{"name":"transformCoordinate","qualifiedName":"bot/bot.AffineTransform.transformCoordinate","comment":"","commentFrom":"bot.AffineTransform.transformCoordinate","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.Coordinate","inner":[]}],"parameters":{"point":{"name":"point","optional":true,"named":false,"default":true,"type":[{"outer":"bot/bot.Point","inner":[]}],"value":"ConstructedConstant(Coordinate(\"x\"=Instance of 'IntConstant',\"y\"=Instance of 'IntConstant'))","annotations":[]}},"annotations":[]},"translate":{"name":"translate","qualifiedName":"bot/bot.AffineTransform.translate","comment":"","commentFrom":"bot.AffineTransform.translate","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"dx":{"name":"dx","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]},"dy":{"name":"dy","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.num","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"updateValues":{"name":"updateValues","qualifiedName":"bot/bot.AffineTransform.updateValues","comment":"","commentFrom":"bot.AffineTransform.updateValues","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"bot/bot.AffineTransform","inner":[]}],"parameters":{"translateX":{"name":"translateX","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"translateY":{"name":"translateY","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"scaleX":{"name":"scaleX","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"scaleY":{"name":"scaleY","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"shearX":{"name":"shearX","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]},"shearY":{"name":"shearY","optional":true,"named":true,"default":true,"type":[{"outer":"dart-core.num","inner":[]}],"value":"null","annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"bot/bot.AffineTransform.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>bot/bot.AffineTransform.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"bot/bot.AffineTransform.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"bot/bot.AffineTransform.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>bot/bot.AffineTransform.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>bot/bot.AffineTransform.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"bot/bot.AffineTransform.noSuchMethod","comment":"<p><a>bot/bot.AffineTransform.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>bot/bot.AffineTransform.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>bot/bot.AffineTransform.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>bot/bot.AffineTransform.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"bot/bot.AffineTransform.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}