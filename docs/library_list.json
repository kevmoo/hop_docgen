{"libraries":[{"packageName":"","name":"dart-core","qualifiedName":"dart-core","preview":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>"},{"packageName":"args","name":"args","qualifiedName":"args/args","packageIntro":"<p>Parses raw command-line arguments into a set of options and values.</p>\n<p>This library supports <a href=\"http://www.gnu.org/prep/standards/standards.html#Command_002dLine-Interfaces\">GNU</a> and <a href=\"http://pubs.opengroup.org/onlinepubs/009695399/basedefs/xbd_chap12.html#tag_12_02\">POSIX</a> style options, and it works\nin both server-side and client-side apps.</p>\n<h2>Defining options</h2>\n<p>First create an <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgParser\">ArgParser</a>:</p>\n<pre><code>var parser = new ArgParser();\n</code></pre>\n<p>Then define a set of options on that parser using <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgParser#id_addOption\">addOption()</a> and\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgParser#id_addFlag\">addFlag()</a>. Here's the minimal way to create an option named \"name\":</p>\n<pre><code>parser.addOption('name');\n</code></pre>\n<p>When an option can only be set or unset (as opposed to taking a string value),\nuse a flag:</p>\n<pre><code>parser.addFlag('name');\n</code></pre>\n<p>Flag options, by default, accept a 'no-' prefix to negate the option. You can\ndisable the 'no-' prefix using the <code>negatable</code> parameter:</p>\n<pre><code>parser.addFlag('name', negatable: false);\n</code></pre>\n<p><em>Note:</em> From here on out, \"option\" refers to both regular options and flags. In\ncases where the distinction matters, we'll use \"non-flag option.\"</p>\n<p>Options can have an optional single-character abbreviation, specified with the\n<code>abbr</code> parameter:</p>\n<pre><code>parser.addOption('mode', abbr: 'm');\nparser.addFlag('verbose', abbr: 'v');\n</code></pre>\n<p>Options can also have a default value, specified with the <code>defaultsTo</code>\nparameter. The default value is used when arguments don't specify the option.</p>\n<pre><code>parser.addOption('mode', defaultsTo: 'debug');\nparser.addFlag('verbose', defaultsTo: false);\n</code></pre>\n<p>The default value for non-flag options can be any string. For flags, it must\nbe a <code>bool</code>.</p>\n<p>To validate a non-flag option, you can use the <code>allowed</code> parameter to provide an\nallowed set of values. When you do, the parser throws a <a>dart-core</a> if the\nvalue for an option is not in the allowed set. Here's an example of specifying\nallowed values:</p>\n<pre><code>parser.addOption('mode', allowed: ['debug', 'release']);\n</code></pre>\n<p>You can use the <code>callback</code> parameter to associate a function with an option.\nLater, when parsing occurs, the callback function is invoked with the value of\nthe option:</p>\n<pre><code>parser.addOption('mode', callback: (mode) =&gt; print('Got mode $mode));\nparser.addFlag('verbose', callback: (verbose) {\n  if (verbose) print('Verbose');\n});\n</code></pre>\n<p>The callbacks for all options are called whenever a set of arguments is parsed.\nIf an option isn't provided in the args, its callback is passed the default\nvalue, or <code>null</code> if no default value is set.</p>\n<h2>Parsing arguments</h2>\n<p>Once you have an <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgParser\">ArgParser</a> set up with some options and flags, you use it by\ncalling <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgParser#id_parse\">ArgParser.parse()</a> with a set of arguments:</p>\n<pre><code>var results = parser.parse(['some', 'command', 'line', 'args']);\n</code></pre>\n<p>These arguments usually come from the arguments to <code>main()</code>, but you can pass in\nany list of strings. The <code>parse()</code> method returns an instance of <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgResults\">ArgResults</a>,\na map-like object that contains the values of the parsed options.</p>\n<pre><code>var parser = new ArgParser();\nparser.addOption('mode');\nparser.addFlag('verbose', defaultsTo: true);\nvar results = parser.parse(['--mode', 'debug', 'something', 'else']);\n\nprint(results['mode']); // debug\nprint(results['verbose']); // true\n</code></pre>\n<p>By default, the <code>parse()</code> method stops as soon as it reaches <code>--</code> by itself or\nanything that the parser doesn't recognize as an option, flag, or option value.\nIf arguments still remain, they go into <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgResults#id_rest\">ArgResults.rest</a>.</p>\n<pre><code>print(results.rest); // ['something', 'else']\n</code></pre>\n<p>To continue to parse options found after non-option arguments, pass\n<code>allowTrailingOptions: true</code> when creating the <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgParser\">ArgParser</a>.</p>\n<h2>Specifying options</h2>\n<p>To actually pass in options and flags on the command line, use GNU or POSIX\nstyle. Consider this option:</p>\n<pre><code>parser.addOption('name', abbr: 'n');\n</code></pre>\n<p>You can specify its value on the command line using any of the following:</p>\n<pre><code>--name=somevalue\n--name somevalue\n-nsomevalue\n-n somevalue\n</code></pre>\n<p>Consider this flag:</p>\n<pre><code>parser.addFlag('name', abbr: 'n');\n</code></pre>\n<p>You can set it to true using one of the following:</p>\n<pre><code>--name\n-n\n</code></pre>\n<p>You can set it to false using the following:</p>\n<pre><code>--no-name\n</code></pre>\n<p>Multiple flag abbreviations can be collapsed into a single argument. Say you\ndefine these flags:</p>\n<pre><code>parser.addFlag('verbose', abbr: 'v');\nparser.addFlag('french', abbr: 'f');\nparser.addFlag('iambic-pentameter', abbr: 'i');\n</code></pre>\n<p>You can set all three flags at once:</p>\n<pre><code>-vfi\n</code></pre>\n<p>By default, an option has only a single value, with later option values\noverriding earlier ones; for example:</p>\n<pre><code>var parser = new ArgParser();\nparser.addOption('mode');\nvar results = parser.parse(['--mode', 'on', '--mode', 'off']);\nprint(results['mode']); // prints 'off'\n</code></pre>\n<p>If you need multiple values, set the <code>allowMultiple</code> parameter. In that case the\noption can occur multiple times, and the <code>parse()</code> method returns a list of\nvalues:</p>\n<pre><code>var parser = new ArgParser();\nparser.addOption('mode', allowMultiple: true);\nvar results = parser.parse(['--mode', 'on', '--mode', 'off']);\nprint(results['mode']); // prints '[on, off]'\n</code></pre>\n<h2>Defining commands</h2>\n<p>In addition to <em>options</em>, you can also define <em>commands</em>. A command is a named\nargument that has its own set of options. For example, consider this shell\ncommand:</p>\n<pre><code>$ git commit -a\n</code></pre>\n<p>The executable is <code>git</code>, the command is <code>commit</code>, and the <code>-a</code> option is an\noption passed to the command. You can add a command using the <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgParser#id_addCommand\">addCommand</a>\nmethod:</p>\n<pre><code>var parser = new ArgParser();\nvar command = parser.addCommand('commit');\n</code></pre>\n<p>It returns another <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgParser\">ArgParser</a>, which you can then use to define options\nspecific to that command. If you already have an <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgParser\">ArgParser</a> for the command's\noptions, you can pass it in:</p>\n<pre><code>var parser = new ArgParser();\nvar command = new ArgParser();\nparser.addCommand('commit', command);\n</code></pre>\n<p>The <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgParser\">ArgParser</a> for a command can then define options or flags:</p>\n<pre><code>command.addFlag('all', abbr: 'a');\n</code></pre>\n<p>You can add multiple commands to the same parser so that a user can select one\nfrom a range of possible commands. When parsing an argument list, you can then\ndetermine which command was entered and what options were provided for it.</p>\n<pre><code>var results = parser.parse(['commit', '-a']);\nprint(results.command.name);   // \"commit\"\nprint(results.command['all']); // true\n</code></pre>\n<p>Options for a command must appear after the command in the argument list. For\nexample, given the above parser, <code>\"git -a commit\"</code> is <em>not</em> valid. The parser\ntries to find the right-most command that accepts an option. For example:</p>\n<pre><code>var parser = new ArgParser();\nparser.addFlag('all', abbr: 'a');\nvar command = parser.addCommand('commit');\ncommand.addFlag('all', abbr: 'a');\n\nvar results = parser.parse(['commit', '-a']);\nprint(results.command['all']); // true\n</code></pre>\n<p>Here, both the top-level parser and the <code>\"commit\"</code> command can accept a <code>\"-a\"</code>\n(which is probably a bad command line interface, admittedly). In that case, when\n<code>\"-a\"</code> appears after <code>\"commit\"</code>, it is applied to that command. If it appears to\nthe left of <code>\"commit\"</code>, it is given to the top-level parser.</p>\n<h2>Displaying usage</h2>\n<p>You can automatically generate nice help text, suitable for use as the output of\n<code>--help</code>. To display good usage information, you should provide some help text\nwhen you create your options.</p>\n<p>To define help text for an entire option, use the <code>help:</code> parameter:</p>\n<pre><code>parser.addOption('mode', help: 'The compiler configuration',\n    allowed: ['debug', 'release']);\nparser.addFlag('verbose', help: 'Show additional diagnostic info');\n</code></pre>\n<p>For non-flag options, you can also provide detailed help for each expected value\nby using the <code>allowedHelp:</code> parameter:</p>\n<pre><code>parser.addOption('arch', help: 'The architecture to compile for',\n    allowedHelp: {\n      'ia32': 'Intel x86',\n      'arm': 'ARM Holding 32-bit chip'\n    });\n</code></pre>\n<p>To display the help, use the <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/args/args.ArgParser#id_getUsage\">getUsage()</a> method:</p>\n<pre><code>print(parser.getUsage());\n</code></pre>\n<p>The resulting string looks something like this:</p>\n<pre><code>--mode            The compiler configuration\n                  [debug, release]\n\n--[no-]verbose    Show additional diagnostic info\n--arch            The architecture to compile for\n\n      [arm]       ARM Holding 32-bit chip\n      [ia32]      Intel x86\n</code></pre>\n<p>To assist the formatting of the usage help, single-line help text is followed by\na single new line. Options with multi-line help text are followed by two new\nlines. This provides spatial diversity between options.</p>"},{"packageName":"bot","name":"bot","qualifiedName":"bot/bot","packageIntro":"<p><a href=\"https://raw.github.com/kevmoo/bot.dart/master/resource/logo.png\"><img alt=\"BOT!\" src=\"https://raw.github.com/kevmoo/bot.dart/master/resource/logo.png\"></img></a></p>\n<h1>The Dart Bag-of-Tricks</h1>\n<h2>A collection of (mostly) general libraries to make working with <a href=\"http://www.dartlang.org/\">Dart</a> more productive.</h2>\n<p>Starting by porting bits of the <a href=\"https://github.com/thinkpixellab/pl\">PL javascript library</a> and Google's <a href=\"https://developers.google.com/closure/library/\">Closure javascript library</a> to enable some interesting scenarios.</p>\n<p><a href=\"https://drone.io/kevmoo/bot.dart/latest\"><a href=\"https://drone.io/kevmoo/bot.dart/status.png\"><img src=\"https://drone.io/kevmoo/bot.dart/status.png\"></img></a></a></p>\n<h1>Projects using BOT</h1><ul><li><a href=\"https://github.com/dart-gde/chrome.dart\">chrome.dart</a> - Dart interop with chrome.* APIs for Chrome Packaged Apps</li><li><a href=\"https://github.com/dart-lang/pop-pop-win\">Pop, Pop, Win!</a> - Minesweeper with balloons</li><li><a href=\"https://github.com/kevmoo/qr.dart\">qr.dart</a> - Generate QR codes</li><li><a href=\"https://github.com/kevmoo/vote.dart\">vote.dart</a> - Simulate, run, and calculate elections with different election methods</li><li><a href=\"https://github.com/kevmoo/widget.dart\">Dart Widgets</a> - Reusable Web Components</li></ul>\n<h1>Try It Now</h1>\n<p>The <strong>Dart Bag-of-Tricks</strong> ( <strong>BOT</strong> ) is hosted on <a href=\"http://pub.dartlang.org/packages/bot\">pub.dartlang.org</a>. Add the <strong>BOT</strong> package to your <code>pubspec.yaml</code> file, selecting a version range that works with your version of the SDK. <em>Always check the <a href=\"http://pub.dartlang.org/packages/bot\">BOT page</a> on pub to find the latest release.</em></p>\n<p>See the <a href=\"https://github.com/kevmoo/bot.dart/blob/master/changelog.md\">changelog</a> to find the version that works best for you.</p>\n<p>If you'd like to track bleeding edge developments, you can reference the the <a href=\"https://github.com/kevmoo/bot.dart\">GitHub repository</a> directly:</p>\n<pre class=\"yaml\"><code>dependencies:\n  bot:\n    git: https://github.com/kevmoo/bot.dart.git\n</code></pre>\n<h1>Versioning</h1><ul><li>We follow <a href=\"http://semver.org/\">Semantic Versioning</a>.</li><li>\n<p>We are not planning a V1 for <strong>BOT</strong> until Dart releases V1.\n<em> In the mean time, the version will remain <code>0.Y.Z</code>.\n</em> Changes to the <em>minor</em> version - Y - will indicate breaking changes.\n* Changes to the <em>patch</em> version - Z - indicate non-breaking changes.</p></li></ul>\n<h1>Dart SDK dependency</h1><ul><li>We're going to try to keep <strong>BOT</strong> in line with the <a href=\"https://gsdview.appspot.com/dart-editor-archive-integration/latest/\">latest integration build</a> of the Dart SDK and Editor.</li><li>At this point, each SDK release tends to introduce breaking changes, which usually require breaking changes in <strong>BOT</strong>.</li><li>Keep an eye on the <a href=\"https://github.com/kevmoo/bot.dart/blob/master/changelog.md\">changelog</a> to see how <strong>BOT</strong> aligns with each SDK release.</li></ul>\n<h1>The libraries</h1>\n<h2>bot -- default library</h2><ul><li>No dependencies on 3rd-party libraries.</li><li>Usable for browser-based projects and non-browser projects.</li></ul>\n<h3>attached</h3><ul><li>\n<p>A general model for supporting extensible, runtime-defined events and\n   properties on supported objects.</p></li><li>\n<p>This functionality is inspired by the Dependency Object/Property model\n   in WPF/Silverlight.</p></li></ul>\n<h3>collection</h3><ul><li><code>Array2d</code></li><li><code>Grouping</code> of collections</li><li><code>ReadOnlyCollection</code></li></ul>\n<h3>color</h3><ul><li><code>RgbColor</code>, <code>HslColor</code> with associated conversions back and forth</li><li><code>RgbColor</code> supports to/from hex</li></ul>\n<h3>events</h3><ul><li>Easily raise and subscribe to events with custom, type-safe event objects.</li></ul>\n<h3>math</h3><ul><li>Mostly classes related to 2D geometry and graphicsgeometry-related classes</li><li><code>Coordinate</code>, <code>Box</code>, <code>Size</code>, <code>Vector</code>, <code>AffineTransfrom</code></li></ul>\n<h2>bot_async</h2><ul><li><code>FutureValue</code>: an abstract model for async conversions via <code>Future&lt;T&gt;</code></li><li><code>SendPortValue</code>: an implementation of <code>FutureValue</code> using isolates.</li></ul>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><a href=\"https://github.com/eskimoblood\">Andreas Köberle</a> (<a href=\"https://twitter.com/eskimobloood\">@eskimobloood</a>)</li><li><em>You? File bugs. Fork and Fix bugs. Let's build this community.</em></li></ul>"},{"packageName":"bot_io","name":"bot_io","qualifiedName":"bot_io/bot_io","packageIntro":"<p><a href=\"https://raw.github.com/kevmoo/bot.dart/master/resource/logo.png\"><img alt=\"BOT!\" src=\"https://raw.github.com/kevmoo/bot.dart/master/resource/logo.png\"></img></a></p>\n<h1>bot_io</h1>\n<h3>A collection of Dart file system helpers built on dart:io.</h3>\n<p><a href=\"https://drone.io/github.com/kevmoo/bot_io.dart/latest\"><a href=\"https://drone.io/github.com/kevmoo/bot_io.dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/kevmoo/bot_io.dart/status.png\"></img></a></a></p>\n<h1>Projects using bot_io</h1><ul><li><a href=\"https://github.com/kevmoo/hop.dart\">Hop: Dark Task Framework</a></li></ul>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><em>You? File bugs. Fork and Fix bugs. Send pull requests.</em></li></ul>"},{"packageName":"collection","name":"dart-pkg-collection","qualifiedName":"collection/dart-pkg-collection","preview":"<p>Exports all the individual parts of the collection-helper library.</p>","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"packageName":"collection","name":"dart-pkg-collection-algorithms","qualifiedName":"collection/dart-pkg-collection-algorithms","preview":"<p>Operations on collections.</p>","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"packageName":"collection","name":"dart-pkg-collection-equality","qualifiedName":"collection/dart-pkg-collection-equality","preview":"<p>Defines equality relations on collections.</p>","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"packageName":"collection","name":"dart-pkg-collection-iterable_zip","qualifiedName":"collection/dart-pkg-collection-iterable_zip","preview":"<p>Zipping multiple iterables into one iterable of tuples of values.</p>","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"packageName":"collection","name":"dart-pkg-collection-priority_queue","qualifiedName":"collection/dart-pkg-collection-priority_queue","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"packageName":"collection","name":"dart-pkg-collection-wrappers","qualifiedName":"collection/dart-pkg-collection-wrappers","preview":"<p>Delegating wrappers for <a>dart-core.Iterable</a>, <a>dart-core.List</a>, <a>dart-core.Set</a>, <a>collection/dart-pkg-collection-wrappers.Queue</a> and <a>dart-core.Map</a>.</p>","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"packageName":"completion","name":"completion","qualifiedName":"completion/completion","packageIntro":"<h1>completion</h1>\n<h3>A packaged to add shell command completion to your application</h3>\n<p><a href=\"https://drone.io/github.com/kevmoo/completion.dart/latest\"><a href=\"https://drone.io/github.com/kevmoo/completion.dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/kevmoo/completion.dart/status.png\"></img></a></a></p>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><em>You? File bugs. Fork and Fix bugs. Send pull requests.</em></li></ul>"},{"packageName":"crypto","name":"crypto","qualifiedName":"crypto/crypto","preview":"<p>Cryptographic algorithms, with support for hash functions such as\nSHA-1, SHA-256, HMAC, and MD5.</p>","packageIntro":""},{"packageName":"git","name":"git","qualifiedName":"git/git","packageIntro":"<h1>git</h1>\n<h3>A dart wrapper around the Git command line</h3>\n<p><a href=\"https://drone.io/github.com/kevmoo/git.dart/latest\"><a href=\"https://drone.io/github.com/kevmoo/git.dart/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/kevmoo/git.dart/status.png\"></img></a></a></p>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/+KevinMoore314\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><em>You? File bugs. Fork and Fix bugs. Send pull requests.</em></li></ul>"},{"packageName":"hop","name":"hop","qualifiedName":"hop/hop","preview":"<p>The main Hop library.</p>","packageIntro":"<p><a href=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\"><img alt=\"Hop!\" src=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\"></img></a></p>\n<h2>A Dart framework for reusable tasks</h2>\n<p><a href=\"https://drone.io/github.com/dart-lang/hop/latest\"><a href=\"https://drone.io/github.com/dart-lang/hop/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/dart-lang/hop/status.png\"></img></a></a> <a href=\"http://waffle.io/dart-lang/hop\"><a href=\"https://badge.waffle.io/dart-lang/hop.png?label=ready\"><img alt=\"Stories in Ready\" src=\"https://badge.waffle.io/dart-lang/hop.png?label=ready\"></img></a></a></p>\n<h1>Getting started</h1><ul><li>Read <a href=\"https://github.com/dart-lang/hop/wiki\">the wiki</a>.</li><li>Read the <a href=\"https://github.com/dart-lang/hop/blob/master/example/hop_runner.dart\">documented example</a>.</li><li>Check out Hop's <a href=\"https://github.com/dart-lang/hop/blob/master/tool/hop_runner.dart\">hop_runner</a>.</li></ul>\n<h1>Projects using Hop</h1><ul><li><a href=\"https://github.com/dart-lang/pop-pop-win\">Pop, Pop, Win!</a> - Minesweeper with balloons</li><li><a href=\"https://github.com/dart-lang/widget.dart\">Dart Widgets</a> - Reusable Web Components</li><li><a href=\"https://github.com/sethladd/lawndart\">Lawndart</a> - Unified, asynchronous, easy-to-use library for browser-based storage.</li><li><a href=\"https://github.com/johnmccutchan/spectre\">Spectre</a> - Spectre Graphics Engine for Dart</li><li><a href=\"https://github.com/johnmccutchan/vector_math\">vector_math</a> - A Vector math library for 2D and 3D applications.</li><li><a href=\"https://github.com/dart-gde/discovery_api_dart_client_generator\">Dart Client Generator for Discovery APIs</a></li><li><a href=\"https://github.com/dart-gde/chrome.dart\">chrome.dart</a> - Dart interop with chrome.* APIs for Chrome Packaged Apps</li><li><a href=\"https://github.com/kevmoo/qr.dart\">qr.dart</a> - Generate QR codes</li><li><a href=\"https://github.com/kevmoo/vote.dart\">vote.dart</a> - Simulate, run, and calculate elections with different election methods</li></ul>\n<h1>Try It Now</h1>\n<p>The <strong>The Hop task management system for Dart</strong> is hosted on <a href=\"http://pub.dartlang.org/packages/hop\">pub.dartlang.org</a>. Add the <strong>Hop</strong> package to your <code>pubspec.yaml</code> file, selecting a version range that works with your version of the SDK. <em>Always check the <a href=\"http://pub.dartlang.org/packages/hop\">Hop page</a> on pub to find the latest release.</em></p>\n<p>See the <a href=\"https://github.com/dart-lang/hop/blob/master/changelog.md\">changelog</a> to find the version that works best for you.</p>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><a href=\"https://github.com/financeCoding\">Adam Singer</a> (<a href=\"https://plus.google.com/104569492481999771226\">+Adam Singer</a>)</li><li><a href=\"https://github.com/damondouglas\">Damon Douglas</a> (<a href=\"https://plus.google.com/u/0/108940381045821372455/\">+Damon Douglas</a>)</li><li><a href=\"https://github.com/devoncarew\">Devon Carew</a> (<a href=\"https://plus.google.com/104561874283081442379/\">+Devon Carew</a>)</li><li>Martin Charles</li></ul>"},{"packageName":"hop","name":"hop-core","qualifiedName":"hop/hop-core","preview":"<p>The base Hop library.</p>","packageIntro":"<p><a href=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\"><img alt=\"Hop!\" src=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\"></img></a></p>\n<h2>A Dart framework for reusable tasks</h2>\n<p><a href=\"https://drone.io/github.com/dart-lang/hop/latest\"><a href=\"https://drone.io/github.com/dart-lang/hop/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/dart-lang/hop/status.png\"></img></a></a> <a href=\"http://waffle.io/dart-lang/hop\"><a href=\"https://badge.waffle.io/dart-lang/hop.png?label=ready\"><img alt=\"Stories in Ready\" src=\"https://badge.waffle.io/dart-lang/hop.png?label=ready\"></img></a></a></p>\n<h1>Getting started</h1><ul><li>Read <a href=\"https://github.com/dart-lang/hop/wiki\">the wiki</a>.</li><li>Read the <a href=\"https://github.com/dart-lang/hop/blob/master/example/hop_runner.dart\">documented example</a>.</li><li>Check out Hop's <a href=\"https://github.com/dart-lang/hop/blob/master/tool/hop_runner.dart\">hop_runner</a>.</li></ul>\n<h1>Projects using Hop</h1><ul><li><a href=\"https://github.com/dart-lang/pop-pop-win\">Pop, Pop, Win!</a> - Minesweeper with balloons</li><li><a href=\"https://github.com/dart-lang/widget.dart\">Dart Widgets</a> - Reusable Web Components</li><li><a href=\"https://github.com/sethladd/lawndart\">Lawndart</a> - Unified, asynchronous, easy-to-use library for browser-based storage.</li><li><a href=\"https://github.com/johnmccutchan/spectre\">Spectre</a> - Spectre Graphics Engine for Dart</li><li><a href=\"https://github.com/johnmccutchan/vector_math\">vector_math</a> - A Vector math library for 2D and 3D applications.</li><li><a href=\"https://github.com/dart-gde/discovery_api_dart_client_generator\">Dart Client Generator for Discovery APIs</a></li><li><a href=\"https://github.com/dart-gde/chrome.dart\">chrome.dart</a> - Dart interop with chrome.* APIs for Chrome Packaged Apps</li><li><a href=\"https://github.com/kevmoo/qr.dart\">qr.dart</a> - Generate QR codes</li><li><a href=\"https://github.com/kevmoo/vote.dart\">vote.dart</a> - Simulate, run, and calculate elections with different election methods</li></ul>\n<h1>Try It Now</h1>\n<p>The <strong>The Hop task management system for Dart</strong> is hosted on <a href=\"http://pub.dartlang.org/packages/hop\">pub.dartlang.org</a>. Add the <strong>Hop</strong> package to your <code>pubspec.yaml</code> file, selecting a version range that works with your version of the SDK. <em>Always check the <a href=\"http://pub.dartlang.org/packages/hop\">Hop page</a> on pub to find the latest release.</em></p>\n<p>See the <a href=\"https://github.com/dart-lang/hop/blob/master/changelog.md\">changelog</a> to find the version that works best for you.</p>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><a href=\"https://github.com/financeCoding\">Adam Singer</a> (<a href=\"https://plus.google.com/104569492481999771226\">+Adam Singer</a>)</li><li><a href=\"https://github.com/damondouglas\">Damon Douglas</a> (<a href=\"https://plus.google.com/u/0/108940381045821372455/\">+Damon Douglas</a>)</li><li><a href=\"https://github.com/devoncarew\">Devon Carew</a> (<a href=\"https://plus.google.com/104561874283081442379/\">+Devon Carew</a>)</li><li>Martin Charles</li></ul>"},{"packageName":"hop","name":"hop_tasks","qualifiedName":"hop/hop_tasks","preview":"<p>Useful Task implementations and helpers.</p>","packageIntro":"<p><a href=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\"><img alt=\"Hop!\" src=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\"></img></a></p>\n<h2>A Dart framework for reusable tasks</h2>\n<p><a href=\"https://drone.io/github.com/dart-lang/hop/latest\"><a href=\"https://drone.io/github.com/dart-lang/hop/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/dart-lang/hop/status.png\"></img></a></a> <a href=\"http://waffle.io/dart-lang/hop\"><a href=\"https://badge.waffle.io/dart-lang/hop.png?label=ready\"><img alt=\"Stories in Ready\" src=\"https://badge.waffle.io/dart-lang/hop.png?label=ready\"></img></a></a></p>\n<h1>Getting started</h1><ul><li>Read <a href=\"https://github.com/dart-lang/hop/wiki\">the wiki</a>.</li><li>Read the <a href=\"https://github.com/dart-lang/hop/blob/master/example/hop_runner.dart\">documented example</a>.</li><li>Check out Hop's <a href=\"https://github.com/dart-lang/hop/blob/master/tool/hop_runner.dart\">hop_runner</a>.</li></ul>\n<h1>Projects using Hop</h1><ul><li><a href=\"https://github.com/dart-lang/pop-pop-win\">Pop, Pop, Win!</a> - Minesweeper with balloons</li><li><a href=\"https://github.com/dart-lang/widget.dart\">Dart Widgets</a> - Reusable Web Components</li><li><a href=\"https://github.com/sethladd/lawndart\">Lawndart</a> - Unified, asynchronous, easy-to-use library for browser-based storage.</li><li><a href=\"https://github.com/johnmccutchan/spectre\">Spectre</a> - Spectre Graphics Engine for Dart</li><li><a href=\"https://github.com/johnmccutchan/vector_math\">vector_math</a> - A Vector math library for 2D and 3D applications.</li><li><a href=\"https://github.com/dart-gde/discovery_api_dart_client_generator\">Dart Client Generator for Discovery APIs</a></li><li><a href=\"https://github.com/dart-gde/chrome.dart\">chrome.dart</a> - Dart interop with chrome.* APIs for Chrome Packaged Apps</li><li><a href=\"https://github.com/kevmoo/qr.dart\">qr.dart</a> - Generate QR codes</li><li><a href=\"https://github.com/kevmoo/vote.dart\">vote.dart</a> - Simulate, run, and calculate elections with different election methods</li></ul>\n<h1>Try It Now</h1>\n<p>The <strong>The Hop task management system for Dart</strong> is hosted on <a href=\"http://pub.dartlang.org/packages/hop\">pub.dartlang.org</a>. Add the <strong>Hop</strong> package to your <code>pubspec.yaml</code> file, selecting a version range that works with your version of the SDK. <em>Always check the <a href=\"http://pub.dartlang.org/packages/hop\">Hop page</a> on pub to find the latest release.</em></p>\n<p>See the <a href=\"https://github.com/dart-lang/hop/blob/master/changelog.md\">changelog</a> to find the version that works best for you.</p>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><a href=\"https://github.com/financeCoding\">Adam Singer</a> (<a href=\"https://plus.google.com/104569492481999771226\">+Adam Singer</a>)</li><li><a href=\"https://github.com/damondouglas\">Damon Douglas</a> (<a href=\"https://plus.google.com/u/0/108940381045821372455/\">+Damon Douglas</a>)</li><li><a href=\"https://github.com/devoncarew\">Devon Carew</a> (<a href=\"https://plus.google.com/104561874283081442379/\">+Devon Carew</a>)</li><li>Martin Charles</li></ul>"},{"packageName":"hop_docgen","name":"hop_docgen","qualifiedName":"hop_docgen/hop_docgen","packageIntro":"<p><a href=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\"><img alt=\"Hop!\" src=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\"></img></a></p>\n<h1>hop_docgen</h1>\n<h2>Hop task for creating, publishing, and updating documentation for your Dart project</h2>\n<p><a href=\"https://drone.io/github.com/kevmoo/hop_docgen/latest\"><a href=\"https://drone.io/github.com/kevmoo/hop_docgen/status.png\"><img alt=\"Build Status\" src=\"https://drone.io/github.com/kevmoo/hop_docgen/status.png\"></img></a></a></p>"},{"packageName":"hop_git","name":"hop_git","qualifiedName":"hop_git/hop_git","packageIntro":"<p><a href=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\"><img alt=\"Hop!\" src=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\"></img></a></p>\n<h1>hop_git</h1>\n<h2>Hop tasks for interacting with Git</h2>"},{"packageName":"hop_unittest","name":"hop_unittest","qualifiedName":"hop_unittest/hop_unittest","packageIntro":"<p><a href=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\"><img alt=\"Hop!\" src=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\"></img></a></p>\n<h1>hop_docgen</h1>\n<h2>Hop task for running unit tests based on <a href=\"http://pub.dartlang.org/packages/unittest\">unittest</a>.</h2>"},{"packageName":"http","name":"http","qualifiedName":"http/http","preview":"<p>A composable, <a>http/dart-async.Future</a>-based library for making HTTP requests.</p>","packageIntro":"<h1>http</h1>\n<p>A composable, Future-based library for making HTTP requests.</p>\n<p>This package contains a set of high-level functions and classes that make it\neasy to consume HTTP resources. It's platform-independent, and can be used on\nboth the command-line and the browser. Currently the global utility functions\nare unsupported on the browser; see \"Using on the Browser\" below.</p>\n<h2>Using</h2>\n<p>The easiest way to use this library is via the top-level functions, although\nthey currently only work on platforms where <code>dart:io</code> is available. They allow\nyou to make individual HTTP requests with minimal hassle:</p>\n<pre class=\"dart\"><code>import 'package:http/http.dart' as http;\n\nvar url = \"http://example.com/whatsit/create\";\nhttp.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n\nhttp.read(\"http://example.com/foobar.txt\").then(print);\n</code></pre>\n<p>If you're making multiple requests to the same server, you can keep open a\npersistent connection by using a <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> rather than making one-off requests.\nIf you do this, make sure to close the client when you're done:</p>\n<pre class=\"dart\"><code>var client = new http.Client();\nclient.post(\n    \"http://example.com/whatsit/create\",\n    body: {\"name\": \"doodle\", \"color\": \"blue\"})\n  .then((response) =&gt; client.get(response.bodyFields['uri']))\n  .then((response) =&gt; print(response.body))\n  .whenComplete(client.close);\n</code></pre>\n<p>You can also exert more fine-grained control over your requests and responses by\ncreating <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Request\">Request</a> or <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.StreamedRequest\">StreamedRequest</a> objects yourself and passing them to\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client#id_send\">Client.send</a>.</p>\n<p>This package is designed to be composable. This makes it easy for external\nlibraries to work with one another to add behavior to it. Libraries wishing to\nadd behavior should create a subclass of <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.BaseClient\">BaseClient</a> that wraps another\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> and adds the desired behavior:</p>\n<pre class=\"dart\"><code>class UserAgentClient extends http.BaseClient {\n  final String userAgent;\n  final http.Client _inner;\n\n  UserAgentClient(this.userAgent, this._inner);\n\n  Future&lt;StreamedResponse&gt; send(BaseRequest request) {\n    request.headers['user-agent'] = userAgent;\n    return _inner.send(request);\n  }\n}\n</code></pre>\n<h2>Using on the Browser</h2>\n<p>The HTTP library can be used on the browser via the [BrowserClient][] class in\n<code>package:http/browser_client.dart</code>. This client translates requests into\nXMLHttpRequests. For example:</p>\n<pre class=\"dart\"><code>import 'package:http/browser_client.dart';\nimport 'package:http/http.dart' as http;\n\nvar client = new BrowserClient();\nvar url = \"/whatsit/create\";\nclient.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n</code></pre>\n<h2>Filing issues</h2>\n<p>Please file issues for the http package at <a href=\"http://dartbug.com/new\">http://dartbug.com/new</a>.</p>"},{"packageName":"http","name":"http-browser_client","qualifiedName":"http/http-browser_client","packageIntro":"<h1>http</h1>\n<p>A composable, Future-based library for making HTTP requests.</p>\n<p>This package contains a set of high-level functions and classes that make it\neasy to consume HTTP resources. It's platform-independent, and can be used on\nboth the command-line and the browser. Currently the global utility functions\nare unsupported on the browser; see \"Using on the Browser\" below.</p>\n<h2>Using</h2>\n<p>The easiest way to use this library is via the top-level functions, although\nthey currently only work on platforms where <code>dart:io</code> is available. They allow\nyou to make individual HTTP requests with minimal hassle:</p>\n<pre class=\"dart\"><code>import 'package:http/http.dart' as http;\n\nvar url = \"http://example.com/whatsit/create\";\nhttp.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n\nhttp.read(\"http://example.com/foobar.txt\").then(print);\n</code></pre>\n<p>If you're making multiple requests to the same server, you can keep open a\npersistent connection by using a <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> rather than making one-off requests.\nIf you do this, make sure to close the client when you're done:</p>\n<pre class=\"dart\"><code>var client = new http.Client();\nclient.post(\n    \"http://example.com/whatsit/create\",\n    body: {\"name\": \"doodle\", \"color\": \"blue\"})\n  .then((response) =&gt; client.get(response.bodyFields['uri']))\n  .then((response) =&gt; print(response.body))\n  .whenComplete(client.close);\n</code></pre>\n<p>You can also exert more fine-grained control over your requests and responses by\ncreating <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Request\">Request</a> or <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.StreamedRequest\">StreamedRequest</a> objects yourself and passing them to\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client#id_send\">Client.send</a>.</p>\n<p>This package is designed to be composable. This makes it easy for external\nlibraries to work with one another to add behavior to it. Libraries wishing to\nadd behavior should create a subclass of <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.BaseClient\">BaseClient</a> that wraps another\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> and adds the desired behavior:</p>\n<pre class=\"dart\"><code>class UserAgentClient extends http.BaseClient {\n  final String userAgent;\n  final http.Client _inner;\n\n  UserAgentClient(this.userAgent, this._inner);\n\n  Future&lt;StreamedResponse&gt; send(BaseRequest request) {\n    request.headers['user-agent'] = userAgent;\n    return _inner.send(request);\n  }\n}\n</code></pre>\n<h2>Using on the Browser</h2>\n<p>The HTTP library can be used on the browser via the [BrowserClient][] class in\n<code>package:http/browser_client.dart</code>. This client translates requests into\nXMLHttpRequests. For example:</p>\n<pre class=\"dart\"><code>import 'package:http/browser_client.dart';\nimport 'package:http/http.dart' as http;\n\nvar client = new BrowserClient();\nvar url = \"/whatsit/create\";\nclient.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n</code></pre>\n<h2>Filing issues</h2>\n<p>Please file issues for the http package at <a href=\"http://dartbug.com/new\">http://dartbug.com/new</a>.</p>"},{"packageName":"http","name":"http-testing","qualifiedName":"http/http-testing","preview":"<p>This library contains testing classes for the HTTP library.</p>","packageIntro":"<h1>http</h1>\n<p>A composable, Future-based library for making HTTP requests.</p>\n<p>This package contains a set of high-level functions and classes that make it\neasy to consume HTTP resources. It's platform-independent, and can be used on\nboth the command-line and the browser. Currently the global utility functions\nare unsupported on the browser; see \"Using on the Browser\" below.</p>\n<h2>Using</h2>\n<p>The easiest way to use this library is via the top-level functions, although\nthey currently only work on platforms where <code>dart:io</code> is available. They allow\nyou to make individual HTTP requests with minimal hassle:</p>\n<pre class=\"dart\"><code>import 'package:http/http.dart' as http;\n\nvar url = \"http://example.com/whatsit/create\";\nhttp.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n\nhttp.read(\"http://example.com/foobar.txt\").then(print);\n</code></pre>\n<p>If you're making multiple requests to the same server, you can keep open a\npersistent connection by using a <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> rather than making one-off requests.\nIf you do this, make sure to close the client when you're done:</p>\n<pre class=\"dart\"><code>var client = new http.Client();\nclient.post(\n    \"http://example.com/whatsit/create\",\n    body: {\"name\": \"doodle\", \"color\": \"blue\"})\n  .then((response) =&gt; client.get(response.bodyFields['uri']))\n  .then((response) =&gt; print(response.body))\n  .whenComplete(client.close);\n</code></pre>\n<p>You can also exert more fine-grained control over your requests and responses by\ncreating <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Request\">Request</a> or <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.StreamedRequest\">StreamedRequest</a> objects yourself and passing them to\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client#id_send\">Client.send</a>.</p>\n<p>This package is designed to be composable. This makes it easy for external\nlibraries to work with one another to add behavior to it. Libraries wishing to\nadd behavior should create a subclass of <a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.BaseClient\">BaseClient</a> that wraps another\n<a href=\"https://api.dartlang.org/apidocs/channels/stable/dartdoc-viewer/http/http.Client\">Client</a> and adds the desired behavior:</p>\n<pre class=\"dart\"><code>class UserAgentClient extends http.BaseClient {\n  final String userAgent;\n  final http.Client _inner;\n\n  UserAgentClient(this.userAgent, this._inner);\n\n  Future&lt;StreamedResponse&gt; send(BaseRequest request) {\n    request.headers['user-agent'] = userAgent;\n    return _inner.send(request);\n  }\n}\n</code></pre>\n<h2>Using on the Browser</h2>\n<p>The HTTP library can be used on the browser via the [BrowserClient][] class in\n<code>package:http/browser_client.dart</code>. This client translates requests into\nXMLHttpRequests. For example:</p>\n<pre class=\"dart\"><code>import 'package:http/browser_client.dart';\nimport 'package:http/http.dart' as http;\n\nvar client = new BrowserClient();\nvar url = \"/whatsit/create\";\nclient.post(url, body: {\"name\": \"doodle\", \"color\": \"blue\"})\n    .then((response) {\n  print(\"Response status: ${response.statusCode}\");\n  print(\"Response body: ${response.body}\");\n});\n</code></pre>\n<h2>Filing issues</h2>\n<p>Please file issues for the http package at <a href=\"http://dartbug.com/new\">http://dartbug.com/new</a>.</p>"},{"packageName":"http_parser","name":"http_parser","qualifiedName":"http_parser/http_parser","packageIntro":"<p><code>http_parser</code> is a platform-independent package for parsing and serializing\nvarious HTTP-related formats. It's designed to be usable on both the browser and\nthe server, and thus avoids referencing any types from <code>dart:io</code> or <code>dart:html</code>.</p>"},{"packageName":"logging","name":"logging","qualifiedName":"logging/logging","preview":"<p>Support for logging.</p>","packageIntro":""},{"packageName":"matcher","name":"matcher","qualifiedName":"matcher/matcher","preview":"<p>Support for specifying test expectations, such as for unit tests.</p>","packageIntro":""},{"packageName":"matcher","name":"matcher-mirror_matchers","qualifiedName":"matcher/matcher-mirror_matchers","preview":"<p>The mirror matchers library provides some additional matchers that\nmake use of <code>dart:mirrors</code>.</p>","packageIntro":""},{"packageName":"path","name":"path","qualifiedName":"path/path","preview":"<p>A comprehensive, cross-platform path manipulation library.</p>","packageIntro":"<p>A comprehensive, cross-platform path manipulation library for Dart.</p>\n<p>The path package provides common operations for manipulating paths:\njoining, splitting, normalizing, etc.</p>\n<p>We've tried very hard to make this library do the \"right\" thing on whatever\nplatform you run it on, including in the browser. When you use the top-level\nfunctions, it will assume the current platform's path style and work with\nthat. If you want to explicitly work with paths of a specific style, you can\nconstruct a <code>path.Context</code> for that style.</p>\n<h2>Using</h2>\n<p>The path library was designed to be imported with a prefix, though you don't\nhave to if you don't want to:</p>\n<pre><code>import 'package:path/path.dart' as path;\n</code></pre>\n<p>The most common way to use the library is through the top-level functions.\nThese manipulate path strings based on your current working directory and\nthe path style (POSIX, Windows, or URLs) of the host platform. For example:</p>\n<pre><code>path.join(\"directory\", \"file.txt\");\n</code></pre>\n<p>This calls the top-level join function to join \"directory\" and\n\"file.txt\" using the current platform's directory separator.</p>\n<p>If you want to work with paths for a specific platform regardless of the\nunderlying platform that the program is running on, you can create a\nContext and give it an explicit Style:</p>\n<pre><code>var context = new path.Context(style: Style.windows);\ncontext.join(\"directory\", \"file.txt\");\n</code></pre>\n<p>This will join \"directory\" and \"file.txt\" using the Windows path separator,\neven when the program is run on a POSIX machine.</p>\n<h2>FAQ</h2>\n<h3>Where can I use this?</h3>\n<p>Pathos runs on the Dart VM and in the browser under both dart2js and Dartium.\nUnder dart2js, it currently returns \".\" as the current working directory, while\nunder Dartium it returns the current URL.</p>\n<h3>Why doesn't this make paths first-class objects?</h3>\n<p>When you have path <em>objects</em>, then every API that takes a path has to decide if\nit accepts strings, path objects, or both.</p><ul><li>\n<p>Accepting strings is the most convenient, but then it seems weird to have\nthese path objects that aren't actually accepted by anything that needs a\npath. Once you've created a path, you have to always call <code>.toString()</code> on\nit before you can do anything useful with it.</p></li><li>\n<p>Requiring objects forces users to wrap path strings in these objects, which\nis tedious. It also means coupling that API to whatever library defines this\npath class. If there are multiple \"path\" libraries that each define their\nown path types, then any library that works with paths has to pick which one\nit uses.</p></li><li>\n<p>Taking both means you can't type your API. That defeats the purpose of\nhaving a path type: why have a type if your APIs can't annotate that they\nexpect it?</p></li></ul>\n<p>Given that, we've decided this library should simply treat paths as strings.</p>\n<h3>How cross-platform is this?</h3>\n<p>We believe this library handles most of the corner cases of Windows paths\n(POSIX paths are generally pretty straightforward):</p><ul><li>\n<p>It understands that <em>both</em> \"/\" and \"\\\" are valid path separators, not just\n\"\\\".</p></li><li>\n<p>It can accurately tell if a path is absolute based on drive-letters or UNC\nprefix.</p></li><li>\n<p>It understands that \"/foo\" is not an absolute path on Windows.</p></li><li>\n<p>It knows that \"C:\\foo\\one.txt\" and \"c:/foo\\two.txt\" are two files in the\nsame directory.</p></li></ul>\n<h3>What is a \"path\" in the browser?</h3>\n<p>If you use this package in a browser, then it considers the \"platform\" to be\nthe browser itself and uses URL strings to represent \"browser paths\".</p>"},{"packageName":"scheduled_test","name":"scheduled_test","qualifiedName":"scheduled_test/scheduled_test","preview":"<p>A package for writing readable tests of asynchronous behavior.</p>","packageIntro":""},{"packageName":"scheduled_test","name":"scheduled_test-descriptor","qualifiedName":"scheduled_test/scheduled_test-descriptor","preview":"<p>A library for declaratively describing a filesystem structure, usually for\nthe purpose of creating or validating it as part of a scheduled test.</p>","packageIntro":""},{"packageName":"scheduled_test","name":"scheduled_test-scheduled_process","qualifiedName":"scheduled_test/scheduled_test-scheduled_process","packageIntro":""},{"packageName":"scheduled_test","name":"scheduled_test-scheduled_server","qualifiedName":"scheduled_test/scheduled_test-scheduled_server","packageIntro":""},{"packageName":"scheduled_test","name":"scheduled_test-scheduled_stream","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream","packageIntro":""},{"packageName":"shelf","name":"shelf","qualifiedName":"shelf/shelf","packageIntro":"<h2>Web Server Middleware for Dart</h2>\n<h2>Introduction</h2>\n<p><strong>Shelf</strong> makes it easy to create and compose <strong>web servers</strong> and <strong>parts of web\nservers</strong>. How?</p><ul><li>Expose a small set of simple types.</li><li>\n<p>Map server logic into a simple function: a single argument for the request,\nthe response is the return value.</p></li><li>Trivially mix and match synchronous and asynchronous processing.</li><li>Flexibliity to return a simple string or a byte stream with the same model.</li></ul>\n<h2>Example</h2>\n<p>See <code>example/example_server.dart</code></p>\n<pre class=\"dart\"><code>import 'package:shelf/shelf.dart' as shelf;\nimport 'package:shelf/shelf_io.dart' as io;\n\nvoid main() {\n  var handler = const shelf.Pipeline().addMiddleware(shelf.logRequests())\n      .addHandler(_echoRequest);\n\n  io.serve(handler, 'localhost', 8080).then((server) {\n    print('Serving at http://${server.address.host}:${server.port}');\n  });\n}\n\nshelf.Response _echoRequest(shelf.Request request) {\n  return new shelf.Response.ok('Request for \"${request.url}\"');\n}\n</code></pre>\n<h2>Handlers and Middleware</h2>\n<p>A <a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Handler\">handler</a> is any function that handles a <a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Request\">shelf.Request</a> and returns a\n<a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Response\">shelf.Response</a>. It can either handle the request itself--for example, a\nstatic file server that looks up the requested URI on the filesystem--or it can\ndo some processing and forward it to another handler--for example, a logger that\nprints information about requests and responses to the command line.</p>\n<p>The latter kind of handler is called \"<a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Middleware\">middleware</a>\", since it sits in the\nmiddle of the server stack. Middleware can be thought of as a function that\ntakes a handler and wraps it in another handler to provide additional\nfunctionality. A Shelf application is usually composed of many layers of\nmiddleware with one or more handlers at the very center; the <a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Pipeline\">shelf.Pipeline</a>\nclass makes this sort of application easy to construct.</p>\n<p>Some middleware can also take multiple handlers and call one or more of them for\neach request. For example, a routing middleware might choose which handler to\ncall based on the request's URI or HTTP method, while a cascading middleware\nmight call each one in sequence until one returns a successful response.</p>\n<h2>Adapters</h2>\n<p>An adapter is any code that creates <a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Request\">shelf.Request</a> objects, passes them to a\nhandler, and deals with the resulting <a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Response\">shelf.Response</a>. For the most part,\nadapters forward requests from and responses to an underlying HTTP server;\n<a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf-io#id_serve\">shelf_io.serve</a> is this sort of adapter. An adapter might also synthesize\nHTTP requests within the browser using <code>window.location</code> and <code>window.history</code>,\nor it might pipe requests directly from an HTTP client to a Shelf handler.</p>\n<p>When implementing an adapter, some rules must be followed. The adapter must not\npass the <code>url</code> or <code>scriptName</code> parameters to <a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Request#id_Request-\">new shelf.Request</a>; it should\nonly pass <code>requestedUri</code>. If it passes the <code>context</code> parameter, all keys must\nbegin with the adapter's package name followed by a period. If multiple headers\nwith the same name are received, the adapter must collapse them into a single\nheader separated by commas as per <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html\">RFC 2616 section 4.2</a>.</p>\n<p>An adapter must handle all errors from the handler, including the handler\nreturning a <code>null</code> response. It should print each error to the console if\npossible, then act as though the handler returned a 500 response. The adapter\nmay include body data for the 500 response, but this body data must not include\ninformation about the error that occurred. This ensures that unexpected errors\ndon't result in exposing internal information in production by default; if the\nuser wants to return detailed error descriptions, they should explicitly include\nmiddleware to do so.</p>\n<p>An adapter should include information about itself in the Server header of the\nresponse by default. If the handler returns a response with the Server header\nset, that must take precedence over the adapter's default header.</p>\n<p>An adapter should ensure that asynchronous errors thrown by the handler don't\ncause the application to crash, even if they aren't reported by the future\nchain. Specifically, these errors shouldn't be passed to the root zone's error\nhandler; however, if the adapter is run within another error zone, it should\nallow these errors to be passed to that zone. The following function can be used\nto capture only errors that would otherwise be top-leveled:</p>\n<pre class=\"dart\"><code>/// Run [callback] and capture any errors that would otherwise be top-leveled.\n///\n/// If [this] is called in a non-root error zone, it will just run [callback]\n/// and return the result. Otherwise, it will capture any errors using\n/// [runZoned] and pass them to [onError].\ncatchTopLevelErrors(callback(), void onError(error, StackTrace stackTrace)) {\n  if (Zone.current.inSameErrorZone(Zone.ROOT)) {\n    return runZoned(callback, onError: onError);\n  } else {\n    return callback();\n  }\n}\n</code></pre>\n<h2>Inspiration</h2><ul><li>\n<p><a href=\"http://www.senchalabs.org/connect/\">Connect</a> for NodeJS.\n* Read <a href=\"http://howtonode.org/connect-it\">this great write-up</a> to understand\n  the overall philosophy of all of these models.</p></li><li><a href=\"http://rack.github.io/\">Rack</a> for Ruby.</li><li><a href=\"http://legacy.python.org/dev/peps/pep-3333/\">WSGI</a> for Python.</li></ul>"},{"packageName":"shelf","name":"shelf-io","qualifiedName":"shelf/shelf-io","preview":"<p>A Shelf adapter for handling <a>shelf/dart-io.HttpRequest</a> objects from <code>dart:io</code>.</p>","packageIntro":"<h2>Web Server Middleware for Dart</h2>\n<h2>Introduction</h2>\n<p><strong>Shelf</strong> makes it easy to create and compose <strong>web servers</strong> and <strong>parts of web\nservers</strong>. How?</p><ul><li>Expose a small set of simple types.</li><li>\n<p>Map server logic into a simple function: a single argument for the request,\nthe response is the return value.</p></li><li>Trivially mix and match synchronous and asynchronous processing.</li><li>Flexibliity to return a simple string or a byte stream with the same model.</li></ul>\n<h2>Example</h2>\n<p>See <code>example/example_server.dart</code></p>\n<pre class=\"dart\"><code>import 'package:shelf/shelf.dart' as shelf;\nimport 'package:shelf/shelf_io.dart' as io;\n\nvoid main() {\n  var handler = const shelf.Pipeline().addMiddleware(shelf.logRequests())\n      .addHandler(_echoRequest);\n\n  io.serve(handler, 'localhost', 8080).then((server) {\n    print('Serving at http://${server.address.host}:${server.port}');\n  });\n}\n\nshelf.Response _echoRequest(shelf.Request request) {\n  return new shelf.Response.ok('Request for \"${request.url}\"');\n}\n</code></pre>\n<h2>Handlers and Middleware</h2>\n<p>A <a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Handler\">handler</a> is any function that handles a <a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Request\">shelf.Request</a> and returns a\n<a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Response\">shelf.Response</a>. It can either handle the request itself--for example, a\nstatic file server that looks up the requested URI on the filesystem--or it can\ndo some processing and forward it to another handler--for example, a logger that\nprints information about requests and responses to the command line.</p>\n<p>The latter kind of handler is called \"<a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Middleware\">middleware</a>\", since it sits in the\nmiddle of the server stack. Middleware can be thought of as a function that\ntakes a handler and wraps it in another handler to provide additional\nfunctionality. A Shelf application is usually composed of many layers of\nmiddleware with one or more handlers at the very center; the <a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Pipeline\">shelf.Pipeline</a>\nclass makes this sort of application easy to construct.</p>\n<p>Some middleware can also take multiple handlers and call one or more of them for\neach request. For example, a routing middleware might choose which handler to\ncall based on the request's URI or HTTP method, while a cascading middleware\nmight call each one in sequence until one returns a successful response.</p>\n<h2>Adapters</h2>\n<p>An adapter is any code that creates <a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Request\">shelf.Request</a> objects, passes them to a\nhandler, and deals with the resulting <a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Response\">shelf.Response</a>. For the most part,\nadapters forward requests from and responses to an underlying HTTP server;\n<a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf-io#id_serve\">shelf_io.serve</a> is this sort of adapter. An adapter might also synthesize\nHTTP requests within the browser using <code>window.location</code> and <code>window.history</code>,\nor it might pipe requests directly from an HTTP client to a Shelf handler.</p>\n<p>When implementing an adapter, some rules must be followed. The adapter must not\npass the <code>url</code> or <code>scriptName</code> parameters to <a href=\"https://api.dartlang.org/apidocs/channels/be/dartdoc-viewer/shelf/shelf.Request#id_Request-\">new shelf.Request</a>; it should\nonly pass <code>requestedUri</code>. If it passes the <code>context</code> parameter, all keys must\nbegin with the adapter's package name followed by a period. If multiple headers\nwith the same name are received, the adapter must collapse them into a single\nheader separated by commas as per <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html\">RFC 2616 section 4.2</a>.</p>\n<p>An adapter must handle all errors from the handler, including the handler\nreturning a <code>null</code> response. It should print each error to the console if\npossible, then act as though the handler returned a 500 response. The adapter\nmay include body data for the 500 response, but this body data must not include\ninformation about the error that occurred. This ensures that unexpected errors\ndon't result in exposing internal information in production by default; if the\nuser wants to return detailed error descriptions, they should explicitly include\nmiddleware to do so.</p>\n<p>An adapter should include information about itself in the Server header of the\nresponse by default. If the handler returns a response with the Server header\nset, that must take precedence over the adapter's default header.</p>\n<p>An adapter should ensure that asynchronous errors thrown by the handler don't\ncause the application to crash, even if they aren't reported by the future\nchain. Specifically, these errors shouldn't be passed to the root zone's error\nhandler; however, if the adapter is run within another error zone, it should\nallow these errors to be passed to that zone. The following function can be used\nto capture only errors that would otherwise be top-leveled:</p>\n<pre class=\"dart\"><code>/// Run [callback] and capture any errors that would otherwise be top-leveled.\n///\n/// If [this] is called in a non-root error zone, it will just run [callback]\n/// and return the result. Otherwise, it will capture any errors using\n/// [runZoned] and pass them to [onError].\ncatchTopLevelErrors(callback(), void onError(error, StackTrace stackTrace)) {\n  if (Zone.current.inSameErrorZone(Zone.ROOT)) {\n    return runZoned(callback, onError: onError);\n  } else {\n    return callback();\n  }\n}\n</code></pre>\n<h2>Inspiration</h2><ul><li>\n<p><a href=\"http://www.senchalabs.org/connect/\">Connect</a> for NodeJS.\n* Read <a href=\"http://howtonode.org/connect-it\">this great write-up</a> to understand\n  the overall philosophy of all of these models.</p></li><li><a href=\"http://rack.github.io/\">Rack</a> for Ruby.</li><li><a href=\"http://legacy.python.org/dev/peps/pep-3333/\">WSGI</a> for Python.</li></ul>"},{"packageName":"stack_trace","name":"stack_trace","qualifiedName":"stack_trace/stack_trace","preview":"<p>Stack trace generation and parsing.</p>","packageIntro":"<p>This library provides the ability to parse, inspect, and manipulate stack traces\nproduced by the underlying Dart implementation. It also provides functions to\nproduce string representations of stack traces in a more readable format than\nthe native <a>dart-core</a> implementation.</p>\n<p><code>Trace</code>s can be parsed from native <a>dart-core</a>s using <code>Trace.from</code>, or captured\nusing <code>Trace.current</code>. Native <a>dart-core</a>s can also be directly converted to\nhuman-readable strings using <code>Trace.format</code>.</p>\n<p>Here's an example native stack trace from debugging this library:</p>\n<pre><code>#0      Object.noSuchMethod (dart:core-patch:1884:25)\n#1      Trace.terse.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/src/trace.dart:47:21)\n#2      IterableMixinWorkaround.reduce (dart:collection:29:29)\n#3      List.reduce (dart:core-patch:1247:42)\n#4      Trace.terse (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/src/trace.dart:40:35)\n#5      format (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/stack_trace.dart:24:28)\n#6      main.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/test.dart:21:29)\n#7      _CatchErrorFuture._sendError (dart:async:525:24)\n#8      _FutureImpl._setErrorWithoutAsyncTrace (dart:async:393:26)\n#9      _FutureImpl._setError (dart:async:378:31)\n#10     _ThenFuture._sendValue (dart:async:490:16)\n#11     _FutureImpl._handleValue.&lt;anonymous closure&gt; (dart:async:349:28)\n#12     Timer.run.&lt;anonymous closure&gt; (dart:async:2402:21)\n#13     Timer.Timer.&lt;anonymous closure&gt; (dart:async-patch:15:15)\n</code></pre>\n<p>and its human-readable representation:</p>\n<pre><code>dart:core-patch                             Object.noSuchMethod\npkg/stack_trace/lib/src/trace.dart 47:21    Trace.terse.&lt;fn&gt;\ndart:collection                             IterableMixinWorkaround.reduce\ndart:core-patch                             List.reduce\npkg/stack_trace/lib/src/trace.dart 40:35    Trace.terse\npkg/stack_trace/lib/stack_trace.dart 24:28  format\ntest.dart 21:29                             main.&lt;fn&gt;\ndart:async                                  _CatchErrorFuture._sendError\ndart:async                                  _FutureImpl._setErrorWithoutAsyncTrace\ndart:async                                  _FutureImpl._setError\ndart:async                                  _ThenFuture._sendValue\ndart:async                                  _FutureImpl._handleValue.&lt;fn&gt;\ndart:async                                  Timer.run.&lt;fn&gt;\ndart:async-patch                            Timer.Timer.&lt;fn&gt;\n</code></pre>\n<p>You can further clean up the stack trace using <code>Trace.terse</code>. This folds\ntogether multiple stack frames from the Dart core libraries, so that only the\ncore library method that was directly called from user code is visible. For\nexample:</p>\n<pre><code>dart:core                                   Object.noSuchMethod\npkg/stack_trace/lib/src/trace.dart 47:21    Trace.terse.&lt;fn&gt;\ndart:core                                   List.reduce\npkg/stack_trace/lib/src/trace.dart 40:35    Trace.terse\npkg/stack_trace/lib/stack_trace.dart 24:28  format\ntest.dart 21:29                             main.&lt;fn&gt;\ndart:async                                  Timer.Timer.&lt;fn&gt;\n</code></pre>\n<h2>Stack Chains</h2>\n<p>This library also provides the ability to capture \"stack chains\" with the\n<code>Chain</code> class. When writing asynchronous code, a single stack trace isn't very\nuseful, since the call stack is unwound every time something async happens. A\nstack chain tracks stack traces through asynchronous calls, so that you can see\nthe full path from <code>main</code> down to the error.</p>\n<p>To use stack chains, just wrap the code that you want to track in\n<code>Chain.capture</code>. This will create a new <a href=\"https://api.dartlang.org/apidocs/channels/stable/#dart-async.Zone\">Zone</a> in which stack traces are\nrecorded and woven into chains every time an asynchronous call occurs. Zones are\nsticky, too, so any asynchronous operations started in the <code>Chain.capture</code>\ncallback will have their chains tracked, as will asynchronous operations they\nstart and so on.</p>\n<p>Here's an example of some code that doesn't capture its stack chains:</p>\n<pre class=\"dart\"><code>import 'dart:async';\n\nvoid main() {\n  scheduleAsync();\n}\n\nvoid scheduleAsync() {\n  return new Future.delayed(new Duration(seconds: 1))\n      .then((_) =&gt; runAsync());\n}\n\nvoid runAsync() {\n  throw 'oh no!';\n}\n</code></pre>\n<p>If we run this, it prints the following:</p>\n<pre><code>Uncaught Error: oh no!\nStack Trace: \n#0      runAsync (file:///usr/local/google-old/home/goog/dart/dart/test.dart:13:3)\n#1      scheduleAsync.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/test.dart:9:28)\n#2      _rootRunUnary (dart:async/zone.dart:717)\n#3      _RootZone.runUnary (dart:async/zone.dart:854)\n#4      _Future._propagateToListeners.handleValueCallback (dart:async/future_impl.dart:488)\n#5      _Future._propagateToListeners (dart:async/future_impl.dart:571)\n#6      _Future._complete (dart:async/future_impl.dart:317)\n#7      _SyncCompleter.complete (dart:async/future_impl.dart:44)\n#8      Future.Future.delayed.&lt;anonymous closure&gt; (dart:async/future.dart:219)\n#9      _createTimer.&lt;anonymous closure&gt; (dart:async-patch/timer_patch.dart:11)\n#10     _handleTimeout (dart:io/timer_impl.dart:292)\n#11     _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:115)\n</code></pre>\n<p>Notice how there's no mention of <code>main</code> in that stack trace. All we know is that\nthe error was in <code>runAsync</code>; we don't know why <code>runAsync</code> was called.</p>\n<p>Now let's look at the same code with stack chains captured:</p>\n<pre class=\"dart\"><code>import 'dart:async';\n\nimport 'package:stack_trace/stack_trace.dart';\n\nvoid main() {\n  Chain.capture(() {\n    scheduleAsync();\n  });\n}\n\nvoid scheduleAsync() {\n  new Future.delayed(new Duration(seconds: 1))\n      .then((_) =&gt; runAsync());\n}\n\nvoid runAsync() {\n  throw 'oh no!';\n}\n</code></pre>\n<p>Now if we run it, it prints this:</p>\n<pre><code>Uncaught Error: oh no!\nStack Trace: \ntest.dart 17:3                                                runAsync\ntest.dart 13:28                                               scheduleAsync.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 129:26  registerUnaryCallback.&lt;fn&gt;.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 174:15  StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 177:7   StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 175:7   StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 129:18  registerUnaryCallback.&lt;fn&gt;\ndart:async/zone.dart 717                                      _rootRunUnary\ndart:async/zone.dart 449                                      _ZoneDelegate.runUnary\ndart:async/zone.dart 654                                      _CustomizedZone.runUnary\ndart:async/future_impl.dart 488                               _Future._propagateToListeners.handleValueCallback\ndart:async/future_impl.dart 571                               _Future._propagateToListeners\ndart:async/future_impl.dart 317                               _Future._complete\ndart:async/future_impl.dart 44                                _SyncCompleter.complete\ndart:async/future.dart 219                                    Future.Future.delayed.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 174:15  StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 119:52  registerCallback.&lt;fn&gt;\ndart:async/zone.dart 706                                      _rootRun\ndart:async/zone.dart 440                                      _ZoneDelegate.run\ndart:async/zone.dart 650                                      _CustomizedZone.run\ndart:async/zone.dart 561                                      _BaseZone.runGuarded\ndart:async/zone.dart 586                                      _BaseZone.bindCallback.&lt;fn&gt;\npackage:stack_trace/src/stack_zone_specification.dart 174:15  StackZoneSpecification._run\npackage:stack_trace/src/stack_zone_specification.dart 119:52  registerCallback.&lt;fn&gt;\ndart:async/zone.dart 710                                      _rootRun\ndart:async/zone.dart 440                                      _ZoneDelegate.run\ndart:async/zone.dart 650                                      _CustomizedZone.run\ndart:async/zone.dart 561                                      _BaseZone.runGuarded\ndart:async/zone.dart 586                                      _BaseZone.bindCallback.&lt;fn&gt;\ndart:async-patch/timer_patch.dart 11                          _createTimer.&lt;fn&gt;\ndart:io/timer_impl.dart 292                                   _handleTimeout\ndart:isolate-patch/isolate_patch.dart 115                     _RawReceivePortImpl._handleMessage\n===== asynchronous gap ===========================\ndart:async/zone.dart 476                   _ZoneDelegate.registerUnaryCallback\ndart:async/zone.dart 666                   _CustomizedZone.registerUnaryCallback\ndart:async/future_impl.dart 164            _Future._Future._then\ndart:async/future_impl.dart 187            _Future.then\ntest.dart 13:12                            scheduleAsync\ntest.dart 7:18                             main.&lt;fn&gt;\ndart:async/zone.dart 710                   _rootRun\ndart:async/zone.dart 440                   _ZoneDelegate.run\ndart:async/zone.dart 650                   _CustomizedZone.run\ndart:async/zone.dart 944                   runZoned\npackage:stack_trace/src/chain.dart 93:20   Chain.capture\ntest.dart 6:16                             main\ndart:isolate-patch/isolate_patch.dart 216  _startIsolate.isolateStartHandler\ndart:isolate-patch/isolate_patch.dart 115  _RawReceivePortImpl._handleMessage\n</code></pre>\n<p>That's a lot of text! If you look closely, though, you can see that <code>main</code> is\nlisted in the first trace in the chain.</p>\n<p>Thankfully, you can call <code>Chain.terse</code> just like <code>Trace.terse</code> to get rid of all\nthe frames you don't care about. The terse version of the stack chain above is\nthis:</p>\n<pre><code>test.dart 17:3   runAsync\ntest.dart 13:28  scheduleAsync.&lt;fn&gt;\ndart:isolate     _RawReceivePortImpl._handleMessage\n===== asynchronous gap ===========================\ndart:async                                _Future.then\ntest.dart 13:12                           scheduleAsync\ntest.dart 7:18                            main.&lt;fn&gt;\npackage:stack_trace/src/chain.dart 93:20  Chain.capture\ntest.dart 6:16                            main\ndart:isolate                              _RawReceivePortImpl._handleMessage\n</code></pre>\n<p>That's a lot easier to understand!</p>\n<h3><code>Chain.track</code></h3>\n<p>For the most part <code>Chain.capture</code> will notice when an error is thrown and\nassociate the correct stack chain with it. However, there are some cases where\nexceptions won't be automatically detected: any <code>Future</code> constructor,\n<code>Completer.completeError</code>, <code>Stream.addError</code>, and libraries that use these such\nas <code>dart:io</code> and <code>dart:async</code>. For these, all you need to do is wrap the Future\nor Stream in a call to <code>Chain.track</code> and the errors will be tracked correctly.</p>"},{"packageName":"string_scanner","name":"string_scanner","qualifiedName":"string_scanner/string_scanner","preview":"<p>A library for parsing strings using a sequence of patterns.</p>","packageIntro":"<p>This package exposes a <code>StringScanner</code> type that makes it easy to parse a string\nusing a series of <code>Pattern</code>s. For example:</p>\n<pre class=\"dart\"><code>import 'dart:math';\n\nimport 'package:string_scanner/string_scanner.dart';\n\nnum parseNumber(String source) {\n  // Scan a number (\"1\", \"1.5\", \"-3\").\n  var scanner = new StringScanner(source);\n\n  // [Scanner.scan] tries to consume a [Pattern] and returns whether or not it\n  // succeeded. It will move the scan pointer past the end of the pattern.\n  var negative = scanner.scan(\"-\");\n\n  // [Scanner.expect] consumes a [Pattern] and throws a [FormatError] if it\n  // fails. Like [Scanner.scan], it will move the scan pointer forward.\n  scanner.expect(new RegExp(r\"\\d+\"));\n\n  // [Scanner.lastMatch] holds the [MatchData] for the most recent call to\n  // [Scanner.scan], [Scanner.expect], or [Scanner.matches].\n  var number = int.parse(scanner.lastMatch[0]);\n\n  if (scanner.scan(\".\")) {\n    scanner.expect(new RegExp(r\"\\d+\"));\n    var decimal = scanner.lastMatch[0];\n    number += int.parse(decimal) / math.pow(10, decimal.length);\n  }\n\n  // [Scanner.expectDone] will throw a [FormatError] if there's any input that\n  // hasn't yet been consumed.\n  scanner.expectDone();\n\n  return (negative ? -1 : 1) * number;\n}\n</code></pre>"},{"packageName":"unittest","name":"unittest","qualifiedName":"unittest/unittest","preview":"<p>Support for writing Dart unit tests.</p>","packageIntro":""},{"packageName":"unittest","name":"unittest-compact_vm_config","qualifiedName":"unittest/unittest-compact_vm_config","preview":"<p>A test configuration that generates a compact 1-line progress bar. The bar\nis updated in-place before and after each test is executed. If all tests\npass, only a couple of lines are printed in the terminal. If a test fails,\nthe failure is shown and the progress bar continues to be updated below it.</p>","packageIntro":""},{"packageName":"unittest","name":"unittest-html_config","qualifiedName":"unittest/unittest-html_config","preview":"<p>A simple unit test library for running tests in a browser.</p>","packageIntro":""},{"packageName":"unittest","name":"unittest-html_enhanced_config","qualifiedName":"unittest/unittest-html_enhanced_config","preview":"<p>A simple unit test library for running tests in a browser.</p>","packageIntro":""},{"packageName":"unittest","name":"unittest-html_individual_config","qualifiedName":"unittest/unittest-html_individual_config","preview":"<p>A unit test library for running groups of tests in a browser, instead of the\nentire test file. This is especially used for large tests files that have\nmany subtests, so we can mark groups as failing at a finer granularity than\nthe entire test file.</p>","packageIntro":""},{"packageName":"unittest","name":"unittest-vm_config","qualifiedName":"unittest/unittest-vm_config","preview":"<p>A simple unit test library for running tests on the VM.</p>","packageIntro":""}],"introduction":"","filetype":"json","start-page":"hop_docgen"}