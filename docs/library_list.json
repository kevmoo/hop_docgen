{"libraries":[{"name":"dart-core","qualifiedName":"dart-core","preview":"<p>Built-in types, collections,\nand other core functionality for every Dart program.</p>","packageName":""},{"name":"hop_docgen","qualifiedName":"hop_docgen/hop_docgen","packageName":"hop_docgen","packageIntro":"<p>!<a href=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\">Hop!</a></p>\n<h1>hop_docgen</h1>\n<h2>Hop task for creating, publishing, and updating documentation for your Dart project</h2>"},{"name":"args","qualifiedName":"args/args","preview":"<p>Parser support for transforming raw command-line arguments into a set\nof options and values.</p>","packageName":"args","packageIntro":""},{"name":"bot","qualifiedName":"bot/bot","packageName":"bot","packageIntro":"<p>!<a href=\"https://raw.github.com/kevmoo/bot.dart/master/resource/logo.png\">BOT!</a></p>\n<h1>The Dart Bag-of-Tricks</h1>\n<h2>A collection of (mostly) general libraries to make working with <a href=\"http://www.dartlang.org/\">Dart</a> more productive.</h2>\n<p>Starting by porting bits of the <a href=\"https://github.com/thinkpixellab/pl\">PL javascript library</a> and Google's <a href=\"https://developers.google.com/closure/library/\">Closure javascript library</a> to enable some interesting scenarios.</p>\n<p><a href=\"https://drone.io/kevmoo/bot.dart/latest\">!<a href=\"https://drone.io/kevmoo/bot.dart/status.png\"></a></a></p>\n<h1>Projects using BOT</h1><ul><li><a href=\"https://github.com/dart-gde/chrome.dart\">chrome.dart</a> - Dart interop with chrome.* APIs for Chrome Packaged Apps</li><li><a href=\"https://github.com/dart-lang/pop-pop-win\">Pop, Pop, Win!</a> - Minesweeper with balloons</li><li><a href=\"https://github.com/kevmoo/qr.dart\">qr.dart</a> - Generate QR codes</li><li><a href=\"https://github.com/kevmoo/vote.dart\">vote.dart</a> - Simulate, run, and calculate elections with different election methods</li><li><a href=\"https://github.com/kevmoo/widget.dart\">Dart Widgets</a> - Reusable Web Components</li></ul>\n<h1>Try It Now</h1>\n<p>The <strong>Dart Bag-of-Tricks</strong> ( <strong>BOT</strong> ) is hosted on <a href=\"http://pub.dartlang.org/packages/bot\">pub.dartlang.org</a>. Add the <strong>BOT</strong> package to your <code>pubspec.yaml</code> file, selecting a version range that works with your version of the SDK. <em>Always check the <a href=\"http://pub.dartlang.org/packages/bot\">BOT page</a> on pub to find the latest release.</em></p>\n<p>See the <a href=\"https://github.com/kevmoo/bot.dart/blob/master/changelog.md\">changelog</a> to find the version that works best for you.</p>\n<p>If you'd like to track bleeding edge developments, you can reference the the <a href=\"https://github.com/kevmoo/bot.dart\">GitHub repository</a> directly:</p>\n<pre><code>dependencies:\n  bot:\n    git: https://github.com/kevmoo/bot.dart.git\n</code></pre>\n<h1>Versioning</h1><ul><li>We follow <a href=\"http://semver.org/\">Semantic Versioning</a>.</li><li>\n<p>We are not planning a V1 for <strong>BOT</strong> until Dart releases V1.\n<em> In the mean time, the version will remain <code>0.Y.Z</code>.\n</em> Changes to the <em>minor</em> version - Y - will indicate breaking changes.\n* Changes to the <em>patch</em> version - Z - indicate non-breaking changes.</p></li></ul>\n<h1>Dart SDK dependency</h1><ul><li>We're going to try to keep <strong>BOT</strong> in line with the <a href=\"https://gsdview.appspot.com/dart-editor-archive-integration/latest/\">latest integration build</a> of the Dart SDK and Editor.</li><li>At this point, each SDK release tends to introduce breaking changes, which usually require breaking changes in <strong>BOT</strong>.</li><li>Keep an eye on the <a href=\"https://github.com/kevmoo/bot.dart/blob/master/changelog.md\">changelog</a> to see how <strong>BOT</strong> aligns with each SDK release.</li></ul>\n<h1>The libraries</h1>\n<h2>bot -- default library</h2><ul><li>No dependencies on 3rd-party libraries.</li><li>Usable for browser-based projects and non-browser projects.</li></ul>\n<h3>attached</h3><ul><li>\n<p>A general model for supporting extensible, runtime-defined events and\n   properties on supported objects.</p></li><li>\n<p>This functionality is inspired by the Dependency Object/Property model\n   in WPF/Silverlight.</p></li></ul>\n<h3>collection</h3><ul><li><code>Array2d</code></li><li><code>Grouping</code> of collections</li><li><code>ReadOnlyCollection</code></li></ul>\n<h3>color</h3><ul><li><code>RgbColor</code>, <code>HslColor</code> with associated conversions back and forth</li><li><code>RgbColor</code> supports to/from hex</li></ul>\n<h3>events</h3><ul><li>Easily raise and subscribe to events with custom, type-safe event objects.</li></ul>\n<h3>math</h3><ul><li>Mostly classes related to 2D geometry and graphicsgeometry-related classes</li><li><code>Coordinate</code>, <code>Box</code>, <code>Size</code>, <code>Vector</code>, <code>AffineTransfrom</code></li></ul>\n<h2>bot_async</h2><ul><li><code>FutureValue</code>: an abstract model for async conversions via <code>Future&lt;T&gt;</code></li><li><code>SendPortValue</code>: an implementation of <code>FutureValue</code> using isolates.</li></ul>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><a href=\"https://github.com/eskimoblood\">Andreas KÃ¶berle</a> (<a href=\"https://twitter.com/eskimobloood\">@eskimobloood</a>)</li><li><em>You? File bugs. Fork and Fix bugs. Let's build this community.</em></li></ul>"},{"name":"bot_git","qualifiedName":"bot_io/bot_git","packageName":"bot_io","packageIntro":"<p>!<a href=\"https://raw.github.com/kevmoo/bot_io.dart/master/resource/logo.png\">BOT!</a></p>\n<h1>bot_io</h1>\n<h2>A collection of helpers related to the file system.</h2>\n<p><a href=\"https://drone.io/github.com/kevmoo/bot_io.dart/latest\">!<a href=\"https://drone.io/github.com/kevmoo/bot_io.dart/status.png\">Build Status</a></a></p>\n<h1>Projects using bot_io</h1><ul><li><a href=\"https://github.com/kevmoo/hop.dart\">Hop: Dark Task Framework</a></li></ul>\n<h1>Versioning</h1><ul><li>We follow <a href=\"http://semver.org/\">Semantic Versioning</a>.</li><li>\n<p>We are not planning a V1 for <strong>bot_io</strong> until Dart releases V1.\n<em> In the mean time, the version will remain <code>0.Y.Z</code>.\n</em> Changes to the <em>minor</em> version - Y - will indicate breaking changes.\n* Changes to the <em>patch</em> version - Z - indicate non-breaking changes.</p></li></ul>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><em>You? File bugs. Fork and Fix bugs. Send pull requests.</em></li></ul>"},{"name":"bot_io","qualifiedName":"bot_io/bot_io","packageName":"bot_io","packageIntro":"<p>!<a href=\"https://raw.github.com/kevmoo/bot_io.dart/master/resource/logo.png\">BOT!</a></p>\n<h1>bot_io</h1>\n<h2>A collection of helpers related to the file system.</h2>\n<p><a href=\"https://drone.io/github.com/kevmoo/bot_io.dart/latest\">!<a href=\"https://drone.io/github.com/kevmoo/bot_io.dart/status.png\">Build Status</a></a></p>\n<h1>Projects using bot_io</h1><ul><li><a href=\"https://github.com/kevmoo/hop.dart\">Hop: Dark Task Framework</a></li></ul>\n<h1>Versioning</h1><ul><li>We follow <a href=\"http://semver.org/\">Semantic Versioning</a>.</li><li>\n<p>We are not planning a V1 for <strong>bot_io</strong> until Dart releases V1.\n<em> In the mean time, the version will remain <code>0.Y.Z</code>.\n</em> Changes to the <em>minor</em> version - Y - will indicate breaking changes.\n* Changes to the <em>patch</em> version - Z - indicate non-breaking changes.</p></li></ul>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><em>You? File bugs. Fork and Fix bugs. Send pull requests.</em></li></ul>"},{"name":"completion","qualifiedName":"bot_io/completion","preview":"<p>Use the <code>completion</code> package instead.</p>","packageName":"bot_io","packageIntro":"<p>!<a href=\"https://raw.github.com/kevmoo/bot_io.dart/master/resource/logo.png\">BOT!</a></p>\n<h1>bot_io</h1>\n<h2>A collection of helpers related to the file system.</h2>\n<p><a href=\"https://drone.io/github.com/kevmoo/bot_io.dart/latest\">!<a href=\"https://drone.io/github.com/kevmoo/bot_io.dart/status.png\">Build Status</a></a></p>\n<h1>Projects using bot_io</h1><ul><li><a href=\"https://github.com/kevmoo/hop.dart\">Hop: Dark Task Framework</a></li></ul>\n<h1>Versioning</h1><ul><li>We follow <a href=\"http://semver.org/\">Semantic Versioning</a>.</li><li>\n<p>We are not planning a V1 for <strong>bot_io</strong> until Dart releases V1.\n<em> In the mean time, the version will remain <code>0.Y.Z</code>.\n</em> Changes to the <em>minor</em> version - Y - will indicate breaking changes.\n* Changes to the <em>patch</em> version - Z - indicate non-breaking changes.</p></li></ul>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><em>You? File bugs. Fork and Fix bugs. Send pull requests.</em></li></ul>"},{"name":"dart-pkg-collection-algorithms","qualifiedName":"collection/dart-pkg-collection-algorithms","preview":"<p>Operations on collections.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection","qualifiedName":"collection/dart-pkg-collection","preview":"<p>Exports all the individual parts of the collection-helper library.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection-equality","qualifiedName":"collection/dart-pkg-collection-equality","preview":"<p>Defines equality relations on collections.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection-iterable_zip","qualifiedName":"collection/dart-pkg-collection-iterable_zip","preview":"<p>Zipping multiple iterables into one iterable of tuples of values.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection-priority_queue","qualifiedName":"collection/dart-pkg-collection-priority_queue","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"dart-pkg-collection-wrappers","qualifiedName":"collection/dart-pkg-collection-wrappers","preview":"<p>Delegating wrappers for <a>dart-core.Iterable</a>, <a>dart-core.List</a>, <a>dart-core.Set</a>, <a>collection/dart-pkg-collection-wrappers.Queue</a> and <a>dart-core.Map</a>.</p>","packageName":"collection","packageIntro":"<p>Helper libraries for working with collections.</p>\n<p>The <code>collection</code> package contains a number of separate libraries\nwith utility functions and classes that makes working with collections easier.</p>\n<h2>Using</h2>\n<p>The <code>collection</code> package can be imported as separate libraries, or\nin totality:</p>\n<pre><code>import 'package:collection/algorithms.dart';\nimport 'package:collection/equality.dart';\nimport 'package:collection/iterable_zip.dart';\nimport 'package:collection/priority_queue.dart';\nimport 'package:collection/wrappers.dart';\n</code></pre>\n<p>or</p>\n<pre><code>import 'package:collection/collection.dart';\n</code></pre>\n<h2>Algorithms</h2>\n<p>The algorithms library contains functions that operate on lists.</p>\n<p>It contains ways to shuffle a <code>List</code>, do binary search on a sorted <code>List</code>, and\nvarious sorting algorithms.</p>\n<h2>Equality</h2>\n<p>The equality library gives a way to specify equality of elements and\ncollections.</p>\n<p>Collections in Dart have no inherent equality. Two sets are not equal, even\nif they contain exactly the same objects as elements.</p>\n<p>The equality library provides a way to say define such an equality. In this\ncase, for example, <code>const SetEquality(const IdentityEquality())</code> is an equality\nthat considers two sets equal exactly if they contain identical elements.</p>\n<p>The library provides ways to define equalities on <code>Iterable</code>s, <code>List</code>s, <code>Set</code>s,\nand <code>Map</code>s, as well as combinations of these, such as:</p>\n<pre><code>const MapEquality(const IdentityEquality(), const ListEquality());\n</code></pre>\n<p>This equality considers maps equal if they have identical keys, and the\ncorresponding values are lists with equal (<code>operator==</code>) values.</p>\n<h2>Iterable Zip</h2>\n<p>Utilities for \"zipping\" a list of iterables into an iterable of lists.</p>\n<h2>Priority Queue</h2>\n<p>An interface and implemention of a priority queue.</p>\n<h2>Wrappers</h2>\n<p>The wrappers library contains classes that \"wrap\" a collection.</p>\n<p>A wrapper class contains an object of the same type, and it forwards all\nmethods to the wrapped object.</p>\n<p>Wrapper classes can be used in various ways, for example to restrict the type\nof an object to that of a supertype, or to change the behavior of selected\nfunctions on an existing object.</p>"},{"name":"crypto","qualifiedName":"crypto/crypto","preview":"<p>Cryptographic algorithms, with support for hash functions such as\nSHA-1, SHA-256, HMAC, and MD5.</p>","packageName":"crypto","packageIntro":""},{"name":"hop","qualifiedName":"hop/hop","packageName":"hop","packageIntro":"<p>!<a href=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\">Hop!</a></p>\n<h2>A Dart framework for reusable tasks</h2>\n<p><a href=\"https://drone.io/github.com/dart-lang/hop/latest\">!<a href=\"https://drone.io/github.com/dart-lang/hop/status.png\">Build Status</a></a> <a href=\"http://waffle.io/dart-lang/hop\">!<a href=\"https://badge.waffle.io/dart-lang/hop.png?label=ready\">Stories in Ready</a></a></p>\n<h1>Projects using Hop</h1><ul><li><a href=\"https://github.com/dart-lang/pop-pop-win\">Pop, Pop, Win!</a> - Minesweeper with balloons</li><li><a href=\"https://github.com/dart-lang/widget.dart\">Dart Widgets</a> - Reusable Web Components</li><li><a href=\"https://github.com/sethladd/lawndart\">Lawndart</a> - Unified, asynchronous, easy-to-use library for browser-based storage.</li><li><a href=\"https://github.com/johnmccutchan/spectre\">Spectre</a> - Spectre Graphics Engine for Dart</li><li><a href=\"https://github.com/johnmccutchan/vector_math\">vector_math</a> - A Vector math library for 2D and 3D applications.</li><li><a href=\"https://github.com/dart-gde/discovery_api_dart_client_generator\">Dart Client Generator for Discovery APIs</a></li><li><a href=\"https://github.com/dart-gde/chrome.dart\">chrome.dart</a> - Dart interop with chrome.* APIs for Chrome Packaged Apps</li><li><a href=\"https://github.com/kevmoo/qr.dart\">qr.dart</a> - Generate QR codes</li><li><a href=\"https://github.com/kevmoo/vote.dart\">vote.dart</a> - Simulate, run, and calculate elections with different election methods</li></ul>\n<h1>Try It Now</h1>\n<p>The <strong>The Hop task management system for Dart</strong> is hosted on <a href=\"http://pub.dartlang.org/packages/hop\">pub.dartlang.org</a>. Add the <strong>Hop</strong> package to your <code>pubspec.yaml</code> file, selecting a version range that works with your version of the SDK. <em>Always check the <a href=\"http://pub.dartlang.org/packages/hop\">Hop page</a> on pub to find the latest release.</em></p>\n<p>See the <a href=\"https://github.com/dart-lang/hop/blob/master/changelog.md\">changelog</a> to find the version that works best for you.</p>\n<p>If you'd like to track bleeding edge developments, you can reference the the <a href=\"https://github.com/dart-lang/hop\">GitHub repository</a> directly:</p>\n<pre><code>dependencies:\n  hop:\n    git: https://github.com/dart-lang/hop.git\n</code></pre>\n<h1>Versioning</h1><ul><li>We follow <a href=\"http://semver.org/\">Semantic Versioning</a>.</li><li>\n<p>We are not planning a V1 for <strong>Hop</strong> until Dart releases V1.\n<em> In the mean time, the version will remain <code>0.Y.Z</code>.\n</em> Changes to the <em>minor</em> version - Y - will indicate breaking changes.\n* Changes to the <em>patch</em> version - Z - indicate non-breaking changes.</p></li></ul>\n<h1>Dart SDK dependency</h1><ul><li>We're going to try to keep <strong>Hop</strong> in line with the <a href=\"https://gsdview.appspot.com/dart-editor-archive-integration/latest/\">latest integration build</a> of the Dart SDK and Editor.</li><li>At this point, each SDK release tends to introduce breaking changes, which usually require breaking changes in <strong>Hop</strong>.</li><li>Keep an eye on the <a href=\"https://github.com/dart-lang/hop/blob/master/changelog.md\">changelog</a> to see how <strong>Hop</strong> aligns with each SDK release.</li></ul>\n<h1>The libraries</h1>\n<h2>hop - core task runtime</h2><ul><li>Easy to create command-line scripts.</li><li>Define functionality in libraries. Add and update them with <code>pub</code>.</li><li>Nice touches for free: bash command completion, help, helpful exit codes</li></ul>\n<h2>hop_tasks</h2><ul><li>A collection of tasks and task helpers.</li><li>Unit tests</li><li>dart2js</li><li>dartdoc</li><li>git</li></ul>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><a href=\"https://github.com/financeCoding\">Adam Singer</a> (<a href=\"https://plus.google.com/104569492481999771226\">+Adam Singer</a>)</li><li><a href=\"https://github.com/damondouglas\">Damon Douglas</a> (<a href=\"https://plus.google.com/u/0/108940381045821372455/\">+Damon Douglas</a>)</li><li><a href=\"https://github.com/devoncarew\">Devon Carew</a> (<a href=\"https://plus.google.com/104561874283081442379/\">+Devon Carew</a>)</li><li><em>You? File bugs. Fork and Fix bugs. Let's build this community.</em></li></ul>"},{"name":"hop-core","qualifiedName":"hop/hop-core","packageName":"hop","packageIntro":"<p>!<a href=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\">Hop!</a></p>\n<h2>A Dart framework for reusable tasks</h2>\n<p><a href=\"https://drone.io/github.com/dart-lang/hop/latest\">!<a href=\"https://drone.io/github.com/dart-lang/hop/status.png\">Build Status</a></a> <a href=\"http://waffle.io/dart-lang/hop\">!<a href=\"https://badge.waffle.io/dart-lang/hop.png?label=ready\">Stories in Ready</a></a></p>\n<h1>Projects using Hop</h1><ul><li><a href=\"https://github.com/dart-lang/pop-pop-win\">Pop, Pop, Win!</a> - Minesweeper with balloons</li><li><a href=\"https://github.com/dart-lang/widget.dart\">Dart Widgets</a> - Reusable Web Components</li><li><a href=\"https://github.com/sethladd/lawndart\">Lawndart</a> - Unified, asynchronous, easy-to-use library for browser-based storage.</li><li><a href=\"https://github.com/johnmccutchan/spectre\">Spectre</a> - Spectre Graphics Engine for Dart</li><li><a href=\"https://github.com/johnmccutchan/vector_math\">vector_math</a> - A Vector math library for 2D and 3D applications.</li><li><a href=\"https://github.com/dart-gde/discovery_api_dart_client_generator\">Dart Client Generator for Discovery APIs</a></li><li><a href=\"https://github.com/dart-gde/chrome.dart\">chrome.dart</a> - Dart interop with chrome.* APIs for Chrome Packaged Apps</li><li><a href=\"https://github.com/kevmoo/qr.dart\">qr.dart</a> - Generate QR codes</li><li><a href=\"https://github.com/kevmoo/vote.dart\">vote.dart</a> - Simulate, run, and calculate elections with different election methods</li></ul>\n<h1>Try It Now</h1>\n<p>The <strong>The Hop task management system for Dart</strong> is hosted on <a href=\"http://pub.dartlang.org/packages/hop\">pub.dartlang.org</a>. Add the <strong>Hop</strong> package to your <code>pubspec.yaml</code> file, selecting a version range that works with your version of the SDK. <em>Always check the <a href=\"http://pub.dartlang.org/packages/hop\">Hop page</a> on pub to find the latest release.</em></p>\n<p>See the <a href=\"https://github.com/dart-lang/hop/blob/master/changelog.md\">changelog</a> to find the version that works best for you.</p>\n<p>If you'd like to track bleeding edge developments, you can reference the the <a href=\"https://github.com/dart-lang/hop\">GitHub repository</a> directly:</p>\n<pre><code>dependencies:\n  hop:\n    git: https://github.com/dart-lang/hop.git\n</code></pre>\n<h1>Versioning</h1><ul><li>We follow <a href=\"http://semver.org/\">Semantic Versioning</a>.</li><li>\n<p>We are not planning a V1 for <strong>Hop</strong> until Dart releases V1.\n<em> In the mean time, the version will remain <code>0.Y.Z</code>.\n</em> Changes to the <em>minor</em> version - Y - will indicate breaking changes.\n* Changes to the <em>patch</em> version - Z - indicate non-breaking changes.</p></li></ul>\n<h1>Dart SDK dependency</h1><ul><li>We're going to try to keep <strong>Hop</strong> in line with the <a href=\"https://gsdview.appspot.com/dart-editor-archive-integration/latest/\">latest integration build</a> of the Dart SDK and Editor.</li><li>At this point, each SDK release tends to introduce breaking changes, which usually require breaking changes in <strong>Hop</strong>.</li><li>Keep an eye on the <a href=\"https://github.com/dart-lang/hop/blob/master/changelog.md\">changelog</a> to see how <strong>Hop</strong> aligns with each SDK release.</li></ul>\n<h1>The libraries</h1>\n<h2>hop - core task runtime</h2><ul><li>Easy to create command-line scripts.</li><li>Define functionality in libraries. Add and update them with <code>pub</code>.</li><li>Nice touches for free: bash command completion, help, helpful exit codes</li></ul>\n<h2>hop_tasks</h2><ul><li>A collection of tasks and task helpers.</li><li>Unit tests</li><li>dart2js</li><li>dartdoc</li><li>git</li></ul>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><a href=\"https://github.com/financeCoding\">Adam Singer</a> (<a href=\"https://plus.google.com/104569492481999771226\">+Adam Singer</a>)</li><li><a href=\"https://github.com/damondouglas\">Damon Douglas</a> (<a href=\"https://plus.google.com/u/0/108940381045821372455/\">+Damon Douglas</a>)</li><li><a href=\"https://github.com/devoncarew\">Devon Carew</a> (<a href=\"https://plus.google.com/104561874283081442379/\">+Devon Carew</a>)</li><li><em>You? File bugs. Fork and Fix bugs. Let's build this community.</em></li></ul>"},{"name":"hop_tasks","qualifiedName":"hop/hop_tasks","packageName":"hop","packageIntro":"<p>!<a href=\"https://raw.github.com/dart-lang/hop/master/resource/logo.png\">Hop!</a></p>\n<h2>A Dart framework for reusable tasks</h2>\n<p><a href=\"https://drone.io/github.com/dart-lang/hop/latest\">!<a href=\"https://drone.io/github.com/dart-lang/hop/status.png\">Build Status</a></a> <a href=\"http://waffle.io/dart-lang/hop\">!<a href=\"https://badge.waffle.io/dart-lang/hop.png?label=ready\">Stories in Ready</a></a></p>\n<h1>Projects using Hop</h1><ul><li><a href=\"https://github.com/dart-lang/pop-pop-win\">Pop, Pop, Win!</a> - Minesweeper with balloons</li><li><a href=\"https://github.com/dart-lang/widget.dart\">Dart Widgets</a> - Reusable Web Components</li><li><a href=\"https://github.com/sethladd/lawndart\">Lawndart</a> - Unified, asynchronous, easy-to-use library for browser-based storage.</li><li><a href=\"https://github.com/johnmccutchan/spectre\">Spectre</a> - Spectre Graphics Engine for Dart</li><li><a href=\"https://github.com/johnmccutchan/vector_math\">vector_math</a> - A Vector math library for 2D and 3D applications.</li><li><a href=\"https://github.com/dart-gde/discovery_api_dart_client_generator\">Dart Client Generator for Discovery APIs</a></li><li><a href=\"https://github.com/dart-gde/chrome.dart\">chrome.dart</a> - Dart interop with chrome.* APIs for Chrome Packaged Apps</li><li><a href=\"https://github.com/kevmoo/qr.dart\">qr.dart</a> - Generate QR codes</li><li><a href=\"https://github.com/kevmoo/vote.dart\">vote.dart</a> - Simulate, run, and calculate elections with different election methods</li></ul>\n<h1>Try It Now</h1>\n<p>The <strong>The Hop task management system for Dart</strong> is hosted on <a href=\"http://pub.dartlang.org/packages/hop\">pub.dartlang.org</a>. Add the <strong>Hop</strong> package to your <code>pubspec.yaml</code> file, selecting a version range that works with your version of the SDK. <em>Always check the <a href=\"http://pub.dartlang.org/packages/hop\">Hop page</a> on pub to find the latest release.</em></p>\n<p>See the <a href=\"https://github.com/dart-lang/hop/blob/master/changelog.md\">changelog</a> to find the version that works best for you.</p>\n<p>If you'd like to track bleeding edge developments, you can reference the the <a href=\"https://github.com/dart-lang/hop\">GitHub repository</a> directly:</p>\n<pre><code>dependencies:\n  hop:\n    git: https://github.com/dart-lang/hop.git\n</code></pre>\n<h1>Versioning</h1><ul><li>We follow <a href=\"http://semver.org/\">Semantic Versioning</a>.</li><li>\n<p>We are not planning a V1 for <strong>Hop</strong> until Dart releases V1.\n<em> In the mean time, the version will remain <code>0.Y.Z</code>.\n</em> Changes to the <em>minor</em> version - Y - will indicate breaking changes.\n* Changes to the <em>patch</em> version - Z - indicate non-breaking changes.</p></li></ul>\n<h1>Dart SDK dependency</h1><ul><li>We're going to try to keep <strong>Hop</strong> in line with the <a href=\"https://gsdview.appspot.com/dart-editor-archive-integration/latest/\">latest integration build</a> of the Dart SDK and Editor.</li><li>At this point, each SDK release tends to introduce breaking changes, which usually require breaking changes in <strong>Hop</strong>.</li><li>Keep an eye on the <a href=\"https://github.com/dart-lang/hop/blob/master/changelog.md\">changelog</a> to see how <strong>Hop</strong> aligns with each SDK release.</li></ul>\n<h1>The libraries</h1>\n<h2>hop - core task runtime</h2><ul><li>Easy to create command-line scripts.</li><li>Define functionality in libraries. Add and update them with <code>pub</code>.</li><li>Nice touches for free: bash command completion, help, helpful exit codes</li></ul>\n<h2>hop_tasks</h2><ul><li>A collection of tasks and task helpers.</li><li>Unit tests</li><li>dart2js</li><li>dartdoc</li><li>git</li></ul>\n<h1>Authors</h1><ul><li><a href=\"https://github.com/kevmoo\">Kevin Moore</a> (<a href=\"https://plus.google.com/110066012384188006594/\">+Kevin Moore</a>, <a href=\"http://twitter.com/kevmoo\">@kevmoo</a>)</li><li><a href=\"https://github.com/financeCoding\">Adam Singer</a> (<a href=\"https://plus.google.com/104569492481999771226\">+Adam Singer</a>)</li><li><a href=\"https://github.com/damondouglas\">Damon Douglas</a> (<a href=\"https://plus.google.com/u/0/108940381045821372455/\">+Damon Douglas</a>)</li><li><a href=\"https://github.com/devoncarew\">Devon Carew</a> (<a href=\"https://plus.google.com/104561874283081442379/\">+Devon Carew</a>)</li><li><em>You? File bugs. Fork and Fix bugs. Let's build this community.</em></li></ul>"},{"name":"dom","qualifiedName":"html5lib/dom","preview":"<p>A simple tree API that results from parsing html. Intended to be compatible\nwith dart:html, but right now it resembles the classic JS DOM.</p>","packageName":"html5lib","packageIntro":"<h1>html5lib in Pure Dart</h1>\n<p>This is a pure <a href=\"http://www.dartlang.org/\">Dart</a> <a href=\"http://dev.w3.org/html5/spec/parsing.html\">html5 parser</a>. It's a port of\n<a href=\"http://code.google.com/p/html5lib/\">html5lib</a> from Python. Since it's 100%\nDart you can use it safely from a script or server side app.</p>\n<p>Eventually the parse tree API will be compatible with <a href=\"http://api.dartlang.org/docs/continuous/dart_html.html\">dart:html</a>, so\nthe same code will work on the client and the server.</p>\n<h2>Installation</h2>\n<p>Add this to your <code>pubspec.yaml</code> (or create it):</p>\n<pre><code>dependencies:\n  html5lib: any\n</code></pre>\n<p>Then run the <a href=\"http://www.dartlang.org/docs/pub-package-manager/\">Pub Package Manager</a> (comes with the Dart SDK):</p>\n<pre><code>pub install\n</code></pre>\n<h2>Usage</h2>\n<p>Parsing HTML is easy!</p>\n<pre><code>import 'package:html5lib/parser.dart' show parse;\nimport 'package:html5lib/dom.dart';\n\nmain() {\n  var document = parse(\n      '&lt;body&gt;Hello world! &lt;a href=\"www.html5rocks.com\"&gt;HTML5 rocks!');\n  print(document.outerHtml);\n}\n</code></pre>\n<p>You can pass a String or list of bytes to <code>parse</code>.\nThere's also <code>parseFragment</code> for parsing a document fragment, and <code>HtmlParser</code>\nif you want more low level control.</p>\n<h2>Running Tests</h2>\n<pre><code># From Dart SVN checkout\n./tools/build.py -m release\n./tools/test.py -m release html5lib\n./tools/test.py -m release -r drt html5lib\n</code></pre>"},{"name":"dom_parsing","qualifiedName":"html5lib/dom_parsing","preview":"<p>This library contains extra APIs that aren't in the DOM, but are useful\nwhen interacting with the parse tree.</p>","packageName":"html5lib","packageIntro":"<h1>html5lib in Pure Dart</h1>\n<p>This is a pure <a href=\"http://www.dartlang.org/\">Dart</a> <a href=\"http://dev.w3.org/html5/spec/parsing.html\">html5 parser</a>. It's a port of\n<a href=\"http://code.google.com/p/html5lib/\">html5lib</a> from Python. Since it's 100%\nDart you can use it safely from a script or server side app.</p>\n<p>Eventually the parse tree API will be compatible with <a href=\"http://api.dartlang.org/docs/continuous/dart_html.html\">dart:html</a>, so\nthe same code will work on the client and the server.</p>\n<h2>Installation</h2>\n<p>Add this to your <code>pubspec.yaml</code> (or create it):</p>\n<pre><code>dependencies:\n  html5lib: any\n</code></pre>\n<p>Then run the <a href=\"http://www.dartlang.org/docs/pub-package-manager/\">Pub Package Manager</a> (comes with the Dart SDK):</p>\n<pre><code>pub install\n</code></pre>\n<h2>Usage</h2>\n<p>Parsing HTML is easy!</p>\n<pre><code>import 'package:html5lib/parser.dart' show parse;\nimport 'package:html5lib/dom.dart';\n\nmain() {\n  var document = parse(\n      '&lt;body&gt;Hello world! &lt;a href=\"www.html5rocks.com\"&gt;HTML5 rocks!');\n  print(document.outerHtml);\n}\n</code></pre>\n<p>You can pass a String or list of bytes to <code>parse</code>.\nThere's also <code>parseFragment</code> for parsing a document fragment, and <code>HtmlParser</code>\nif you want more low level control.</p>\n<h2>Running Tests</h2>\n<pre><code># From Dart SVN checkout\n./tools/build.py -m release\n./tools/test.py -m release html5lib\n./tools/test.py -m release -r drt html5lib\n</code></pre>"},{"name":"parser","qualifiedName":"html5lib/parser","preview":"<p>This library has a parser for HTML5 documents, that lets you parse HTML\neasily from a script or server side application:</p>","packageName":"html5lib","packageIntro":"<h1>html5lib in Pure Dart</h1>\n<p>This is a pure <a href=\"http://www.dartlang.org/\">Dart</a> <a href=\"http://dev.w3.org/html5/spec/parsing.html\">html5 parser</a>. It's a port of\n<a href=\"http://code.google.com/p/html5lib/\">html5lib</a> from Python. Since it's 100%\nDart you can use it safely from a script or server side app.</p>\n<p>Eventually the parse tree API will be compatible with <a href=\"http://api.dartlang.org/docs/continuous/dart_html.html\">dart:html</a>, so\nthe same code will work on the client and the server.</p>\n<h2>Installation</h2>\n<p>Add this to your <code>pubspec.yaml</code> (or create it):</p>\n<pre><code>dependencies:\n  html5lib: any\n</code></pre>\n<p>Then run the <a href=\"http://www.dartlang.org/docs/pub-package-manager/\">Pub Package Manager</a> (comes with the Dart SDK):</p>\n<pre><code>pub install\n</code></pre>\n<h2>Usage</h2>\n<p>Parsing HTML is easy!</p>\n<pre><code>import 'package:html5lib/parser.dart' show parse;\nimport 'package:html5lib/dom.dart';\n\nmain() {\n  var document = parse(\n      '&lt;body&gt;Hello world! &lt;a href=\"www.html5rocks.com\"&gt;HTML5 rocks!');\n  print(document.outerHtml);\n}\n</code></pre>\n<p>You can pass a String or list of bytes to <code>parse</code>.\nThere's also <code>parseFragment</code> for parsing a document fragment, and <code>HtmlParser</code>\nif you want more low level control.</p>\n<h2>Running Tests</h2>\n<pre><code># From Dart SVN checkout\n./tools/build.py -m release\n./tools/test.py -m release html5lib\n./tools/test.py -m release -r drt html5lib\n</code></pre>"},{"name":"parser_console","qualifiedName":"html5lib/parser_console","preview":"<p>This library adds <code>dart:io</code> support to the HTML5 parser. Call\ninitDartIOSupport before calling the <a>html5lib/parser.parse</a> methods and they will accept\na <a>html5lib/dart-io.RandomAccessFile</a> as input, in addition to the other input types.</p>","packageName":"html5lib","packageIntro":"<h1>html5lib in Pure Dart</h1>\n<p>This is a pure <a href=\"http://www.dartlang.org/\">Dart</a> <a href=\"http://dev.w3.org/html5/spec/parsing.html\">html5 parser</a>. It's a port of\n<a href=\"http://code.google.com/p/html5lib/\">html5lib</a> from Python. Since it's 100%\nDart you can use it safely from a script or server side app.</p>\n<p>Eventually the parse tree API will be compatible with <a href=\"http://api.dartlang.org/docs/continuous/dart_html.html\">dart:html</a>, so\nthe same code will work on the client and the server.</p>\n<h2>Installation</h2>\n<p>Add this to your <code>pubspec.yaml</code> (or create it):</p>\n<pre><code>dependencies:\n  html5lib: any\n</code></pre>\n<p>Then run the <a href=\"http://www.dartlang.org/docs/pub-package-manager/\">Pub Package Manager</a> (comes with the Dart SDK):</p>\n<pre><code>pub install\n</code></pre>\n<h2>Usage</h2>\n<p>Parsing HTML is easy!</p>\n<pre><code>import 'package:html5lib/parser.dart' show parse;\nimport 'package:html5lib/dom.dart';\n\nmain() {\n  var document = parse(\n      '&lt;body&gt;Hello world! &lt;a href=\"www.html5rocks.com\"&gt;HTML5 rocks!');\n  print(document.outerHtml);\n}\n</code></pre>\n<p>You can pass a String or list of bytes to <code>parse</code>.\nThere's also <code>parseFragment</code> for parsing a document fragment, and <code>HtmlParser</code>\nif you want more low level control.</p>\n<h2>Running Tests</h2>\n<pre><code># From Dart SVN checkout\n./tools/build.py -m release\n./tools/test.py -m release html5lib\n./tools/test.py -m release -r drt html5lib\n</code></pre>"},{"name":"http","qualifiedName":"http/http","preview":"<p>A composable, <a>http/dart-async.Future</a>-based library for making HTTP requests.</p>","packageName":"http","packageIntro":"<h1>http</h1>\n<p>A composable, Future-based library for making HTTP requests.</p>\n<p>This package contains a set of high-level functions and classes that make it\neasy to consume HTTP resources.</p>\n<p><strong>NOTE:</strong> This package currently only works for\nserver-side or command-line Dart applications. In other words, if the app\nimports <code>dart:io</code>, it can use this package.</p>\n<h2>Using</h2>\n<p>Please see the <a href=\"https://api.dartlang.org/docs/channels/dev/latest/http.html\">API docs</a> for explanations and examples.</p>\n<h2>Filing issues</h2>\n<p>Please file issues for the http package at <a href=\"http://dartbug.com/new\">http://dartbug.com/new</a>.</p>"},{"name":"http-testing","qualifiedName":"http/http-testing","preview":"<p>This library contains testing classes for the HTTP library.</p>","packageName":"http","packageIntro":"<h1>http</h1>\n<p>A composable, Future-based library for making HTTP requests.</p>\n<p>This package contains a set of high-level functions and classes that make it\neasy to consume HTTP resources.</p>\n<p><strong>NOTE:</strong> This package currently only works for\nserver-side or command-line Dart applications. In other words, if the app\nimports <code>dart:io</code>, it can use this package.</p>\n<h2>Using</h2>\n<p>Please see the <a href=\"https://api.dartlang.org/docs/channels/dev/latest/http.html\">API docs</a> for explanations and examples.</p>\n<h2>Filing issues</h2>\n<p>Please file issues for the http package at <a href=\"http://dartbug.com/new\">http://dartbug.com/new</a>.</p>"},{"name":"logging","qualifiedName":"logging/logging","preview":"<p>Support for logging.</p>","packageName":"logging","packageIntro":""},{"name":"path","qualifiedName":"path/path","preview":"<p>A comprehensive, cross-platform path manipulation library.</p>","packageName":"path","packageIntro":"<p>A comprehensive, cross-platform path manipulation library for Dart.</p>\n<p>The path package provides common operations for manipulating paths:\njoining, splitting, normalizing, etc.</p>\n<p>We've tried very hard to make this library do the \"right\" thing on whatever\nplatform you run it on, including in the browser. When you use the top-level\nfunctions, it will assume the current platform's path style and work with\nthat. If you want to explicitly work with paths of a specific style, you can\nconstruct a <code>path.Context</code> for that style.</p>\n<h2>Using</h2>\n<p>The path library was designed to be imported with a prefix, though you don't\nhave to if you don't want to:</p>\n<pre><code>import 'package:path/path.dart' as path;\n</code></pre>\n<p>The most common way to use the library is through the top-level functions.\nThese manipulate path strings based on your current working directory and\nthe path style (POSIX, Windows, or URLs) of the host platform. For example:</p>\n<pre><code>path.join(\"directory\", \"file.txt\");\n</code></pre>\n<p>This calls the top-level join function to join \"directory\" and\n\"file.txt\" using the current platform's directory separator.</p>\n<p>If you want to work with paths for a specific platform regardless of the\nunderlying platform that the program is running on, you can create a\nContext and give it an explicit Style:</p>\n<pre><code>var context = new path.Context(style: Style.windows);\ncontext.join(\"directory\", \"file.txt\");\n</code></pre>\n<p>This will join \"directory\" and \"file.txt\" using the Windows path separator,\neven when the program is run on a POSIX machine.</p>\n<h2>FAQ</h2>\n<h3>Where can I use this?</h3>\n<p>Pathos runs on the Dart VM and in the browser under both dart2js and Dartium.\nUnder dart2js, it currently returns \".\" as the current working directory, while\nunder Dartium it returns the current URL.</p>\n<h3>Why doesn't this make paths first-class objects?</h3>\n<p>When you have path <em>objects</em>, then every API that takes a path has to decide if\nit accepts strings, path objects, or both.</p><ul><li>\n<p>Accepting strings is the most convenient, but then it seems weird to have\nthese path objects that aren't actually accepted by anything that needs a\npath. Once you've created a path, you have to always call <code>.toString()</code> on\nit before you can do anything useful with it.</p></li><li>\n<p>Requiring objects forces users to wrap path strings in these objects, which\nis tedious. It also means coupling that API to whatever library defines this\npath class. If there are multiple \"path\" libraries that each define their\nown path types, then any library that works with paths has to pick which one\nit uses.</p></li><li>\n<p>Taking both means you can't type your API. That defeats the purpose of\nhaving a path type: why have a type if your APIs can't annotate that they\nexpect it?</p></li></ul>\n<p>Given that, we've decided this library should simply treat paths as strings.</p>\n<h3>How cross-platform is this?</h3>\n<p>We believe this library handles most of the corner cases of Windows paths\n(POSIX paths are generally pretty straightforward):</p><ul><li>\n<p>It understands that <em>both</em> \"/\" and \"\\\" are valid path separators, not just\n\"\\\".</p></li><li>\n<p>It can accurately tell if a path is absolute based on drive-letters or UNC\nprefix.</p></li><li>\n<p>It understands that \"/foo\" is not an absolute path on Windows.</p></li><li>\n<p>It knows that \"C:\\foo\\one.txt\" and \"c:/foo\\two.txt\" are two files in the\nsame directory.</p></li></ul>\n<h3>What is a \"path\" in the browser?</h3>\n<p>If you use this package in a browser, then it considers the \"platform\" to be\nthe browser itself and uses URL strings to represent \"browser paths\".</p>"},{"name":"scheduled_test-descriptor","qualifiedName":"scheduled_test/scheduled_test-descriptor","preview":"<p>A library for declaratively describing a filesystem structure, usually for\nthe purpose of creating or validating it as part of a scheduled test.</p>","packageName":"scheduled_test","packageIntro":""},{"name":"scheduled_test-scheduled_process","qualifiedName":"scheduled_test/scheduled_test-scheduled_process","packageName":"scheduled_test","packageIntro":""},{"name":"scheduled_test-scheduled_server","qualifiedName":"scheduled_test/scheduled_test-scheduled_server","packageName":"scheduled_test","packageIntro":""},{"name":"scheduled_test-scheduled_stream","qualifiedName":"scheduled_test/scheduled_test-scheduled_stream","packageName":"scheduled_test","packageIntro":""},{"name":"scheduled_test","qualifiedName":"scheduled_test/scheduled_test","preview":"<p>A package for writing readable tests of asynchronous behavior.</p>","packageName":"scheduled_test","packageIntro":""},{"name":"source_maps-builder","qualifiedName":"source_maps/source_maps-builder","preview":"<p>Contains a builder object useful for creating source maps programatically.</p>","packageName":"source_maps","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"},{"name":"source_maps-parser","qualifiedName":"source_maps/source_maps-parser","preview":"<p>Contains the top-level function to parse source maps version 3.</p>","packageName":"source_maps","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"},{"name":"source_maps-printer","qualifiedName":"source_maps/source_maps-printer","preview":"<p>Contains a code printer that generates code by recording the source maps.</p>","packageName":"source_maps","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"},{"name":"source_maps-refactor","qualifiedName":"source_maps/source_maps-refactor","preview":"<p>Tools to help implement refactoring like transformations to Dart code.</p>","packageName":"source_maps","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"},{"name":"source_maps","qualifiedName":"source_maps/source_maps","preview":"<p>Library to create and parse source maps.</p>","packageName":"source_maps","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"},{"name":"source_maps-span","qualifiedName":"source_maps/source_maps-span","preview":"<p>Dart classes representing the souce spans and source files.</p>","packageName":"source_maps","packageIntro":"<h1>Source Maps</h1>\n<p>This project implements a Dart pub package to work with source maps. The\nimplementation is based on the <a href=\"https://docs.google.com/a/google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit\">source map version 3 spec</a> which was\noriginated from the <a href=\"http://code.google.com/p/closure-compiler/wiki/SourceMaps\">Closure Compiler</a> and has been implemented in\nChrome and Firefox.</p>\n<p>In this package we provide:\n  * Data types defining file locations and spans: these are not part of the</p>\n<pre><code>original source map specification. These data types are great for tracking\nsource locations on source maps, but they can also be used by tools to\nreporting useful error messages that include on source locations.\n</code></pre><ul><li>\n<p>A builder that creates a source map programatically and produces the encoded\nsource map format.</p></li><li>\n<p>A parser that reads the source map format and provides APIs to read the\nmapping information.</p></li></ul>\n<p>Some upcoming features we are planning to add to this package are:\n  * A printer that lets you generate code, but record source map information in</p>\n<pre><code>the process.\n</code></pre><ul><li>\n<p>A tool that can compose source maps together. This would be useful for\ninstance, if you have 2 tools that produce source maps and you call one with\nthe result of the other.</p></li></ul>"},{"name":"stack_trace","qualifiedName":"stack_trace/stack_trace","preview":"<p>Stack trace generation and parsing.</p>","packageName":"stack_trace","packageIntro":"<p>This library provides the ability to parse, inspect, and manipulate stack traces\nproduced by the underlying Dart implementation. It also provides functions to\nproduce string representations of stack traces in a more readable format than\nthe native <a>dart-core</a> implementation.</p>\n<p><code>Trace</code>s can be parsed from native <a>dart-core</a>s using <code>Trace.from</code>, or captured\nusing <code>Trace.current</code>. Native <a>dart-core</a>s can also be directly converted to\nhuman-readable strings using <code>Trace.format</code>.</p>\n<p>Here's an example native stack trace from debugging this library:</p>\n<pre><code>#0      Object.noSuchMethod (dart:core-patch:1884:25)\n#1      Trace.terse.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/src/trace.dart:47:21)\n#2      IterableMixinWorkaround.reduce (dart:collection:29:29)\n#3      List.reduce (dart:core-patch:1247:42)\n#4      Trace.terse (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/src/trace.dart:40:35)\n#5      format (file:///usr/local/google-old/home/goog/dart/dart/pkg/stack_trace/lib/stack_trace.dart:24:28)\n#6      main.&lt;anonymous closure&gt; (file:///usr/local/google-old/home/goog/dart/dart/test.dart:21:29)\n#7      _CatchErrorFuture._sendError (dart:async:525:24)\n#8      _FutureImpl._setErrorWithoutAsyncTrace (dart:async:393:26)\n#9      _FutureImpl._setError (dart:async:378:31)\n#10     _ThenFuture._sendValue (dart:async:490:16)\n#11     _FutureImpl._handleValue.&lt;anonymous closure&gt; (dart:async:349:28)\n#12     Timer.run.&lt;anonymous closure&gt; (dart:async:2402:21)\n#13     Timer.Timer.&lt;anonymous closure&gt; (dart:async-patch:15:15)\n</code></pre>\n<p>and its human-readable representation:</p>\n<pre><code>dart:core-patch                             Object.noSuchMethod\npkg/stack_trace/lib/src/trace.dart 47:21    Trace.terse.&lt;fn&gt;\ndart:collection                             IterableMixinWorkaround.reduce\ndart:core-patch                             List.reduce\npkg/stack_trace/lib/src/trace.dart 40:35    Trace.terse\npkg/stack_trace/lib/stack_trace.dart 24:28  format\ntest.dart 21:29                             main.&lt;fn&gt;\ndart:async                                  _CatchErrorFuture._sendError\ndart:async                                  _FutureImpl._setErrorWithoutAsyncTrace\ndart:async                                  _FutureImpl._setError\ndart:async                                  _ThenFuture._sendValue\ndart:async                                  _FutureImpl._handleValue.&lt;fn&gt;\ndart:async                                  Timer.run.&lt;fn&gt;\ndart:async-patch                            Timer.Timer.&lt;fn&gt;\n</code></pre>\n<p>You can further clean up the stack trace using <code>Trace.terse</code>. This folds\ntogether multiple stack frames from the Dart core libraries, so that only the\ncore library method that was directly called from user code is visible. For\nexample:</p>\n<pre><code>dart:core                                   Object.noSuchMethod\npkg/stack_trace/lib/src/trace.dart 47:21    Trace.terse.&lt;fn&gt;\ndart:core                                   List.reduce\npkg/stack_trace/lib/src/trace.dart 40:35    Trace.terse\npkg/stack_trace/lib/stack_trace.dart 24:28  format\ntest.dart 21:29                             main.&lt;fn&gt;\ndart:async                                  Timer.Timer.&lt;fn&gt;\n</code></pre>"},{"name":"unittest-compact_vm_config","qualifiedName":"unittest/unittest-compact_vm_config","preview":"<p>A test configuration that generates a compact 1-line progress bar. The bar is\nupdated in-place before and after each test is executed. If all test pass,\nyou should only see a couple lines in the terminal. If a test fails, the\nfailure is shown and the progress bar continues to be updated below it.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-html_config","qualifiedName":"unittest/unittest-html_config","preview":"<p>A simple unit test library for running tests in a browser.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-html_enhanced_config","qualifiedName":"unittest/unittest-html_enhanced_config","preview":"<p>A simple unit test library for running tests in a browser.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-html_individual_config","qualifiedName":"unittest/unittest-html_individual_config","preview":"<p>A unit test library for running groups of tests in a browser, instead of the\nentire test file. This is especially used for large tests files that have\nmany subtests, so we can mark groups as failing at a finer granularity than\nthe entire test file.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-matcher","qualifiedName":"unittest/unittest-matcher","preview":"<p>Support for specifying test expectations,\nsuch as for unit tests.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-mirror_matchers","qualifiedName":"unittest/unittest-mirror_matchers","preview":"<p>The mirror matchers library provides some additional matchers that\nmake use of dart:mirrors.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-mock","qualifiedName":"unittest/unittest-mock","preview":"<p>A simple mocking/spy library.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest","qualifiedName":"unittest/unittest","preview":"<p>Support for writing Dart unit tests.</p>","packageName":"unittest","packageIntro":""},{"name":"unittest-vm_config","qualifiedName":"unittest/unittest-vm_config","preview":"<p>A simple unit test library for running tests on the VM.</p>","packageName":"unittest","packageIntro":""},{"name":"utf","qualifiedName":"utf/utf","preview":"<p>Support for encoding and decoding Unicode characters in UTF-8, UTF-16, and\nUTF-32.</p>","packageName":"utf","packageIntro":"<p>A Unicode manipulation library for Dart.</p>\n<p>The utf package provides common operations for manipulating Unicode sequences.\nIn its initial form it is a copy of the <code>dart:utf</code> library before that was\ndeprecated.</p>"}],"introduction":"","filetype":"json","start-page":"hop_docgen"}