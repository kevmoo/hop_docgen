{"name":"Cascade","qualifiedName":"shelf/shelf.Cascade","comment":"<p>A helper that calls several handlers in sequence and returns the first\nacceptable response.</p>\n<p>By default, a response is considered acceptable if it has a status other\nthan 404 or 405; other statuses indicate that the handler understood the\nrequest.</p>\n<p>If all handlers return unacceptable responses, the final response will be\nreturned.</p>\n<pre><code>var handler = new Cascade()\n    .add(webSocketHandler)\n    .add(staticFileHandler)\n    .add(application)\n    .handler;\n</code></pre>","isAbstract":false,"superclass":"dart-core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"handler":{"name":"handler","qualifiedName":"shelf/shelf.Cascade.handler","comment":"<p>Exposes this cascade as a single handler.</p>\n<p>This handler will call each inner handler in the cascade until one returns\nan acceptable response, and return that. If no inner handlers return an\nacceptable response, this will return the final response.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"shelf/shelf.Handler","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"shelf/shelf.Cascade.Cascade-","comment":"<p>Creates a new, empty cascade.</p>\n<p>If <a>shelf/shelf.Cascade.Cascade-.statusCodes</a> is passed, responses with those status codes are\nconsidered unacceptable. If <a>shelf/shelf.Cascade.Cascade-.shouldCascade</a> is passed, responses for which\nit returns <code>true</code> are considered unacceptale. statusCode and\n<a>shelf/shelf.Cascade.Cascade-.shouldCascade</a> may not both be passed.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"statusCodes":{"name":"statusCodes","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Iterable","inner":[{"outer":"dart-core.int","inner":[]}]}],"value":null,"annotations":[]},"shouldCascade":{"name":"shouldCascade","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Function","inner":[]}],"value":null,"annotations":[],"functionDeclaration":{"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"response":{"name":"response","optional":false,"named":false,"default":false,"type":[{"outer":"shelf/shelf.Response","inner":[]}],"value":null,"annotations":[]}}}}},"annotations":[]}},"operators":{},"methods":{"add":{"name":"add","qualifiedName":"shelf/shelf.Cascade.add","comment":"<p>Returns a new cascade with <a>shelf/shelf.Cascade.add.handler</a> added to the end.</p>\n<p><a>shelf/shelf.Cascade.add.handler</a> will only be called if all previous handlers in the cascade\nreturn unacceptable responses.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"shelf/shelf.Cascade","inner":[]}],"parameters":{"handler":{"name":"handler","optional":false,"named":false,"default":false,"type":[{"outer":"shelf/shelf.Handler","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"shelf/shelf.Cascade.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>shelf/shelf.Cascade.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"shelf/shelf.Cascade.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"shelf/shelf.Cascade.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>shelf/shelf.Cascade.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>shelf/shelf.Cascade.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"shelf/shelf.Cascade.noSuchMethod","comment":"<p><a>shelf/shelf.Cascade.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>shelf/shelf.Cascade.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>shelf/shelf.Cascade.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>shelf/shelf.Cascade.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"shelf/shelf.Cascade.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}