{"name":"Message","qualifiedName":"shelf/shelf.Message","comment":"<p>Represents logic shared between Request and Response.</p>","isAbstract":true,"superclass":"dart-core.Object","implements":[],"subclass":["shelf/shelf.Request","shelf/shelf.Response"],"variables":{"context":{"name":"context","qualifiedName":"shelf/shelf.Message.context","comment":"<p>Extra context that can be used by for middleware and handlers.</p>\n<p>For requests, this is used to pass data to inner middleware and handlers;\nfor responses, it's used to pass data to outer middleware and handlers.</p>\n<p>Context properties that are used by a particular package should begin with\nthat package's name followed by a period. For example, if logRequests\nwanted to take a prefix, its property name would be <code>\"shelf.prefix\"</code>,\nsince it's in the <code>shelf</code> package.</p>\n<p>The value is immutable.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"annotations":[]},"headers":{"name":"headers","qualifiedName":"shelf/shelf.Message.headers","comment":"<p>The HTTP headers.</p>\n<p>The value is immutable.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{"contentLength":{"name":"contentLength","qualifiedName":"shelf/shelf.Message.contentLength","comment":"<p>The contents of the content-length field in <a>shelf/shelf.Message.headers</a>.</p>\n<p>If not set, <code>null</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"encoding":{"name":"encoding","qualifiedName":"shelf/shelf.Message.encoding","comment":"<p>The encoding of the message body.</p>\n<p>This is parsed from the \"charset\" paramater of the Content-Type header in\n<a>shelf/shelf.Message.headers</a>.</p>\n<p>If <a>shelf/shelf.Message.headers</a> doesn't have a Content-Type header or it specifies an\nencoding that dart:convert doesn't support, this will be <code>null</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Encoding","inner":[]}],"parameters":{},"annotations":[]},"mimeType":{"name":"mimeType","qualifiedName":"shelf/shelf.Message.mimeType","comment":"<p>The MIME type of the message.</p>\n<p>This is parsed from the Content-Type header in <a>shelf/shelf.Message.headers</a>. It contains only\nthe MIME type, without any Content-Type parameters.</p>\n<p>If <a>shelf/shelf.Message.headers</a> doesn't have a Content-Type header, this will be <code>null</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"shelf/shelf.Message.Message-","comment":"<p>Creates a new <a>shelf/shelf.Message</a>.</p>\n<p>If <a>shelf/shelf.Message.Message-.headers</a> is <code>null</code>, it is treated as empty.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"_body":{"name":"_body","optional":false,"named":false,"default":false,"type":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"change":{"name":"change","qualifiedName":"shelf/shelf.Message.change","comment":"<p>Creates a new <a>shelf/shelf.Message</a> by copying existing values and applying specified\nchanges.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":true,"constant":false,"return":[{"outer":"shelf/shelf.Message","inner":[]}],"parameters":{"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"read":{"name":"read","qualifiedName":"shelf/shelf.Message.read","comment":"<p>Returns a <a>shelf/dart-async.Stream</a> representing the body.</p>\n<p>Can only be called once.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"parameters":{},"annotations":[]},"readAsString":{"name":"readAsString","qualifiedName":"shelf/shelf.Message.readAsString","comment":"<p>Returns a <a>shelf/dart-async.Future</a> containing the body as a String.</p>\n<p>If <a>shelf/shelf.Message.readAsString.encoding</a> is passed, that's used to decode the body.\nOtherwise the encoding is taken from the Content-Type header. If that\ndoesn't exist or doesn't have a \"charset\" parameter, UTF-8 is used.</p>\n<p>This calls <a>shelf/shelf.Message.read</a> internally, which can only be called once.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"encoding":{"name":"encoding","optional":true,"named":false,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"shelf/shelf.Message.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>shelf/shelf.Message.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"shelf/shelf.Message.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"shelf/shelf.Message.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>shelf/shelf.Message.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>shelf/shelf.Message.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"shelf/shelf.Message.noSuchMethod","comment":"<p><a>shelf/shelf.Message.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>shelf/shelf.Message.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>shelf/shelf.Message.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>shelf/shelf.Message.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"shelf/shelf.Message.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}