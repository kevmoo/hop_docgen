{"name":"Response","qualifiedName":"shelf/shelf.Response","comment":"<p>The response returned by a Handler.</p>","isAbstract":false,"superclass":"shelf/shelf.Message","implements":[],"subclass":[],"variables":{"statusCode":{"name":"statusCode","qualifiedName":"shelf/shelf.Response.statusCode","comment":"<p>The HTTP status code of the response.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.int","inner":[]}],"annotations":[]}},"inheritedVariables":{"context":{"name":"context","qualifiedName":"shelf/shelf.Message.context","comment":"<p>Extra context that can be used by for middleware and handlers.</p>\n<p>For requests, this is used to pass data to inner middleware and handlers;\nfor responses, it's used to pass data to outer middleware and handlers.</p>\n<p>Context properties that are used by a particular package should begin with\nthat package's name followed by a period. For example, if logRequests\nwanted to take a prefix, its property name would be <code>\"shelf.prefix\"</code>,\nsince it's in the <code>shelf</code> package.</p>\n<p>The value is immutable.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"annotations":[]},"headers":{"name":"headers","qualifiedName":"shelf/shelf.Message.headers","comment":"<p>The HTTP headers.</p>\n<p>The value is immutable.</p>","final":true,"static":false,"constant":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"annotations":[]}},"methods":{"setters":{},"getters":{"expires":{"name":"expires","qualifiedName":"shelf/shelf.Response.expires","comment":"<p>The date and time after which the response's data should be considered\nstale.</p>\n<p>This is parsed from the Expires header in <a>shelf/shelf-message.Message.headers</a>. If <a>shelf/shelf-message.Message.headers</a> doesn't\nhave an Expires header, this will be <code>null</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[]},"lastModified":{"name":"lastModified","qualifiedName":"shelf/shelf.Response.lastModified","comment":"<p>The date and time the source of the response's data was last modified.</p>\n<p>This is parsed from the Last-Modified header in <a>shelf/shelf-message.Message.headers</a>. If <a>shelf/shelf-message.Message.headers</a>\ndoesn't have a Last-Modified header, this will be <code>null</code>.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.DateTime","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{"":{"name":"","qualifiedName":"shelf/shelf.Response.Response-","comment":"<p>Constructs an HTTP response with the given <a>shelf/shelf.Response.Response-.statusCode</a>.</p>\n<p><a>shelf/shelf.Response.Response-.statusCode</a> must be greater than or equal to 100.</p>\n<p><a>shelf/shelf.Response.Response-.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's <code>null</code> or not\npassed, a default error message is used. If it's a <a>dart-core.String</a>, <a>shelf/shelf.Response.Response-.encoding</a> is\nused to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to UTF-8.</p>\n<p>If <a>shelf/shelf.Response.Response-.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.Response.Response-.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"statusCode":{"name":"statusCode","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.int","inner":[]}],"value":null,"annotations":[]},"body":{"name":"body","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"forbidden":{"name":"forbidden","qualifiedName":"shelf/shelf.Response.Response-forbidden","comment":"<p>Constructs a 403 Forbidden response.</p>\n<p>This indicates that the server is refusing to fulfill the request.</p>\n<p><a>shelf/shelf.Response.Response-forbidden.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's a <a>dart-core.String</a>,\n<a>shelf/shelf.Response.Response-forbidden.encoding</a> is used to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to\nUTF-8.</p>\n<p>If <a>shelf/shelf.Response.Response-forbidden.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.Response.Response-forbidden.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"found":{"name":"found","qualifiedName":"shelf/shelf.Response.Response-found","comment":"<p>Constructs a 302 Found response.</p>\n<p>This indicates that the requested resource has moved temporarily to a new\nURI. <a>shelf/shelf.Response.Response-found.location</a> is that URI; it can be either a <a>dart-core.String</a> or a <a>dart-core.Uri</a>. It's\nautomatically set as the Location header in <a>shelf/shelf.Response.Response-found.headers</a>.</p>\n<p><a>shelf/shelf.Response.Response-found.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's a <a>dart-core.String</a>,\n<a>shelf/shelf.Response.Response-found.encoding</a> is used to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to\nUTF-8.</p>\n<p>If <a>shelf/shelf.Response.Response-found.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.Response.Response-found.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"location":{"name":"location","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"body":{"name":"body","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"internalServerError":{"name":"internalServerError","qualifiedName":"shelf/shelf.Response.Response-internalServerError","comment":"<p>Constructs a 500 Internal Server Error response.</p>\n<p>This indicates that the server had an internal error that prevented it\nfrom fulfilling the request.</p>\n<p><a>shelf/shelf.Response.Response-internalServerError.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's <code>null</code> or not\npassed, a default error message is used. If it's a <a>dart-core.String</a>, <a>shelf/shelf.Response.Response-internalServerError.encoding</a> is\nused to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to UTF-8.</p>\n<p>If <a>shelf/shelf.Response.Response-internalServerError.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.Response.Response-internalServerError.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"body":{"name":"body","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"movedPermanently":{"name":"movedPermanently","qualifiedName":"shelf/shelf.Response.Response-movedPermanently","comment":"<p>Constructs a 301 Moved Permanently response.</p>\n<p>This indicates that the requested resource has moved permanently to a new\nURI. <a>shelf/shelf.Response.Response-movedPermanently.location</a> is that URI; it can be either a <a>dart-core.String</a> or a <a>dart-core.Uri</a>. It's\nautomatically set as the Location header in <a>shelf/shelf.Response.Response-movedPermanently.headers</a>.</p>\n<p><a>shelf/shelf.Response.Response-movedPermanently.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's a <a>dart-core.String</a>,\n<a>shelf/shelf.Response.Response-movedPermanently.encoding</a> is used to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to\nUTF-8.</p>\n<p>If <a>shelf/shelf.Response.Response-movedPermanently.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.Response.Response-movedPermanently.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"location":{"name":"location","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"body":{"name":"body","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"notFound":{"name":"notFound","qualifiedName":"shelf/shelf.Response.Response-notFound","comment":"<p>Constructs a 404 Not Found response.</p>\n<p>This indicates that the server didn't find any resource matching the\nrequested URI.</p>\n<p><a>shelf/shelf.Response.Response-notFound.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's a <a>dart-core.String</a>,\n<a>shelf/shelf.Response.Response-notFound.encoding</a> is used to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to\nUTF-8.</p>\n<p>If <a>shelf/shelf.Response.Response-notFound.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.Response.Response-notFound.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"notModified":{"name":"notModified","qualifiedName":"shelf/shelf.Response.Response-notModified","comment":"<p>Constructs a 304 Not Modified response.</p>\n<p>This is used to respond to a conditional GET request that provided\ninformation used to determine whether the requested resource has changed\nsince the last request. It indicates that the resource has not changed and\nthe old value should be used.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"ok":{"name":"ok","qualifiedName":"shelf/shelf.Response.Response-ok","comment":"<p>Constructs a 200 OK response.</p>\n<p>This indicates that the request has succeeded.</p>\n<p><a>shelf/shelf.Response.Response-ok.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's a <a>dart-core.String</a>,\n<a>shelf/shelf.Response.Response-ok.encoding</a> is used to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to\nUTF-8.</p>\n<p>If <a>shelf/shelf.Response.Response-ok.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.Response.Response-ok.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"body":{"name":"body","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"seeOther":{"name":"seeOther","qualifiedName":"shelf/shelf.Response.Response-seeOther","comment":"<p>Constructs a 303 See Other response.</p>\n<p>This indicates that the response to the request should be retrieved using\na GET request to a new URI. <a>shelf/shelf.Response.Response-seeOther.location</a> is that URI; it can be either a\n<a>dart-core.String</a> or a <a>dart-core.Uri</a>. It's automatically set as the Location header in\n<a>shelf/shelf.Response.Response-seeOther.headers</a>.</p>\n<p><a>shelf/shelf.Response.Response-seeOther.body</a> is the response body. It may be either a <a>dart-core.String</a>, a\nStream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>, or <code>null</code> to indicate no body. If it's a <a>dart-core.String</a>,\n<a>shelf/shelf.Response.Response-seeOther.encoding</a> is used to encode it to a Stream&lt;<a>dart-core</a>&lt;<a>dart-core</a>>>. It defaults to\nUTF-8.</p>\n<p>If <a>shelf/shelf.Response.Response-seeOther.encoding</a> is passed, the \"encoding\" field of the Content-Type header\nin <a>shelf/shelf.Response.Response-seeOther.headers</a> will be set appropriately. If there is no existing\nContent-Type header, it will be set to \"application/octet-stream\".</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"location":{"name":"location","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"body":{"name":"body","optional":true,"named":true,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]},"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"encoding":{"name":"encoding","optional":true,"named":true,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"change":{"name":"change","qualifiedName":"shelf/shelf.Response.change","comment":"<p>Creates a new <a>shelf/shelf.Response</a> by copying existing values and applying specified\nchanges.</p>\n<p>New key-value pairs in <a>shelf/shelf.Response.change.context</a> and <a>shelf/shelf.Response.change.headers</a> will be added to the copied\n<a>shelf/shelf.Response</a>.</p>\n<p>If <a>shelf/shelf.Response.change.context</a> or <a>shelf/shelf.Response.change.headers</a> includes a key that already exists, the\nkey-value pair will replace the corresponding entry in the copied\n<a>shelf/shelf.Response</a>.</p>\n<p>All other context and header values from the <a>shelf/shelf.Response</a> will be included\nin the copied <a>shelf/shelf.Response</a> unchanged.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"shelf/shelf.Response","inner":[]}],"parameters":{"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"contentLength":{"name":"contentLength","qualifiedName":"shelf/shelf.Response.contentLength","comment":"<p>The contents of the content-length field in <a>shelf/shelf-message.Message.headers</a>.</p>\n<p>If not set, <code>null</code>.</p>","commentFrom":"","inheritedFrom":"shelf.Message.contentLength","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"encoding":{"name":"encoding","qualifiedName":"shelf/shelf.Response.encoding","comment":"<p>The encoding of the message body.</p>\n<p>This is parsed from the \"charset\" paramater of the Content-Type header in\n<a>shelf/shelf-message.Message.headers</a>.</p>\n<p>If <a>shelf/shelf-message.Message.headers</a> doesn't have a Content-Type header or it specifies an\nencoding that dart:convert doesn't support, this will be <code>null</code>.</p>","commentFrom":"","inheritedFrom":"shelf.Message.encoding","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-convert.Encoding","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"shelf/shelf.Response.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>shelf/shelf.Response.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.int","inner":[]}],"parameters":{},"annotations":[]},"mimeType":{"name":"mimeType","qualifiedName":"shelf/shelf.Response.mimeType","comment":"<p>The MIME type of the message.</p>\n<p>This is parsed from the Content-Type header in <a>shelf/shelf-message.Message.headers</a>. It contains only\nthe MIME type, without any Content-Type parameters.</p>\n<p>If <a>shelf/shelf-message.Message.headers</a> doesn't have a Content-Type header, this will be <code>null</code>.</p>","commentFrom":"","inheritedFrom":"shelf.Message.mimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"shelf/shelf.Response.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"shelf/shelf.Response.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart-core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>shelf/shelf.Response.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>shelf/shelf.Response.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"change":{"name":"change","qualifiedName":"shelf/shelf.Response.change","comment":"<p>Creates a new <a>shelf/shelf.Message</a> by copying existing values and applying specified\nchanges.</p>","commentFrom":"","inheritedFrom":"shelf.Message.change","static":false,"abstract":true,"constant":false,"return":[{"outer":"shelf/shelf.Message","inner":[]}],"parameters":{"headers":{"name":"headers","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.String","inner":[]}]}],"value":null,"annotations":[]},"context":{"name":"context","optional":true,"named":true,"default":false,"type":[{"outer":"dart-core.Map","inner":[{"outer":"dart-core.String","inner":[]},{"outer":"dart-core.Object","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"shelf/shelf.Response.noSuchMethod","comment":"<p><a>shelf/shelf.Response.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>shelf/shelf.Response.noSuchMethod</a> in an <a>dart-core.Invocation</a>.\nIf <a>shelf/shelf.Response.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>shelf/shelf.Response.noSuchMethod</a> is to throw a\n<a>dart-core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart-core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"read":{"name":"read","qualifiedName":"shelf/shelf.Response.read","comment":"<p>Returns a <a>shelf/dart-async.Stream</a> representing the body.</p>\n<p>Can only be called once.</p>","commentFrom":"","inheritedFrom":"shelf.Message.read","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Stream","inner":[{"outer":"dart-core.List","inner":[{"outer":"dart-core.int","inner":[]}]}]}],"parameters":{},"annotations":[]},"readAsString":{"name":"readAsString","qualifiedName":"shelf/shelf.Response.readAsString","comment":"<p>Returns a <a>shelf/dart-async.Future</a> containing the body as a String.</p>\n<p>If <a>shelf/shelf.Response.readAsString.encoding</a> is passed, that's used to decode the body.\nOtherwise the encoding is taken from the Content-Type header. If that\ndoesn't exist or doesn't have a \"charset\" parameter, UTF-8 is used.</p>\n<p>This calls <a>shelf/shelf.Response.read</a> internally, which can only be called once.</p>","commentFrom":"","inheritedFrom":"shelf.Message.readAsString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-async.Future","inner":[{"outer":"dart-core.String","inner":[]}]}],"parameters":{"encoding":{"name":"encoding","optional":true,"named":false,"default":false,"type":[{"outer":"dart-convert.Encoding","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"shelf/shelf.Response.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart-core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart-core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}